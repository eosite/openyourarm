(function($, window, document, undefined) {
	var plugin = "bootstrapdialog", optionKey = plugin + ".options",
	
    Build = function(o) {
		this.target = o;
		this.w = $(document);
		this.options = $(this.target).data(optionKey).options;
		this._init($(this));
		
	};
	
	$.fn[plugin] = function(options, param) {
		if (typeof options == 'string' && (options in $.fn[plugin].methods)) {
			var p = this.data(plugin);
			if (!plugin) {
				this.data("bootstrapdialog", new Plugin(this, params));
            } 
			return p ? p[options].apply(p, Array.prototype.slice.call(
					arguments, 1)) : $.fn[plugin].methods[options](this, param);
		}
		options = options || {};
		return this.each(function(i, o) {
			var state = $.data(o, optionKey);
			if (state) {
				$.extend(true, state.options, options);
			} else {
				$.data(o, optionKey, {
					options : $
							.extend(true, {}, $.fn[plugin].defaults, options),
					datas : param
				});
			}
			$.data(o, plugin, new Build(o));
		});
	};

	$.fn[plugin].defaults = {
			
	};

	$.fn[plugin].methods = {
		_init : function(e){
			var that = this;
			var $target = $(this.target);
			that.$target = $target;
			$target.hide();
			$target.css("margin","0px 0px");
			$target.find(".containerComp").css({
				"min-height":"0px"
			});
			that.options.width = that.options.width || "500px";
			that.options.height = that.options.height || "500px";
		},
		
		_open : function(param){
			var list = this.$target;
			var that = this;
			
			if(that.dialog){
				that.dialog.getModal().data("bs.modal").$backdrop.show();
				// that.dialog.getModal().height(0);
				that.dialog.getModal().show();
				// that.dialog.getModal().animate({
				// 	height:that.dialogHeight
				// },300);
				return;
			}
			var dialog = BootstrapDialog.show({ 
				title: param.title == null ? '窗口' : param.title, 
				draggable: true, 
				cssClass : 'bootstrapFrame',
				css: {
					width: that.options.width,
					height: that.options.height
				},
				message: function(dialog) { 					
					return list.show(); 
				}, 
				data : { 
					id : list.attr("id")
				},
				onhidden: function(dialog){	
	            },	
			});
			that.dialog = dialog;
			param.borderRadius = param.borderRadius || '10px';
			dialog.getModalHeader().hide();
			dialog.getModalContent().attr("style","border-radius:"+param.borderRadius+" !important;")
			dialog.getModalContent().css({
				"border-style":"none",
				"overflow":"hidden"
			});
			dialog.getModalBody().css({
				padding: '0px 0px'
			})
			dialog.getModalDialog().css({"margin":"auto","margin-top":"180px"});
			// dialog.$modal.css({
			// 	//display: 'table',
			// 	padding: '0px 10px'
			// });
			// dialog.$modalDialog.css({
			// 	margin: '0px 10px'
			// });
			that.dialog.close = function(){
				if(!that.dialog.getModal().is(":hidden")){
					that.dialogHeight = that.dialog.getModal().height();
				}
				that.dialog.getModal().hide();
				that.dialog.getModal().data("bs.modal").$backdrop.hide();
				if($.isFunction(dialog.options.onhidden)){
					that.dialog.options.onhidden();
				}
			}
			// that.dialog.getModal().unbind("click");
			// that.dialog.getModal().on('click', {dialog: that.dialog}, function (event) {
   //              $(event.target).hasClass('modal-backdrop') && event.data.dialog.isClosable() && event.data.dialog.canCloseByBackdrop() && event.data.dialog.close();
   //          });

		   // param.width == null ? $(list).closest(".modal-content").css("width",that.option.width) : $(list).closest(".modal-content").css("width",param.width+"px");
		   // param.height == null ? $(list).closest(".modal-content").css("height",that.option.height) : $(list).closest(".modal-content").css("height",param.height+"px");
		   // $(list).closest(".modal-content").css("overflow-y","auto");
		   // list.data("bootstrap_dialog",obj);
		},
		_close : function(){
			var that = this;
			that.dialog.close();
		},
		_hidden : function(){
			var that = this.$target;
			that.css("display","none");
		},
		_visible : function(){
			var that = this.$target;
			that.css("display","block");
		}
	};
	$.extend(true, Build.prototype, {
		contructor : Build
	}, $.fn[plugin].methods);

})(window.jQuery || window.Zepto, window, document);




















