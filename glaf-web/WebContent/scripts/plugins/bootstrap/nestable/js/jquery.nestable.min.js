(function($, window, document, undefined) {
	var plugin = "nestable", 
	optionKey = plugin + ".options",
	hasTouch = 'ontouchstart' in document,hasPointerEvents = (function()
    {
        var el    = document.createElement('div'),
            docEl = document.documentElement;
        if (!('pointerEvents' in el.style)) {
            return false;
        }
        el.style.pointerEvents = 'auto';
        el.style.pointerEvents = 'x';
        docEl.appendChild(el);
        var supports = window.getComputedStyle && window.getComputedStyle(el, '').pointerEvents === 'auto';
        docEl.removeChild(el);
        return !!supports;
    })(),
    Build = function(o) {
		this.el = $(o);
		this.w = $(document);
		this.options = this.el.data(optionKey).options;
		//注册拖入事件
		this.dragStopEvent = function(e){	
		};
		//注册拖拽开始事件
		this.dragStartEvent = function(e){	
		};
		//拖入事件获取数据id
		this.getNestData = function(){
	        	var that = this,
	        	    parentEl = this.placeEl.parent();
                var parentId = parentEl[0].parentElement.getAttribute("data-id");
                var parentTreeid = parentEl[0].parentElement.getAttribute("tree-id");
	            var el = this.dragEl.children(this.options.itemNodeName).first(); 
                var nest_data = [],
                    data = el.attr("about");
                var arr = data.split(","),
                    param = {};
                var pidKey = that.options.simpleData.pidKey,
                    treeid = that.options.simpleData.idKey,
                    indexkey = that.options.simpleData.indexKey,
                    about = false;
                for(var i = 0;i<arr.length-1;i++){
                	var s = arr[i].split(":");
                	param[s[0]] = s[1];
                }       
                if(parentEl[0].parentElement.getAttribute("normal")=="true"){
                	param[pidKey] = $("#"+parentEl[0].parentElement.getAttribute("id")+"_t").val();   
                }
                else{
                	if(parentId == null){
                		param[pidKey] = -1;
                		param[treeid] = param[indexkey]+"|";
                	}
                	else{
                		param[pidKey] = parentId;
                		param[treeid] = parentTreeid+"|"+param[indexkey]+"|";
                	}
                	   
                }
                nest_data.push(param);              
                if(el.attr("element") == parentEl[0].parentElement.getAttribute("id") && that.options.normal){
                	 nest_data = [];
                }
                return nest_data;
	     };
	     //刷新
	     this.refresh = function(){
	    	 var list = this;
			 var $this = this.el;
			 list.nestDataSource($this,list.options);
	     };	    
		this.init($(this),o.staticData);
		
	};
	$.fn[plugin] = function(options, param) {
		if (typeof options == 'string' && (options in $.fn[plugin].methods)) {
			var p = this.data(plugin);
			if (!plugin) {
				this.data("nestable", new Plugin(this, params));
				this.data("nestable-id", new Date().getTime());
            } 
			return p ? p[options].apply(p, Array.prototype.slice.call(
					arguments, 1)) : $.fn[plugin].methods[options](this, param);
		}
		options = options || {};
		return this.each(function(i, o) {
			var state = $.data(o, optionKey);
			if (state) {
				$.extend(true, state.options, options);
			} else {
				$.data(o, optionKey, {
					options : $
							.extend(true, {}, $.fn[plugin].defaults, options),
					datas : param
				});
			}
			o.staticData = options.datas;
			$.data(o, plugin, new Build(o));
		});
	};

	$.fn[plugin].defaults = {
			
	};

	$.fn[plugin].methods = {			
	    //数据源（树）
		nestDataSource : function($this,option){
			var that = this;
			$.ajax({
				 url: option.tree.read.url,	
	    		 type: option.tree.read.type,
	    		 data: option.tree.read.data,			
	    		 dataType: option.tree.read.dataType,
	    		 success : function(r){	    			 
	    			 var parent_id = option.simpleData.pidKey;
	    			 var index_name = option.simpleData.nameKey;
	    			 var tree_id = option.simpleData.idKey;
	    			 var index_id = option.simpleData.indexKey;
	    			 $("#"+$this.attr("id")).empty(); 
	    			 //树
	    			 if(!option.normal){ 
	    		     
	    			 var o = '<ol class="dd-list"  element="'+$this.attr("id")+'" normal="false">';
	    			 $.each(r, function(i, v){
	    				  var abortParam = "";
	    				 $.each(eval(option.dataAbort),function(y,t){
	    					 abortParam += t.columnName+":"+v[t.columnName]+",";
	    				 });
	    				 o = o + '<li class="dd-item" element="'+$this.attr("id")+'"  data-id="'
							+ v[index_id]
							+ '" itemClick="0" normal="false" tree-id="'+v[tree_id]+'"   drop="true" about="'+abortParam+'">';
						o = o + '<button data-action="collapse" type="button" style="display: none;">Collapse</button><button data-action="expand" type="button" style="display: block;">Expand</button><div class="dd-handle" style="cursor:move">'
							+ v[index_name]
							+ '<div class="static-handler" style="float:right"><input type="checkbox" /></div></div></li>';
	    				  });	    			 
	    			 o = o + '</ol>';
	    			 $("#"+$this.attr("id")).append(o);
	    			 }
	    			 //表
	    			 else{
	    				 var text = '<input type="hidden" id="'+$this.attr("id")+'_t" />';
		    		     $("#"+$this.attr("id")).append(text);
		    			 var o = '<ol class="dd-list" element="'+$this.attr("id")+'"  normal="true">';		 
		    			 $.each(r, function(i, v){
		    				 $("#"+$this.attr("id")+"_t").val(v[parent_id]);
		    				 var abortParam = "";
		    				 $.each(eval(option.dataAbort),function(y,t){
		    					 abortParam += t.columnName+":"+v[t.columnName]+",";
		    				 });
								o = o + '<li class="dd-item" element="'+$this.attr("id")+'" tree-id="'+v[tree_id]+'"  data-id="' + v[index_id] + ' " itemClick="0" normal="true"  about="'+abortParam+'"><button data-action="collapse" type="button" style="display: none;">Collapse</button><button data-action="expand" type="button" style="display: block;">Expand</button><div class="dd-handle" style="cursor:move"> ' + v[index_name]
								+ '<div class="static-handler" style="float:right"><input class="cbox" type="checkbox" /></div></div></li>';
		    				 var id = v[index_id];
		    			 });	    			 
		    			 o = o + '</ol>';
		    			 $("#"+$this.attr("id")).append(o);
		    			}
	    		 }
			});
		},
		//查询数据
		getParams: function(params) {
			var that = this,
				data = that.options.ajax.read.d_data__ = (that.options.ajax.read.__data__ ? $.extend({}, that.options.ajax.read.__data__) : undefined); //取动态参数
			var ret = $.extend({}, data || this.options.ajax.read.data);
			if (params && data) { //如果不是第一次查询

				if (!data.params) {
					data.params = {};
				} else {
					data.params = JSON.parse(data.params);
				}

				for (var key in params) {
					if (!(key in data)) {
						data.params[key] = params[key]; //保存要保留参数					
					} else {
						ret[key] = params[key]; //装载变化参数
					}
				}

				data.params = JSON.stringify(data.params);
				ret.params = data.params; //更新要保留参数
			}else if(!params && that.isPageParams){
				ret = $.extend({}, JSON.parse(this.options.ajax.read.data));
			}
			return ret;
		},
		_isGetParam : function(option){
			if(option.data!=null){
				return option.data
			}
			else{
				return null;
			}
		},
		saveStaticData : function(datas){		 
			 var $this = this.el,
			     content = $this.find(".dd-item"),
			     parent_id = this.options.simpleData.pidKey,
			     index_name = this.options.simpleData.nameKey,
			     tree_id = this.options.simpleData.idKey,
			     index_id = this.options.simpleData.indexKey;
			 $.each(content,function(index,element){
				 var el = $(element).find(".static-handler").find("input");
				 if($(el).is(":checked")){
				 var o = '<ol class="dd-list" element="'+$this.attr("id")+'"  normal="false">';
				   $.each(datas, function(i, v){				
					 o = o + '<li class="dd-item" element="'+$this.attr("id")+'"  data-id="'
						+ v[index_id]
						+ '" itemClick="0" normal="false"  drop="true" tree-id="'+v[tree_id]+'"><button data-action="collapse" type="button" style="display: none;">Collapse</button><button data-action="expand" type="button" style="display: block;">Expand</button><div class="dd-handle" style="cursor:move">'
						+ v[index_name]
						+ '</div></li>';
					  });	    			 
				    o = o + '</ol>';
				    $(element).append(o);
				 }
		     });
		},
		_findNestDataById : function($this,option,param){		
			$.ajax({
				 url: option.tree._findByParam.url,	
	    		 type: option.tree._findByParam.type,
	    		 data:  JSON.stringify({
	    				rid : option.tree._findByParam.data.rid,
	    				params : JSON.stringify(param),
	    		 }),			
	    		 contentType : option.tree._findByParam.contentType,
	    		 dataType: option.tree._findByParam.dataType,
	    		 
	    		 success : function(r){
	    			 return {
	    				 data : r
	    			 }
	    		 }
			});
		},
		//数据源（树）添加
		elementAdd : function($this,option,item){
			$.ajax({
				 url: option.tree.read.url,	
	    		 type: option.tree.read.type,
	    		 data:  {
	    				rid:option.tree.read.data.rid,
	    				params:option.tree.read.data.param,
	    				pid:item.attr("data-id"),
	    			},			
	    		 dataType: option.tree.read.dataType,
	    		 success : function(r){
	    			 var parent_id = option.simpleData.pidKey;
	    			 var index_name = option.simpleData.nameKey;
	    			 var index_id = option.simpleData.indexKey;
	    			 var tree_id = option.simpleData.idKey;
	    			 
	    			 //树     
	    			 var o = '<ol class="dd-list" element="'+$this.attr("id")+'"  normal="false">';
	    			 $.each(r, function(i, v){
	    				 var abortParam = "";
	    				 $.each(eval(option.dataAbort),function(y,t){
	    					 abortParam += t.columnName+":"+v[t.columnName]+",";
	    				 });
	    				 o = o + '<li class="dd-item" element="'+$this.attr("id")+'"  data-id="'
							+ v[index_id]
							+ '" itemClick="0" normal="false"  drop="true" tree-id="'+v[tree_id]+'" about="'+abortParam+'"><button data-action="collapse" type="button" style="display: none;">Collapse</button><button data-action="expand" type="button" style="display: block;">Expand</button><div class="dd-handle" style="cursor:move">'
							+ v[index_name]
							+ '</div></li>';
	    				  });	    			 
	    			 o = o + '</ol>';
	    			 item.append(o);
	    			 
	    			 
	    		 }
			});
		},			
		editNest : function(item){
			var that = this;
			that.renameSourceData(that.options,item)
		},
		deleteNest : function(item){
			var that = this;
			if(confirm("是否删除数据")){
				that.deleteSource(that.options,item);
			}
		},
		deleteNormal : function(){
			var that = this;
			if(confirm("是否删除数据")){
				that.deleteNormalSource(that.options,that.el);
			}
		},
		
		_getStaticParam : function($this,data,parentid,treeid){
			  var that = this;		  
			  var o = '<ol class="dd-list"  element="'+$this.attr("id")+'" normal="false">';
			  $.each(data,function(i,v){
				    if(v.parentId == undefined || v.parentId == ""){
				    	v.parentId = -1;
				    }
				    if(v.parentId == parentid){
				       if(v.parentId == -1){
				    	   v.treeid = v.id+"|";
				    	   treeid = v.treeid;
				       }
				       else{
				    	   v.treeid = treeid + v.id + "|";
				       }
				    o = o + '<li class="dd-item" element="'+$this.attr("id")+'"  data-id="'
					+ v["id"]
					+ '" itemClick="0" normal="false" tree-id="'+v["treeid"]+'"   drop="true"><button data-action="collapse" type="button" style="display: none;">Collapse</button><button data-action="expand" type="button" style="display: block;">Expand</button><div class="dd-handle" style="cursor:move">'
					+ v["name"]
					+ '</div>';
					var item = that._getStaticParam($this,data,v.id,treeid);
					o = o+item+'</li>';
					}    
			   });
			  o = o + '</ol>';
			  return o;
	
		},
		_nestStaticData : function($this,data,parentid){
			var that = this;
			var o = "";
			
			if(parentid == -1){
			    o = that._getStaticParam($this,data,parentid,null)
			}
			$("#"+$this.attr("id")).append(o);
		},
		init : function($target,option){
			var list = this;
			var $this = this.el;
		    option != null ? list._nestStaticData($this,eval(option),-1) : list.nestDataSource($this,list.options);		
		    list.reset();
            list.el.data('nestable-group', this.options.group);
            list.placeEl = $('<div class="' + list.options.placeClass + '"/>');
            $.each(this.el.find(list.options.itemNodeName), function(k, el) {
                list.setParent($(el));
            });

            list.el.on('click', 'button', function(e) {
            	if (list.dragEl) {
                    return;
                }
                var target = $(e.currentTarget),
                    action = target.data('action'),
                    item   = target.parent(list.options.itemNodeName);
                if (action === 'collapse') {
                	list.collapseItem(item);
                }
                if (action === 'expand') {
                	if(item.attr("itemClick") == "0"){
                		
                		list.options.normal ? null : list.elementAdd($this,list.options,item);
                	    item.attr("itemClick","1");
                	}
                    list.expandItem(item);
                }
            });
                       
            list.el.on('click', 'a', function(e) {
            	if (list.dragEl) {
                    return;
                }
                var target = $(e.currentTarget),
                    action = target.data('action'),
                    item   = target.parent(list.options.itemNodeName);
                if (action === 'editNest') {
                	list.editNest(item);
                }
                if (action === 'deleteNest') {
                	list.deleteNest(item);
                }
                if (action === 'editNormal') {
                	list.editNest(item);
                }
                if (action === 'deleteNormal') {
                	list.deleteNormal(item);
                }
            });
            var onStartEvent = function(e)
            {
                var handle = $(e.target);
                if (!handle.hasClass(list.options.handleClass)) {
                    if (handle.closest('.' + list.options.noDragClass).length) {
                        return;
                    }
                    handle = handle.closest('.' + list.options.handleClass);
                }

                if (!handle.length || list.dragEl) {
                    return;
                }

                list.isTouch = /^touch/.test(e.type);
                if (list.isTouch && e.touches.length !== 1) {
                    return;
                }

                e.preventDefault();
                list.dragStart(e.touches ? e.touches[0] : e);
            };

            var onMoveEvent = function(e)
            {
                if (list.dragEl) {
                    e.preventDefault();
                    list.dragMove(e.touches ? e.touches[0] : e);
                }
            };

            var onEndEvent = function(e)
            {
                if (list.dragEl) {
                    e.preventDefault();
                   
                    list.dragStop(e.touches ? e.touches[0] : e);
                    
                }
            };
            var mouseDownAndUpTimer = null;
            var onMouseDownFlag = false;
            list.el.mousedown(function(){
                onMouseDownFlag = false;
                mouseDownAndUpTimer = setTimeout(function(){
                    // OnMouseDown Code in here
                	list.el.on('mousedown', onStartEvent);
                    onMouseDownFlag = true;
                },400);
            }).mouseup(function(){
                if(onMouseDownFlag){
                	list.w.on('mouseup', onEndEvent);     
                    // OnMouseUp Code in here
                }else{               	
                    clearTimeout(mouseDownAndUpTimer); // 清除延迟时间
                }
            });        
            
            if (hasTouch) {
                window.addEventListener('touchstart', onStartEvent, false);
                window.addEventListener('touchmove', onMoveEvent, false);
                window.addEventListener('touchend', onEndEvent, false);
                window.addEventListener('touchcancel', onEndEvent, false);
            }
                list.w.on('mousemove', onMoveEvent);
            },  
            
         hasPointerEvents : function()
		    {
		        var el    = document.createElement('div'),
		            docEl = document.documentElement;
		        if (!('pointerEvents' in el.style)) {
		            return false;
		        }
		        el.style.pointerEvents = 'auto';
		        el.style.pointerEvents = 'x';
		        docEl.appendChild(el);
		        var supports = window.getComputedStyle && window.getComputedStyle(el, '').pointerEvents === 'auto';
		        docEl.removeChild(el);
		        return !!supports;
		  }(),
		  
		  serialize: function()
	        {
	            var data,
	                depth = 0,
	                list  = this;
	                step  = function(level, depth)
	                {
	                    var array = [ ],
	                        items = level.children(list.options.itemNodeName);
	                    items.each(function()
	                    {
	                        var li   = $(this),
	                            item = $.extend({}, li.data()),
	                            sub  = li.children(list.options.listNodeName);
	                        if (sub.length) {
	                            item.children = step(sub, depth + 1);
	                        }
	                        array.push(item);
	                    });
	                    return array;
	                };
	            data = step(list.el.find(list.options.listNodeName).first(), depth);
	            return data;
	        },

	        serialise: function()
	        {
	            return this.serialize();
	        },

	        reset: function()
	        {
	            this.mouse = {
	                offsetX   : 0,
	                offsetY   : 0,
	                startX    : 0,
	                startY    : 0,
	                lastX     : 0,
	                lastY     : 0,
	                nowX      : 0,
	                nowY      : 0,
	                distX     : 0,
	                distY     : 0,
	                dirAx     : 0,
	                dirX      : 0,
	                dirY      : 0,
	                lastDirX  : 0,
	                lastDirY  : 0,
	                distAxX   : 0,
	                distAxY   : 0
	            };
	            this.isTouch    = false;
	            this.moving     = false;
	            this.dragEl     = null;
	            this.dragRootEl = null;
	            this.dragDepth  = 0;
	            this.hasNewRoot = false;
	            this.pointEl    = null;
	        },

	        expandItem: function(li)
	        {
	            li.removeClass(this.options.collapsedClass);
	            li.children('[data-action="expand"]').hide();
	            li.children('[data-action="collapse"]').show();
	            li.children(this.options.listNodeName).show();
	        },

	        collapseItem: function(li)
	        {
	            var lists = li.children(this.options.listNodeName);
	            if (lists.length) {
	                li.addClass(this.options.collapsedClass);
	                li.children('[data-action="collapse"]').hide();
	                li.children('[data-action="expand"]').show();
	                li.children(this.options.listNodeName).hide();
	            }
	        },

	        expandAll: function()
	        {
	            var list = this;
	            list.el.find(list.options.itemNodeName).each(function() {
	                list.expandItem($(this));
	            });
	        },

	        collapseAll: function()
	        {
	            var list = this;
	            list.el.find(list.options.itemNodeName).each(function() {
	                list.collapseItem($(this));
	            });
	        },

	        setParent: function(li)
	        {
	            /*if (li.children(this.options.listNodeName).length) {
	                li.prepend($(this.options.expandBtnHTML));
	                li.prepend($(this.options.collapseBtnHTML));
	            }*/
	        	li.children('[data-action="collapse"]').show();
	            li.children('[data-action="expand"]').hide();
	        },

	        unsetParent: function(li)
	        {
	            /*li.removeClass(this.options.collapsedClass);*/
	            /*li.children('[data-action]').remove();*/
	            /*li.children(this.options.listNodeName).remove();*/
	        },

	        dragStart: function(e)
	        {
	        	
	            var mouse    = this.mouse,
	                target   = $(e.target),
	                dragItem = target.closest(this.options.itemNodeName),
	                that = this;

	            this.placeEl.css('height', dragItem.height());

	            mouse.offsetX = e.offsetX !== undefined ? e.offsetX : e.pageX - target.offset().left;
	            mouse.offsetY = e.offsetY !== undefined ? e.offsetY : e.pageY - target.offset().top;
	            mouse.startX = mouse.lastX = e.pageX;
	            mouse.startY = mouse.lastY = e.pageY;

	            this.dragRootEl = this.el;

	            this.dragEl = $(document.createElement(this.options.listNodeName)).addClass(this.options.listClass + ' ' + this.options.dragClass);
	            this.dragEl.css('width', dragItem.width());

	            dragItem.after(this.placeEl);
	            dragItem[0].parentNode.removeChild(dragItem[0]);
	            dragItem.appendTo(this.dragEl);

	            $(document.body).append(this.dragEl);
	            this.dragEl.css({
	                'left' : e.pageX - mouse.offsetX,
	                'top'  : e.pageY - mouse.offsetY
	            });
	            // total depth of dragging item
	            var i, depth,
	                items = this.dragEl.find(this.options.itemNodeName);
	            for (i = 0; i < items.length; i++) {
	                depth = $(items[i]).parents(this.options.listNodeName).length;
	                if (depth > this.dragDepth) {
	                    this.dragDepth = depth;
	                }
	            }
	            that.dragStartEvent(e);
	        },

	        dragStop: function(e)
	        {
	        	var that = this;
	        	that.dragStopEvent(e);
	            var el = this.dragEl.children(this.options.itemNodeName).first(); 
	            var parentEl = this.placeEl.parent();
                that.placeEl.replaceWith(el);      
            	that.dragEl.remove();
            	that.el.trigger('change');   	           
	            that.hasNewRoo ? that.dragRootEl.trigger('change') : null;   	            
	            that.reset();     
	        },
	       
	        dragMove: function(e)
	        {
	            var list, parent, prev, next, depth,
	                opt   = this.options,
	                mouse = this.mouse;

	            this.dragEl.css({
	                'left' : e.pageX - mouse.offsetX,
	                'top'  : e.pageY - mouse.offsetY
	            });

	            // mouse position last events
	            mouse.lastX = mouse.nowX;
	            mouse.lastY = mouse.nowY;
	            // mouse position this events
	            mouse.nowX  = e.pageX;
	            mouse.nowY  = e.pageY;
	            // distance mouse moved between events
	            mouse.distX = mouse.nowX - mouse.lastX;
	            mouse.distY = mouse.nowY - mouse.lastY;
	            // direction mouse was moving
	            mouse.lastDirX = mouse.dirX;
	            mouse.lastDirY = mouse.dirY;
	            // direction mouse is now moving (on both axis)
	            mouse.dirX = mouse.distX === 0 ? 0 : mouse.distX > 0 ? 1 : -1;
	            mouse.dirY = mouse.distY === 0 ? 0 : mouse.distY > 0 ? 1 : -1;
	            // axis mouse is now moving on
	            var newAx   = Math.abs(mouse.distX) > Math.abs(mouse.distY) ? 1 : 0;

	            // do nothing on first move
	            if (!mouse.moving) {
	                mouse.dirAx  = newAx;
	                mouse.moving = true;
	                return;
	            }

	            // calc distance moved on this axis (and direction)
	            if (mouse.dirAx !== newAx) {
	                mouse.distAxX = 0;
	                mouse.distAxY = 0;
	            } else {
	                mouse.distAxX += Math.abs(mouse.distX);
	                if (mouse.dirX !== 0 && mouse.dirX !== mouse.lastDirX) {
	                    mouse.distAxX = 0;
	                }
	                mouse.distAxY += Math.abs(mouse.distY);
	                if (mouse.dirY !== 0 && mouse.dirY !== mouse.lastDirY) {
	                    mouse.distAxY = 0;
	                }
	            }
	            mouse.dirAx = newAx;

	            /**
	             * move horizontal
	             */
	            if (mouse.dirAx && mouse.distAxX >= opt.threshold) {
	                // reset move distance on x-axis for new phase
	                mouse.distAxX = 0;
	                prev = this.placeEl.prev(opt.itemNodeName);
	                // increase horizontal level if previous sibling exists and is not collapsed
	                if (mouse.distX > 0 && prev.length && !prev.hasClass(opt.collapsedClass)) {
	                    // cannot increase level when item above is collapsed
	                    list = prev.find(opt.listNodeName).last();
	                    // check if depth limit has reached
	                    depth = this.placeEl.parents(opt.listNodeName).length;
	                    if (depth + this.dragDepth <= opt.maxDepth) {
	                        // create new sub-level if one doesn't exist
	                        if (!list.length) {
	                            list = $('<' + opt.listNodeName + '/>').addClass(opt.listClass);
	                            list.append(this.placeEl);
	                            prev.append(list);
	                            this.setParent(prev);
	                        } else {
	                            // else append to next level up
	                            list = prev.children(opt.listNodeName).last();
	                            list.append(this.placeEl);
	                        }
	                    }
	                }
	                // decrease horizontal level
	                if (mouse.distX < 0) {
	                    // we can't decrease a level if an item preceeds the current one
	                    next = this.placeEl.next(opt.itemNodeName);
	                    if (!next.length) {
	                        parent = this.placeEl.parent();
	                        this.placeEl.closest(opt.itemNodeName).after(this.placeEl);
	                        if (!parent.children().length) {
	                            this.unsetParent(parent.parent());
	                        }
	                    }
	                }
	            }

	            var isEmpty = false;

	            // find list item under cursor
	            if (!hasPointerEvents) {
	                this.dragEl[0].style.visibility = 'hidden';
	            }
	            this.pointEl = $(document.elementFromPoint(e.pageX - document.body.scrollLeft, e.pageY - (window.pageYOffset || document.documentElement.scrollTop)));
	            if (!hasPointerEvents) {
	                this.dragEl[0].style.visibility = 'visible';
	            }
	            if (this.pointEl.hasClass(opt.handleClass)) {
	                this.pointEl = this.pointEl.parent(opt.itemNodeName);
	            }
	            if (this.pointEl.hasClass(opt.emptyClass)) {
	                isEmpty = true;
	            }
	            else if (!this.pointEl.length || !this.pointEl.hasClass(opt.itemClass)) {
	                return;
	            }

	            // find parent list of item under cursor
	            var pointElRoot = this.pointEl.closest('.' + opt.rootClass),
	                isNewRoot   = this.dragRootEl.data('nestable-id') !== pointElRoot.data('nestable-id');

	            /**
	             * move vertical
	             */
	            if (!mouse.dirAx || isNewRoot || isEmpty) {
	                // check if groups match if dragging over new root
	                if (isNewRoot && opt.group !== pointElRoot.data('nestable-group')) {
	                    return;
	                }
	                // check depth limit
	                depth = this.dragDepth - 1 + this.pointEl.parents(opt.listNodeName).length;
	                if (depth > opt.maxDepth) {
	                    return;
	                }
	                var before = e.pageY < (this.pointEl.offset().top + this.pointEl.height() / 2);
	                    parent = this.placeEl.parent();
	                // if empty create new list to replace empty placeholder
	                if (isEmpty) {
	                    list = $(document.createElement(opt.listNodeName)).addClass(opt.listClass);
	                    list.append(this.placeEl);
	                    this.pointEl.replaceWith(list);
	                }
	                else if (before) {
	                    this.pointEl.before(this.placeEl);
	                }
	                else {
	                    this.pointEl.after(this.placeEl);
	                }
	                if (!parent.children().length) {
	                    this.unsetParent(parent.parent());
	                }
	                if (!this.dragRootEl.find(opt.itemNodeName).length) {
	                	      this.dragRootEl.empty();
	                		  this.dragRootEl.append('<div class="' + opt.emptyClass + '"/>');  
	                  }
	                // parent root list has changed
	                if (isNewRoot) {
	                    this.dragRootEl = pointElRoot;
	                    this.hasNewRoot = this.el[0] !== this.dragRootEl[0];
	                }
	            }
	        }
	};
	$.extend(true, Build.prototype, {
		contructor : Build
	}, $.fn[plugin].methods);

})(window.jQuery || window.Zepto, window, document);




















