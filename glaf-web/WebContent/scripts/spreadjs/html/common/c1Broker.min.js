var LicenseStatus = function () {
	function n() {}

	return n.Valid = 0,
	n.Expired = 1,
	n.Unlicensed = 2,
	n.Trial = 3,
	n
}
(), app = function (n) {
	function e(n, t) {
		return t === undefined ? tt(n) : (b(n, t), app)
	}
	function tt(i) {
		var e,
		o,
		u,
		r,
		f;
		for (t === undefined && (n ? (e = n.getConfig(), t = e ? JSON.parse(e) : {}) : t = {}), o = i.split("."), u = t, r = 0; r < o.length; r++) {
			f = u[o[r]];
			if (f === undefined)
				return undefined;
			u = f
		}
		return u
	}
	function b(i, r) {
		var s,
		u,
		e,
		f,
		o;
		for (t === undefined && (n ? (s = n.getConfig(), t = s ? JSON.parse(s) : {}) : t = {}), u = i.split("."), e = t, f = 0; f < u.length - 1; f++)
			o = e[u[f]], o === undefined && (e[u[f]] = o = {}), e = o;
		e[u[u.length - 1]] = r
	}
	var t,
	r,
	i,
	u;
	$(window).unload(function () {
		n && t && n.setConfig(JSON.stringify(t))
	});
	if (n) {
		GcSpread.Sheets.util.browser.qtMode = !0,
		n.excelOperationCompleted.connect(p),
		n.excelOperationExceptionCatched.connect(w),
		r = [];
		function f(n) {
			return r.push(n),
			r.length - 1
		}
		function k(n, t) {
			var u = parseInt(n),
			i;
			console.log(t.data),
			i = r[u],
			i ? i(t) : GcSpread.Sheets.designer.util.warn(GcSpread.Sheets.designer.util.format("callback (id='{0}') cannot be found.", u))
		}
		function p(n, t) {
			var i = JSON.parse(t);
			k(n, i)
		}
		function w() {
			GcSpread.Sheets.designer.MessageBox.show("Sorry, this file is not supported.", "Exception", 3),
			$(".loading-placeholder").addClass("hidden")
		}
		function d(t, i) {
			var r = n.showSaveDialog(JSON.stringify(t));
			i(JSON.parse(r))
		}
		function a(t, i) {
			var r = n.showOpenDialog(JSON.stringify(t));
			i(JSON.parse(r))
		}
		function it(t) {
			n.getBase64(t)
		}
		function g(t, i, r, u) {
			var f = n.save(t, i, u);
			r(JSON.parse(f))
		}
		function nt(t, i) {
			var r = n.open(t);
			i(JSON.parse(r))
		}
		function h(t, i) {
			var r = n.openTemplate(t);
			i(JSON.parse(r))
		}
		function c(t, i, r) {
			var u = f(r);
			n.exportFile(t, i, u)
		}
		function o(t, i, r) {
			var u = f(r),
			e = t.substring(t.lastIndexOf(".") + 1);
			switch (e.toLowerCase()) {
			case "xls":
			case "xlsx":
				n.importExcel(t, i, u);
				break;
			case "csv":
				n.importCsv(t, i, u);
				break
			}
		}
		function s(t, i) {
			var r = n.openUrl(t);
			i(r)
		}
		function v() {
			n.exit()
		}
		function y() {
			return n.getClipboardText()
		}
		function l(t) {
			n.setClipboardText(t)
		}
		return {
			isNative : !0,
			getLicenseStatus : function () {
				return n.getLicenseStatus()
			},
			getTrialDaysLeft : function () {
				return n.getTrialDaysLeft()
			},
			active : function () {
				return n.active()
			},
			config : e,
			showSaveDialog : d,
			showOpenDialog : a,
			getBase64 : function (t) {
				return n.getBase64(t)
			},
			save : g,
			open : nt,
			openTemplate : h,
			exportFile : c,
			importFile : o,
			notify : n.notify,
			openUrl : s,
			exit : v,
			getClipboardText : y,
			setClipboardText : l,
			notifyReady : function () {
				return n.notifyReady()
			},
			closeAllWindows : function () {
				return n.closeAllWindows()
			}
		}
	} else
		return i = {
			status : "failed",
			message : "not implemented."
		},
	u = {
		status : "cancelled",
		message : "not implemented."
	}, {
		isNative : !1,
		getLicenseStatus : function () {
			return LicenseStatus.Unlicensed
		},
		getTrialDaysLeft : function () {
			return -1
		},
		active : function () {
			return -1
		},
		config : e,
		showSaveDialog : function (n, t) {
			t(u)
		},
		showOpenDialog : function (n, t) {
			t(u)
		},
		save : function (n, t, r) {
			r(i)
		},
		open : function (n, t) {
			t(i)
		},
		openTemplate : function (n, t) {
			t(i)
		},
		exportFile : function (n, t, r) {
			r(i)
		},
		importFile : function (n, t, r) {
			r(i)
		},
		getBase64 : function (n) {
			return ""
		},
		notify : function () {
			return ""
		},
		openUrl : function () {
			return !1
		},
		exit : function () {},
		getClipboardText : function () {
			return ""
		},
		setClipboardText : function (n) {},
		notifyReady : function () {},
		closeAllWindows : function () {}

	}
}
(window.app)
