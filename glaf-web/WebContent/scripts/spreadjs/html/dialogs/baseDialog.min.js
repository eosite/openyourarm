var GcSpread;
(function (n) {
	(function (n) {
		(function (n) {
			var i = function () {
				function t() {
					this.res = n.res
				}
				return t.Instance = new t,
				t
			}
			(),
			t = function () {
				function t(n, t, i) {
					this._options = i;
					if (this._options.autoOpen)
						throw "AutoOpen is not support.";
					this.updateOptions(),
					this._element = $("<div></div>"),
					n !== undefined ? this._element.load(n + " " + t, this.onLoad.bind(this)) : this._isReady = !0
				}
				return t.prototype.open = function () {
					for (var t = [], n = 0; n < arguments.length - 0; n++)
						t[n] = arguments[n + 0];
					if (this._isShown)
						return;
					this._openArgs = t,
					this._isShown = !0,
					this._isReady && this.openReally()
				},
				t.prototype.close = function () {
					if (!this._isShown)
						return;
					this._isShown = !1,
					this._isReady && this._element.dialog("close")
				},
				t.prototype.destroy = function () {
					this._isReady && this._element.dialog("destroy")
				},
				t.prototype._beforeOpen = function (n) {},
				t.prototype._afterClose = function () {},
				t.prototype._createViewModel = function () {
					return i.Instance
				},
				t.prototype._init = function () {},
				t.prototype.openReally = function () {
					this._isInited || this.onInit(),
					this._beforeOpen.call(this, this._openArgs),
					this._element.dialog("open")
				},
				t.prototype.onLoad = function () {
					this._isReady = !0,
					this._isShown && this.openReally()
				},
				t.prototype.onInit = function () {
					var n = this;
					this._isInited = !0,
					this._viewModel = this._createViewModel(),
					this._element.dialog(this._options),
					this._init(),
					this._viewModel !== undefined && ko.applyBindings(n._viewModel, n._element[0]);
					this._element.parent().on("keypress", function (t) {
						if (t.keyCode === 13) {
							var i = n._element.parent().find("button[dialogToBeFocused='true']");
							n._options.buttons && n._options.buttons[0] && n._options.buttons[0].click && !i.is(":focus") && n._options.buttons[0].click.call(n)
						}
					});
					this._element.dialog({
						open : function () {
							n._element.parent().trigger("mousedown"),
							n._element.parent().find("button[dialogToBeFocused='true']").focus()
						}
					})
				},
				t.prototype.onClose = function (n, t) {
					this._isShown = !1,
					this._closeCallback !== undefined && this._closeCallback.call(this._element, n, t),
					this._afterClose()
				},
				t.prototype.updateOptions = function () {
					this._options.autoOpen = !1,
					this._options.closeText = n.res.close,
					this._options.resizable = !1,
					this._closeCallback = this._options.close,
					this._options.close = this.onClose.bind(this),
					this._options.buttons && this._options.buttons[0] && (this._options.buttons[0].dialogToBeFocused = "true")
				},
				t.prototype.getActiveSelection = function (n) {
					return n.getSelections()[0]
				},
				t.prototype._unparse = function (t, i, r, u) {
					return this._calcService || (this._calcService = n.wrapper.spread.calcService),
					this._calcService.unparse(t, i, r, u)
				},
				t.prototype._parse = function (t, i, r, u, f, e) {
					return this._calcService || (this._calcService = n.wrapper.spread.calcService),
					this._calcService.parse(t, i, r, u, f, e)
				},
				t
			}
			();
			n.BaseDialog = t
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.Sheets || (n.Sheets = {}));
	var t = n.Sheets
})(GcSpread || (GcSpread = {}))
