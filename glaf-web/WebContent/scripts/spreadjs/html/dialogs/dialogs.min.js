var __extends = this.__extends || function (n, t) {
	function r() {
		this.constructor = n
	}
	for (var i in t)
		t.hasOwnProperty(i) && (n[i] = t[i]);
	r.prototype = t.prototype,
	n.prototype = new r
}, GcSpread;
(function (n) {
	(function (n) {
		(function (t) {
			var w,
			pt,
			dt,
			u,
			ot,
			et,
			ht,
			st,
			rt,
			it,
			ft,
			ut,
			vt,
			i,
			e,
			yt,
			lt,
			s,
			k,
			at,
			ct,
			l,
			y,
			v,
			h,
			kt,
			a,
			p,
			g,
			nt,
			tt,
			d,
			bt,
			wt,
			o,
			c,
			r,
			b,
			f;
			(function (n) {
				n[n.none = 0] = "none",
				n[n.info = 1] = "info",
				n[n.warning = 2] = "warning",
				n[n.error = 3] = "error",
				n[n.question = 4] = "question"
			})(t.MessageBoxIcon || (t.MessageBoxIcon = {})),
			w = t.MessageBoxIcon,
			function (n) {
				n[n.ok = 0] = "ok",
				n[n.okCancel = 1] = "okCancel",
				n[n.yesNoCancel = 2] = "yesNoCancel"
			}
			(t.MessageBoxButtons || (t.MessageBoxButtons = {})),
			pt = t.MessageBoxButtons,
			function (n) {
				n[n.none = 0] = "none",
				n[n.ok = 1] = "ok",
				n[n.yes = 2] = "yes",
				n[n.no = 3] = "no",
				n[n.cancel = 4] = "cancel"
			}
			(t.MessageBoxResult || (t.MessageBoxResult = {})),
			dt = t.MessageBoxResult,
			u = function () {
				function n() {}

				return n._button = function (t, i, r) {
					return {
						text : t,
						click : function (t) {
							n._element.dialog("close", t),
							n._closeByButton = !0,
							r !== undefined && r(t, i)
						}
					}
				},
				n.show = function (i, r, u, f, e) {
					var l,
					o,
					a,
					c,
					s,
					h;
					for (u === undefined && (u = 0), f === undefined && (f = 0), l = i.split("\n"), n._element === undefined ? (n._element = $("<div></div>").addClass("message-box"), $("<span></span>").addClass("message-box-icon").appendTo(n._element), $("<div></div>").addClass("message-box-text-container").appendTo(n._element), $("<div></div>").addClass("clear-float").appendTo(n._element), n._element.dialog({
								modal : !0,
								autoSize : !0,
								autoOpen : !1,
								resizable : !1,
								width : "auto",
								close : function (t) {
									!n._closeByButton && e && e(t, 0),
									n._closeByButton = !1
								}
							})) : (n._element.dialog("destroy"), n._element.dialog({
								modal : !0,
								autoSize : !0,
								autoOpen : !1,
								resizable : !1,
								width : "auto",
								close : function (t) {
									!n._closeByButton && e && e(t, 0),
									n._closeByButton = !1
								}
							})), o = n._element, a = o.find(".message-box-icon"), a.attr("class", "message-box-icon"), a.addClass("message-box-icon-" + w[u]), c = o.find(".message-box-text-container"), c.empty(), s = 0; s < l.length; s++)
						h = $("<span></span>").addClass("message-box-text"), h.text(l[s]), h.appendTo(c);
					o.dialog("option", "title", r);
					var y = n._button(t.res.ok, 1, e),
					v = n._button(t.res.cancel, 4, e),
					b = n._button(t.res.yes, 2, e),
					p = n._button(t.res.no, 3, e);
					switch (f) {
					case 0:
						o.dialog("option", "buttons", [y]);
						break;
					case 1:
						o.dialog("option", "buttons", [y, v]);
						break;
					case 2:
						o.dialog("option", "buttons", [b, p, v]);
						break
					}
					o.dialog("open"),
					setTimeout(function () {
						return o.parent().find(".ui-dialog-titlebar").trigger("mousedown")
					}, 100)
				},
				n
			}
			(),
			t.MessageBox = u,
			ot = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						modal : !0,
						title : t.res.rowHeightDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("[name=row-height]").val(),
									f,
									r;
									n.match(/^[0-9\.]*$/) ? (f = i._validateValue(n), f && (r = parseInt(n), t.actions.doAction("setRowsHeight", t.wrapper.spread, r), i.close(), t.wrapper.setFocusToSpread())) : u.show(t.res.rowHeightDialog.exception, t.res.title, 2)
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".row-height-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					var n = t.wrapper.spread.getActiveSheet(),
					i = n.getRowHeight(n.getActiveRowIndex());
					this._element.find("[name=row-height]").val(i)
				},
				i.prototype._validateValue = function (n) {
					var i = !0;
					return (parseFloat(n) > 9999999 || parseFloat(n) < 0) && (u.show(t.res.rowHeightDialog.exception2, t.res.title, 2), i = !1),
					i
				},
				i
			}
			(t.BaseDialog),
			t.RowHeightDialog = ot,
			et = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						modal : !0,
						title : t.res.columnWidthDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("[name=column-width]").val(),
									f,
									r;
									n.match(/^[0-9\.]*$/) ? (f = i._validateValue(n), f && (r = parseInt(n), t.actions.doAction("setColumnsWidth", t.wrapper.spread, r), i.close(), t.wrapper.setFocusToSpread())) : u.show(t.res.columnWidthDialog.exception, t.res.title, 2)
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".column-width-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					var n = t.wrapper.spread.getActiveSheet(),
					i = n.getColumnWidth(n.getActiveColumnIndex());
					this._element.find("[name=column-width]").val(i)
				},
				i.prototype._validateValue = function (n) {
					var i = !0;
					return (parseFloat(n) > 9999999 || parseFloat(n) < 0) && (u.show(t.res.columnWidthDialog.exception2, t.res.title, 2), i = !1),
					i
				},
				i
			}
			(t.BaseDialog),
			t.ColumnWidthDialog = et,
			ht = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						modal : !0,
						title : t.res.standardWidthDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("[name=standard-column-width]").val(),
									f,
									r;
									n.match(/^[0-9\.]*$/) ? (f = i._validateValue(n), f && (r = parseInt(n), t.actions.doAction("defaultColumnWidth", t.wrapper.spread, r), i.close(), t.wrapper.setFocusToSpread())) : u.show(t.res.standardWidthDialog.exception, t.res.title, 2)
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".standard-width-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					var i = t.wrapper.spread.getActiveSheet(),
					n = i.defaults.colWidth;
					this._element.find("[name=standard-column-width]").val(n)
				},
				i.prototype._validateValue = function (n) {
					var i = !0;
					return (parseFloat(n) > 9999999 || parseFloat(n) < 0) && (u.show(t.res.columnWidthDialog.exception2, t.res.title, 2), i = !1),
					i
				},
				i
			}
			(t.BaseDialog),
			t.StandardColumnWidthDialog = ht,
			st = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						modal : !0,
						title : t.res.standardHeightDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("[name=standard-row-height]").val(),
									f,
									r;
									n.match(/^[0-9\.]*$/) ? (f = i._validateValue(n), f && (r = parseInt(n), t.actions.doAction("defaultRowHeight", t.wrapper.spread, r), i.close(), t.wrapper.setFocusToSpread())) : u.show(t.res.standardHeightDialog.exception, t.res.title, 2)
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".standard-height-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					var i = t.wrapper.spread.getActiveSheet(),
					n = i.defaults.rowHeight;
					this._element.find("[name=standard-row-height]").val(n)
				},
				i.prototype._validateValue = function (n) {
					var i = !0;
					return (parseFloat(n) > 9999999 || parseFloat(n) < 0) && (u.show(t.res.rowHeightDialog.exception2, t.res.title, 2), i = !1),
					i
				},
				i
			}
			(t.BaseDialog),
			t.StandardRowHeightDialog = st,
			rt = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.insertCellsDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("input[name='insert-type']:checked").val();
									n === "shiftcellsright" ? t.actions.doAction("insertRightCells", t.wrapper.spread) : n === "shiftcellsdown" ? t.actions.doAction("insertDownCells", t.wrapper.spread) : n === "entirerow" ? t.actions.doAction("insertRows", t.wrapper.spread) : n === "entirecolumn" && t.actions.doAction("insertColumns", t.wrapper.spread),
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".insert-cells-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					this._element.find("input[type='radio']").prop("checked", !1),
					this._element.find(".default-radio").prop("checked", !0).attr("autofocus", !0)
				},
				i
			}
			(t.BaseDialog),
			t.InsertCellsDialog = rt,
			it = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.deleteCellsDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("input[name='delete-type']:checked").val();
									n === "shiftcellsleft" ? t.actions.doAction("deleteLeftCells", t.wrapper.spread) : n === "shiftcellsup" ? t.actions.doAction("deleteUpCells", t.wrapper.spread) : n === "entirerow" ? t.actions.doAction("deleteRows", t.wrapper.spread) : n === "entirecolumn" && t.actions.doAction("deleteColumns", t.wrapper.spread),
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".delete-cells-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					this._element.find("input[type='radio']").prop("checked", !1),
					this._element.find(".default-radio").prop("checked", !0).attr("autofocus", !0)
				},
				i
			}
			(t.BaseDialog),
			t.DeleteCellsDialog = it,
			ft = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.groupDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("input[name='group-type']:checked").val();
									n === "rows" ? t.actions.doAction("groupRows", t.wrapper.spread) : n === "columns" && t.actions.doAction("groupColumns", t.wrapper.spread),
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".group-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					this._element.find("input[type='radio']").prop("checked", !1),
					this._element.find(".default-radio").prop("checked", !0).attr("autofocus", !0)
				},
				i
			}
			(t.BaseDialog),
			t.GroupDialog = ft,
			ut = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.ungroupDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find("input[name='group-type']:checked").val();
									n === "rows" ? t.actions.doAction("ungroupRows", t.wrapper.spread) : n === "columns" && t.actions.doAction("ungroupColumns", t.wrapper.spread),
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".ungroup-dialog", r)
				}
				return __extends(i, n),
				i.prototype._beforeOpen = function () {
					this._element.find("input[type='radio']").prop("checked", !1),
					this._element.find(".default-radio").prop("checked", !0).attr("autofocus", !0)
				},
				i
			}
			(t.BaseDialog),
			t.UnGroupDialog = ut,
			vt = function (r) {
				function f() {
					var i = this,
					n = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.findDialog.title
					};
					r.call(this, "../dialogs/dialogs.html", ".find-dialog", n)
				}
				return __extends(f, r),
				f.prototype._initGrid = function () {
					var n = this,
					i = function (i, r) {
						if (n._findCells !== undefined) {
							var e = r.addedCells._list[0]._ri,
							u = n._findCells[e],
							f = t.wrapper.spread.getSheetFromName(u.sheet.getName());
							t.wrapper.spread.setActiveSheetIndex(t.wrapper.spread.sheets.indexOf(f)),
							t.wrapper.spread.getActiveSheet().setActiveCell(u.row, u.col),
							t.wrapper.spread.showActiveCell(3, 3)
						}
					};
					this._element.find(".findall-grid").gcuigrid({
						scrollMode : "auto",
						allowColMoving : !1,
						allowColSizing : !0,
						staticColumnIndex : -1,
						staticRowIndex : -1,
						columns : [{
								headerText : "Book",
								dataType : "string"
							}, {
								headerText : "Sheet",
								dataType : "string"
							}, {
								headerText : "Cell",
								dataType : "string"
							}, {
								headerText : "Value",
								dataType : "string"
							}, {
								headerText : "Formula",
								dataType : "string"
							}
						],
						selectionChanged : i
					})
				},
				f.prototype._FindAllFrame = function (n) {
					var t = this._getData(n);
					this._element.find(".findall-grid-container").addClass("show"),
					this._element.find(".findall-grid").addClass("show"),
					this._element.find(".findall-grid").gcuigrid({
						data : t
					}),
					this._element.find(".findall-description-label").addClass("show").text(t.length.toString() + " cell(s) found")
				},
				f.prototype._getData = function (n) {
					for (var i = [], t = 0; t < n.length; t++)
						i.push({
							Book : n[t]._workBookName,
							Sheet : n[t]._workSheetName,
							Cell : n[t]._cellName,
							Value : n[t]._value,
							Formula : n[t]._formula
						});
					return i
				},
				f.prototype._init = function () {
					var n = this;
					this._findWhat = this._element.find(".findwhat-input")[0],
					this._within = this._element.find("select[name='within']")[0],
					this._search = this._element.find("select[name='search']")[0],
					this._lookIn = this._element.find("select[name='lookin']")[0],
					this._matchCase = this._element.find(".matchcase-editor"),
					this._matchExactly = this._element.find(".matchexactly-editor"),
					this._useWildCards = this._element.find(".usewildcards-editor"),
					this._option = this._element.find("button[name='option']"),
					this._element.find(".findall-button").button(),
					this._element.find(".findnext-button").button(),
					this._element.find(".close-button").button(),
					this._option.button(),
					this._initGrid(),
					this._option.click(function () {
						n._element.find(".column1,.column2,.column3,.column4").toggleClass("column-hidden"),
						n._element.find(".row2,.row3").toggleClass("row-hidden"),
						n._switchOptionExt(),
						n._option[0].children[0].textContent = t.res.findDialog.option + n._optionExtend
					}),
					this._element.find(".findall-button").click(function () {
						var r = [];
						n._getSearchInformation();
						if (i == null || i.SearchString === undefined)
							return;
						r = n._within.selectedIndex === 0 ? n._findAll(t.wrapper.spread.getActiveSheet()) : n._findAll(),
						r.length > 0 ? n._FindAllFrame(r) : (n._element.find(".findall-grid").gcuigrid("option", "data", []), u.show(t.res.findDialog.exception, t.res.title, 2), n._element.find(".findall-description-label").addClass("show").text("0cell(s) found"))
					}),
					this._element.find(".findnext-button").click(function () {
						n._getSearchInformation();
						if (i == null || i.SearchString === undefined)
							return;
						var f,
						o,
						e,
						r = n._findNext();
						r != !0 && u.show(t.res.findDialog.exception, t.res.title, 2)
					}),
					this._element.find(".close-button").click(function () {
						n.close(),
						t.wrapper.setFocusToSpread()
					})
				},
				f.prototype._switchOptionExt = function () {
					this._optionExtend = this._optionExtend === ">>" ? "<<" : ">>"
				},
				f.prototype._beforeOpen = function () {
					i.SearchInformation(undefined, undefined, undefined, undefined, undefined),
					this._findWithInCurrentSelections = !1,
					this._activeSheetIndex = t.wrapper.spread.getActiveSheetIndex(),
					this._activeCellRowIndex = t.wrapper.spread.getActiveSheet().getActiveRowIndex(),
					this._activeCellColumnIndex = t.wrapper.spread.getActiveSheet().getActiveColumnIndex(),
					this._optionExtend === "<<" && (this._element.find(".column1,.column2,.column3,.column4").addClass("column-hidden"), this._element.find(".row2,.row3").addClass("row-hidden"), this._switchOptionExt()),
					this._optionExtend = ">>",
					this._option[0].children[0].textContent = t.res.findDialog.option + this._optionExtend,
					this._findWhat.value = "",
					this._within.selectedIndex = 0,
					this._search.selectedIndex = 0,
					this._lookIn.selectedIndex = 0,
					this._matchCase.removeAttr("checked"),
					this._matchExactly.removeAttr("checked"),
					this._useWildCards.removeAttr("checked"),
					this._element.find(".findall-grid-container").removeClass("show"),
					this._element.find(".findall-description-label").removeClass("show")
				},
				f.prototype._findNext = function () {
					if (i.SearchString == "")
						return this._findRowIndex = -1, this._findColumnIndex = -1, this._findSheetIndex = -1, !0;
					var n = !1;
					if (this._findWithInCurrentSelections) {
						if (!this._isBlockRangeContains())
							return this._findRowIndex = -1, this._findColumnIndex = -1, this._findSheetIndex = -1, !1;
						n = t.wrapper.spread.getActiveSheet().getSelections().length == 1 ? this._findNextWithinCurrentSelection() : this._findNextWithinCurrentSelections(),
						this._findSheetIndex = t.wrapper.spread.getActiveSheetIndex()
					} else if (i.WithinWorksheet) {
						if (!this._isWorksheetContains(t.wrapper.spread.getActiveSheet()))
							return this._findRowIndex = -1, this._findColumnIndex = -1, this._findSheetIndex = -1, !1;
						n = this._findNextWithinWorksheet(t.wrapper.spread.getActiveSheet()),
						n && (this._activeCellColumnIndex = this._findColumnIndex, this._activeCellRowIndex = this._findRowIndex, t.wrapper.spread.getActiveSheet().addSelection(this._findRowIndex, this._findColumnIndex, 1, 1), t.wrapper.spread.getActiveSheet().setActiveCell(this._findRowIndex, this._findColumnIndex), t.wrapper.spread.showActiveCell(3, 3)),
						this._findSheetIndex = t.wrapper.spread.getActiveSheetIndex()
					} else
						n = this._findNextWithinWorksheets();
					return n
				},
				f.prototype._isWorksheetContains = function (t) {
					var e,
					f,
					r = new n.SearchCondition,
					u;
					return r.searchString = i.SearchString,
					r.searchFlags = i.SearchFlags | 8,
					r.searchOrder = i.SearchOrder,
					r.searchTarget = i.SearchFoundFlags,
					r.sheetArea = 3,
					u = t.search(r),
					e = u.foundRowIndex,
					f = u.foundColumnIndex,
					e != -1 && f != -1 ? !0 : !1
				},
				f.prototype._isBlockRangeContains = function () {
					for (var h = t.wrapper.spread.getActiveSheet().getSelections(), e, f = 0; f < h.length; f++) {
						var u = h[f],
						c = u.row,
						v = u.col,
						l = u.row + u.rowCount - 1,
						a = u.col + u.colCount - 1,
						o,
						s,
						r = new n.SearchCondition;
						r.searchString = i.SearchString,
						r.searchFlags = i.SearchFlags | 8,
						r.searchOrder = i.SearchOrder,
						r.searchTarget = i.SearchFoundFlags,
						r.sheetArea = 3,
						r.rowStart = c,
						r.columnStart = v,
						r.rowEnd = l,
						r.columnEnd = a,
						e = t.wrapper.spread.getActiveSheet().search(r),
						o = e.foundRowIndex,
						s = e.foundColumnIndex;
						if (o != -1 && s != -1)
							return !0
					}
					return !1
				},
				f.prototype._getSearchInformation = function () {
					var n = this._findWhat.value,
					f,
					t,
					u,
					r;
					return n == "" ? null : (t = 0, this._optionExtend === "<<" ? (f = this._within.selectedIndex == 0 ? !0 : !1, this._matchCase.prop("checked") !== !0 && (t |= 1), this._matchExactly.prop("checked") === !0 && (t |= 2), this._useWildCards.prop("checked") === !0 && (t |= 4), u = this._search.selectedIndex === 0 ? 0 : 1, this._lookIn.selectedIndex === 0 ? r = 1 : this._lookIn.selectedIndex == 1 && (r = 8, n = n.charAt(0) === "=" ? n.substr(1, n.length) : n)) : (f = !0, t = 1, u = 0, r = 1), i.SearchInformation(f, n, t, u, r))
				},
				f.prototype._getRowStartColumnStart = function (n, t) {
					if (!t)
						return;
					var u = t.row,
					f = t.col,
					i = t.row + t.rowCount - 1,
					r = t.col + t.colCount - 1;
					n == 0 ? this._activeCellColumnIndex == -1 && this._activeCellRowIndex == -1 ? (this._rowStart = 0, this._columnStart = 0) : this._activeCellColumnIndex < r ? (this._rowStart = this._activeCellRowIndex, this._columnStart = this._activeCellColumnIndex + 1) : this._activeCellColumnIndex == r ? (this._rowStart = this._activeCellRowIndex + 1, this._columnStart = 0) : (this._rowStart = u, this._columnStart = f) : this._activeCellColumnIndex == -1 && this._activeCellRowIndex == -1 ? (this._rowStart = 0, this._columnStart = 0) : this._activeCellRowIndex < i ? (this._rowStart = this._activeCellRowIndex + 1, this._columnStart = this._activeCellColumnIndex) : this._activeCellRowIndex == i ? (this._rowStart = 0, this._columnStart = this._activeCellColumnIndex + 1) : (this._rowStart = u, this._columnStart = f)
				},
				f.prototype._getFindWorksheetList = function (n) {
					for (var u = [], f = this._activeSheetIndex, r, i = f; i < t.wrapper.spread.getSheetCount(); i++)
						u.push(t.wrapper.spread.sheets[i]);
					for (r = 0; r < f; r++)
						u.push(t.wrapper.spread.sheets[r]);
					return u
				},
				f.prototype._findWithSelection = function (r) {
					var e,
					s,
					f;
					if (!r)
						return !1;
					this._getRowStartColumnStart(i.SearchOrder, r);
					var o = r.row + r.rowCount - 1,
					h = r.col + r.colCount - 1,
					u = new n.SearchCondition;
					return u.searchString = i.SearchString,
					u.searchFlags = i.SearchFlags,
					u.searchOrder = i.SearchOrder,
					u.searchTarget = i.SearchFoundFlags,
					u.sheetArea = 3,
					u.rowStart = e,
					u.columnStart = s,
					u.rowEnd = o,
					u.columnEnd = h,
					f = t.wrapper.spread.getActiveSheet().search(u),
					this._findRowIndex = f.foundRowIndex,
					this._findColumnIndex = f.foundColumnIndex,
					this._findRowIndex != -1 && this._findColumnIndex != -1 ? !0 : !1
				},
				f.prototype._findWithinWorksheet = function (t) {
					var u;
					this._getRowStartColumnStart(i.SearchOrder, new n.Range(0, 0, t.getRowCount(), t.getColumnCount()));
					var e = t.getRowCount() - 1,
					f = t.getColumnCount() - 1,
					r = new n.SearchCondition;
					return r.searchString = i.SearchString,
					r.searchFlags = i.SearchFlags,
					r.searchOrder = i.SearchOrder,
					r.searchTarget = i.SearchFoundFlags,
					r.sheetArea = 3,
					r.rowStart = this._rowStart,
					r.columnStart = this._columnStart,
					r.rowEnd = e,
					r.columnEnd = f,
					u = t.search(r),
					this._findRowIndex = u.foundRowIndex,
					this._findColumnIndex = u.foundColumnIndex,
					this._findRowIndex != -1 && this._findColumnIndex != -1
				},
				f.prototype._findNextWithinCurrentSelection = function () {
					var n,
					r;
					return this._findRowIndex = -1,
					this._findColumnIndex = -1,
					n = t.wrapper.spread.getActiveSheet().getSelections()[0],
					n ? (r = this._findWithSelection(n), r ? this._contains(n, this._findRowIndex, this._findColumnIndex) ? (this._activeCellRowIndex = this._findRowIndex, this._activeCellColumnIndex = this._findColumnIndex, t.wrapper.spread.getActiveSheet().setActiveCell(this._findRowIndex, this._findColumnIndex), t.wrapper.spread.showActiveCell(3, 3), !0) : (i.SearchOrder == 0 ? (this._activeCellRowIndex++, this._activeCellColumnIndex = n.col - 1) : (this._activeCellColumnIndex++, this._activeCellRowIndex = n.row - 1), this._findNextWithinCurrentSelection()) : (i.SearchOrder == 0 ? (this._activeCellRowIndex = n.row, this._activeCellColumnIndex = n.col - 1) : (this._activeCellRowIndex = n.row - 1, this._activeCellColumnIndex = n.col), this._findNextWithinCurrentSelection())) : !1
				},
				f.prototype._findNextWithinCurrentSelections = function () {
					var r,
					f,
					u;
					return this._findRowIndex = -1,
					this._findColumnIndex = -1,
					r = this._mergedSelections,
					r ? (f = new n.Range(r.row, r.col, r.rowCount, r.colCount), u = this._findWithSelection(f), u ? this._selectionsContains(this._findRowIndex, this._findColumnIndex) ? (this._activeCellRowIndex = this._findRowIndex, this._activeCellColumnIndex = this._findColumnIndex, t.wrapper.spread.getActiveSheet().setActiveCell(this._findRowIndex, this._findColumnIndex), t.wrapper.spread.showActiveCell(3, 3), !0) : (i.SearchOrder == 0 ? (this._activeCellRowIndex++, this._activeCellColumnIndex = r.col) : (this._activeCellColumnIndex++, this._activeCellRowIndex = r.row), this._findNextWithinCurrentSelections()) : (i.SearchOrder == 0 ? (this._activeCellRowIndex = r.row, this._activeCellColumnIndex = r.col - 1) : (this._activeCellRowIndex = r.row - 1, this._activeCellColumnIndex = r.col), this._findNextWithinCurrentSelections())) : !1
				},
				f.prototype._findNextWithinWorksheet = function (n) {
					this._findRowIndex = -1,
					this._findColumnIndex = -1;
					var i = this._findWithinWorksheet(n);
					return i ? (this._activeCellRowIndex = this._findRowIndex, this._activeCellColumnIndex = this._findColumnIndex, t.wrapper.spread.getActiveSheet().addSelection(this._findRowIndex, this._findColumnIndex, 1, 1), t.wrapper.spread.showActiveCell(3, 3), !0) : (this._activeCellRowIndex = -1, this._activeCellColumnIndex = -1, this._findWithinWorksheet(n))
				},
				f.prototype._findNextWithinWorksheets = function () {
					var e = this._getFindWorksheetList(i.WithinWorksheet),
					n,
					u,
					r,
					f;
					for (this._findRowIndex = -1, this._findColumnIndex = -1, this._findSheetIndex = -1, n = 0; n < e.length; n++) {
						u = e[n],
						r = t.wrapper.spread.sheets.indexOf(u),
						r != t.wrapper.spread.getActiveSheetIndex() && (this._activeCellRowIndex = -1, this._activeCellColumnIndex = -1),
						f = this._findWithinWorksheet(u);
						if (f) {
							this._findSheetIndex = r;
							break
						}
					}
					return this._findSheetIndex != -1 ? (this._activeSheetIndex = this._findSheetIndex, this._activeCellRowIndex = this._findRowIndex, this._activeCellColumnIndex = this._findColumnIndex, t.wrapper.spread.setActiveSheetIndex(this._findSheetIndex), t.wrapper.spread.getActiveSheet().setActiveCell(this._findRowIndex, this._findColumnIndex), t.wrapper.spread.showActiveCell(3, 3), !0) : !1
				},
				f.prototype._contains = function (n, t, i) {
					return n ? t >= n.row && t <= n.row + n.rowCount && i >= n.col && i <= n.col + n.colCount ? !0 : !1 : !1
				},
				f.prototype._selectionsContains = function (n, i) {
					for (var f = t.wrapper.spread.getActiveSheet().getSelections(), u, r = 0; r < f.length; r++) {
						u = f[r];
						if (this._contains(u, n, i))
							return !0
					}
					return !1
				},
				f.prototype._findAll = function (n) {
					this._findCells = [];
					var i = [];
					return i = n === undefined ? this._actualFindAllByBook(t.wrapper.spread) : this._actualFindAllBySheet(n)
				},
				f.prototype._actualFindAllBySheet = function (r) {
					var y = [],
					o = 0,
					f = 0,
					v = r.getRowCount() - 1,
					a = r.getColumnCount() - 1,
					s = -1,
					h = -1,
					u = new n.SearchCondition,
					c;
					u.searchString = i.SearchString,
					u.searchFlags = i.SearchFlags,
					u.searchOrder = i.SearchOrder,
					u.searchTarget = i.SearchFoundFlags,
					u.sheetArea = 3,
					u.rowStart = o,
					u.columnStart = f,
					u.rowEnd = v,
					u.columnEnd = a,
					c = r.search(u),
					s = c.foundRowIndex,
					h = c.foundColumnIndex;
					while (s != -1 && h != -1) {
						var l = r.getCell(s, h),
						b = t.wrapper.spread.name === "" || t.wrapper.spread.name === null ? "Default" : t.wrapper.spread.name,
						k = new n.Calc.Expressions.CellExpression(l.row, l.col, !1, !1),
						p = this._unparse(null, k, 0, 0),
						w = new e(b, r.getName(), p, l.text(), l.formula());
						y.push(w),
						this._findCells.push(l),
						i.SearchOrder == 0 ? (o = s, f = h + 1, f >= r.getColumnCount() && o < r.getRowCount() && (o = s + 1, f = 0)) : (o = s + 1, f = h, o >= r.getRowCount() && f < r.getColumnCount() && (o = 0, f = h + 1)),
						u = new n.SearchCondition,
						u.searchString = i.SearchString,
						u.searchFlags = i.SearchFlags,
						u.searchOrder = i.SearchOrder,
						u.searchTarget = i.SearchFoundFlags,
						u.sheetArea = 3,
						u.rowStart = o,
						u.columnStart = f,
						u.rowEnd = v,
						u.columnEnd = a,
						c = r.search(u),
						s = c.foundRowIndex,
						h = c.foundColumnIndex
					}
					return y
				},
				f.prototype._actualFindAllByBook = function (r) {
					var v = [],
					l = 0,
					c = 0,
					h = -1,
					s = -1,
					f = -1,
					u = new n.SearchCondition,
					o;
					u.startSheetIndex = 0,
					u.endSheetIndex = r.getSheetCount() - 1,
					u.searchString = i.SearchString,
					u.searchFlags = i.SearchFlags,
					u.searchOrder = i.SearchOrder,
					u.searchTarget = i.SearchFoundFlags,
					u.sheetArea = 3,
					o = r.search(u),
					h = o.foundRowIndex,
					s = o.foundColumnIndex,
					f = o.foundSheetIndex;
					while (h != -1 && s != -1 || f <= r.getSheetCount() - 1 && f != -1) {
						u = new n.SearchCondition;
						if (h != -1 && s != -1) {
							var a = r.sheets[f].getCell(h, s),
							w = t.wrapper.spread.name === "" || t.wrapper.spread.name === null ? "Default" : t.wrapper.spread.name,
							b = new n.Calc.Expressions.CellExpression(a.row, a.col, !1, !1),
							y = this._unparse(null, b, 0, 0),
							p = new e(w, r.sheets[f].getName(), y, a.text(), a.formula());
							v.push(p),
							this._findCells.push(a),
							i.SearchOrder == 0 ? (l = h, c = s + 1, c >= r.sheets[f].getColumnCount() && l < r.sheets[f].getRowCount() && (l = h + 1, c = 0)) : (l = h + 1, c = s, l >= r.sheets[f].getRowCount() && c < r.sheets[f].getColumnCount() && (l = 0, c = s + 1)),
							u.rowStart = l,
							u.columnStart = c
						} else
							u.rowStart = 0, u.columnStart = 0, u.rowEnd = r.sheets[f].getRowCount() - 1, u.columnEnd = r.sheets[f].getColumnCount() - 1;
						u.searchString = i.SearchString,
						u.searchFlags = i.SearchFlags,
						u.searchOrder = i.SearchOrder,
						u.searchTarget = i.SearchFoundFlags,
						u.sheetArea = 3,
						u.startSheetIndex = f,
						u.endSheetIndex = f,
						u.sheetArea = 3,
						o = r.search(u),
						h = o.foundRowIndex,
						s = o.foundColumnIndex,
						o.foundSheetIndex != -1 ? f = o.foundSheetIndex : f++
					}
					return v
				},
				f
			}
			(t.BaseDialog),
			t.FindDialog = vt,
			i = function () {
				function n() {}

				return n.SearchInformation = function (n, t, i, r, u) {
					this.WithinWorksheet = n,
					this.SearchString = t,
					this.SearchFlags = i,
					this.SearchOrder = r,
					this.SearchFoundFlags = u
				},
				n
			}
			(),
			t.SearchInformation = i,
			e = function () {
				function n(n, t, i, r, u) {
					this._workBookName = n,
					this._workSheetName = t,
					this._cellName = i,
					this._value = r,
					this._formula = u
				}
				return n
			}
			(),
			t.FindResultInformation = e,
			yt = function (i) {
				function r() {
					var n = this,
					r = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.gotoDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var r = n._element.find(".goto-value-input").val(),
									i = n._goto(r);
									i === !0 ? n.close() : u.show(t.res.gotoDialog.exception, t.res.title, 3),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".goto-dialog", r)
				}
				return __extends(r, i),
				r.prototype._init = function () {
					var n = this;
					this._element.find(".goto-list").change(function (t) {
						var r = t.target || t.srcElement,
						i = r;
						n._element.find(".goto-value-input").prop("value", i.value)
					})
				},
				r.prototype._beforeOpen = function () {
					var f = this._element.find(".goto-list")[0].options,
					u,
					i,
					r,
					n;
					for (this._element.find(".goto-list").empty(), this._element.find(".goto-value-input").prop("value", ""), u = 0, r = 0; r < t.wrapper.spread.sheets.length; r++) {
						i = t.wrapper.spread.sheets[r].getCustomNames();
						if (i !== undefined)
							for (n = 0; n < i.length; n++)
								f[u++] = new Option(i[n].getName())
					}
					i = t.wrapper.spread.getCustomNames();
					if (i !== undefined)
						for (n = 0; n < i.length; n++)
							f[u++] = new Option(i[n].getName())
				},
				r.prototype._goto = function (n) {
					var h,
					e = -1,
					f,
					s,
					o,
					r,
					i;
					if (n === undefined || n === "")
						return !1;
					for (s = this._element.find(".goto-list")[0].options, o = !1, i = 0; i < s.length; i++)
						if (n === s[i].textContent) {
							o = !0;
							break
						}
					if (o) {
						for (r = t.wrapper.spread.getCustomName(n), i = 0; i < t.wrapper.spread.sheets.length; i++) {
							r || (r = t.wrapper.spread.sheets[i].getCustomName(n));
							if (r) {
								e = i;
								break
							}
						}
						h = r.getExpression()
					} else
						return u.show(t.res.gotoDialog.wrongName, t.res.title, 3), !0;
					this._gotoSheet = null,
					f = this._getGotoRange(h);
					if (this._gotoSheet != null) {
						for (i = 0; i < t.wrapper.spread.sheets.length; i++)
							if (t.wrapper.spread.sheets[i].getName() === this._gotoSheet.getName()) {
								e = i;
								break
							}
					} else
						return !1;
					return e !== -1 && t.wrapper.spread.setActiveSheetIndex(e),
					t.wrapper.spread.getActiveSheet().clearSelection(),
					t.wrapper.spread.getActiveSheet().setSelection(f.row, f.column, f.rowCount, f.columnCount),
					t.wrapper.spread.showActiveCell(3, 3),
					!0
				},
				r.prototype._getGotoRange = function (i) {
					var a = t.wrapper.spread.getActiveSheet(),
					f = 0,
					e = 0,
					s = 0,
					o = 0,
					c,
					r,
					h,
					u,
					l;
					return i instanceof n.Calc.Expressions.CellExpression ? (this._gotoSheet = a, c = i, f = c.row, e = c.column, s = 1, o = 1, c.columnRelative === !0 && (e += t.wrapper.spread.getActiveSheet().getActiveColumnIndex()), c.rowRelative === !0 && (f += t.wrapper.spread.getActiveSheet().getActiveRowIndex())) : i instanceof n.Calc.Expressions.RangeExpression ? (this._gotoSheet = a, r = i, r.isFullColumn ? (f = 0, s = this._gotoSheet.getRowCount()) : (f = r.startRow, s = r.endRow - r.startRow + 1), r.isFullRow ? (e = 0, o = this._gotoSheet.getColumnCount()) : (e = r.startColumn, o = r.endColumn - r.startColumn + 1), r.startColumnRelative === !0 && (e += t.wrapper.spread.getActiveSheet().getActiveColumnIndex()), r.startRowRelative === !0 && (f += t.wrapper.spread.getActiveSheet().getActiveRowIndex()), r.endColumnRelative === !0 && (o = r.endColumn + t.wrapper.spread.getActiveSheet().getActiveColumnIndex() - e + 1), r.endRowRelative === !0 && (s = r.endRow + t.wrapper.spread.getActiveSheet().getActiveRowIndex() - f + 1)) : i instanceof n.Calc.Expressions.ExternalCellExpression ? (h = i, this._gotoSheet = h.source.getSheet(), f = h.row, e = h.column, s = 1, o = 1, h.columnRelative === !0 && (e += t.wrapper.spread.getActiveSheet().getActiveColumnIndex()), h.rowRelative === !0 && (f += t.wrapper.spread.getActiveSheet().getActiveRowIndex())) : i instanceof n.Calc.Expressions.ExternalRangeExpression && (u = i, this._gotoSheet = u.source._sheet, f = u.startRow, e = u.startColumn, s = u.endRow - u.startRow + 1, o = u.endColumn - u.startColumn + 1, u.startColumnRelative === !0 && (e += t.wrapper.spread.getActiveSheet().getActiveColumnIndex()), u.startRowRelative === !0 && (f += t.wrapper.spread.getActiveSheet().getActiveRowIndex()), u.endColumnRelative === !0 && (o = u.endColumn + t.wrapper.spread.getActiveSheet().getActiveColumnIndex() - e + 1), u.endRowRelative === !0 && (s = u.endRow + t.wrapper.spread.getActiveSheet().getActiveRowIndex() - f + 1)),
					l = {
						row : f,
						column : e,
						rowCount : s,
						columnCount : o
					}
				},
				r
			}
			(t.BaseDialog),
			t.GoToDialog = yt,
			lt = function (i) {
				function r() {
					var r = this,
					n = {
						resizable : !1,
						height : 550,
						width : 640,
						minWidth : 640,
						maxWidth : 640,
						minHeight : 550,
						maxHeight : 550,
						modal : !0,
						title : t.res.nameManagerDialog.title,
						buttons : [{
								text : t.res.close,
								click : function () {
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".name-manager-dialog", n)
				}
				return __extends(r, i),
				r.prototype._beforeOpen = function () {
					var r = this,
					i = this._element.find(".edit-button"),
					n = this._element.find(".delete-button"),
					t = this._element.find(".names-grid");
					this._updateFilter(),
					t.gcuigrid("option", "data", this._getData()),
					this._allnames.length > 0 ? ($(i).button("enable"), $(n).button("enable")) : ($(i).button("disable"), $(n).button("disable")),
					setTimeout(function () {
						t.gcuigrid("doRefresh", r._getData())
					}, 0)
				},
				r.prototype._init = function () {
					var n = this,
					e = this._element.find(".names-grid"),
					f = this._element.find(".edit-button"),
					r = this._element.find(".delete-button"),
					h = this._element.find(".filter-select"),
					c = function (t, i) {
						n._selectedNameIndex = i.addedCells._list[0]._ri
					},
					l = function (t, i) {
						var f = n._element.find(".gcui-gcuigrid-scroller"),
						r = n._element.find(".gcui-superpanel-statecontainer"),
						o = parseInt(r.css("width")) >= 605 ? !0 : !1,
						u = parseInt(r.css("height"));
						o ? (f.css("height", u + 18 + "px"), r.css("height", u + 18 + "px")) : e.gcuigrid("doRefresh")
					},
					o,
					i;
					e.gcuigrid({
						scrollMode : "horizontal",
						allowColMoving : !1,
						allowColSizing : !0,
						height : "auto",
						columns : [{
								headerText : t.res.nameManagerDialog.nameColumn,
								dataType : "string",
								width : 150,
								ensurePxWidth : !0
							}, {
								headerText : t.res.nameManagerDialog.valueColumn,
								dataType : "string",
								width : 152,
								ensurePxWidth : !0
							}, {
								headerText : t.res.nameManagerDialog.refersToColumn,
								dataType : "string",
								width : 150,
								ensurePxWidth : !0
							}, {
								headerText : t.res.nameManagerDialog.scopeColumn,
								dataType : "string",
								width : 150,
								ensurePxWidth : !0
							}
						],
						selectionChanged : c,
						columnResized : l
					}),
					o = this,
					i = this._element.find(".filter-select")[0].options,
					i.add(new Option(t.res.nameManagerDialog.filterWith.clearFilter)),
					i.add(new Option(t.res.nameManagerDialog.filterWith.nameScopedToWorkbook)),
					i.add(new Option(t.res.nameManagerDialog.filterWith.nameScopedToWorksheet)),
					i.add(new Option(t.res.nameManagerDialog.filterWith.nameWithErrors)),
					i.add(new Option(t.res.nameManagerDialog.filterWith.nameWithoutErrors)),
					this._element.find(".new-button").button(),
					f.button(),
					r.button(),
					this._newNameDialog = new s(this),
					this._element.find(".new-button").click(function () {
						n.close(),
						n._newNameDialog.open("new", undefined)
					}),
					f.click(function () {
						n.close(),
						n._newNameDialog.open("edit", n._allnames[n._selectedNameIndex])
					}),
					r.click(function () {
						u.show(t.util.format(t.res.nameManagerDialog.deleteAlert, n._allnames[n._selectedNameIndex].name), "Spread Designer", 2, 1, function (i, u) {
							var s,
							o;
							if (u === 1) {
								if (n._allnames[n._selectedNameIndex].scope === "Workbook")
									t.wrapper.spread.removeCustomName(n._allnames[n._selectedNameIndex].name);
								else {
									for (o = 0; o < t.wrapper.spread.sheets.length; o++)
										if (t.wrapper.spread.sheets[o].getName() === n._allnames[n._selectedNameIndex].scope) {
											s = o;
											break
										}
									t.wrapper.spread.sheets[s].removeCustomName(n._allnames[n._selectedNameIndex].name)
								}
								n._updateFilter(),
								e.gcuigrid("option", "data", n._getData()),
								n._allnames.length === 0 && ($(f).button("disable"), $(r).button("disable"))
							}
						})
					}),
					h.change(function () {
						var t = o._element.find(".names-grid");
						n._updateFilter(),
						t.gcuigrid("option", "data", n._getData()),
						n._allnames.length === 0 ? ($(f).button("disable"), $(r).button("disable")) : ($(f).button("enable"), $(r).button("enable"))
					})
				},
				r.prototype._getData = function () {
					for (var t = [], n = 0; n < this._allnames.length; n++)
						t.push({
							Name : this._allnames[n].name,
							Value : this._allnames[n].value,
							"Refers To" : this._allnames[n].refersTo,
							Scope : this._allnames[n].scope
						});
					return this._data = new gcui.data.ArrayDataView(t)
				},
				r.prototype._parseValues = function (i) {
					var s,
					o,
					e,
					c,
					l,
					u,
					r = "",
					f,
					h;
					if (i instanceof n.Calc.Expressions.ExternalRangeExpression) {
						for (s = t.wrapper.spread.getSheetFromName(i.source._sheet.getName()), o = i.startColumn, e = i.startRow, c = i.endColumn - i.startColumn + 1, l = i.endRow - i.startRow + 1, o < 0 && (o = 0, c = s.getColumnCount()), e < 0 && (e = 0, l = s.getRowCount()), u = s.getArray(e, o, l, c), f = 0; f < u.length; f++) {
							for (h = 0; h < u[f].length; h++)
								r += u[f][h] === null ? '"",' : '"' + u[f][h].toString() + '",';
							r = r.substring(0, r.length - 1),
							r = r + ";"
						}
						r = r.substring(0, r.length - 1),
						r = "{" + r + "}"
					} else
						i instanceof n.Calc.Expressions.ExternalCellExpression ? (s = t.wrapper.spread.getSheetFromName(i.source._sheet.getName()), o = i.column, e = i.row, c = 1, l = 1, u = s.getArray(e, o, l, c), u.length > 0 && u[0][0] !== null && (r = u[0][0].toString())) : i instanceof n.Calc.Expressions.BinaryOperatorExpression && (r = "{...}");
					return r
				},
				r.prototype._updateFilter = function () {
					var f = this._element.find(".filter-select"),
					l = new n.Calc.ParserContext(null, t.wrapper.spread.referenceStyle(), 0, 0),
					r,
					s = t.wrapper.spread.getActiveSheet(),
					h,
					c,
					u,
					i,
					e,
					o;
					this._allnames = [],
					h = [],
					c = [];
					if (f.val() !== t.res.nameManagerDialog.filterWith.nameScopedToWorksheet) {
						r = t.wrapper.spread.getCustomNames();
						if (r !== undefined)
							for (i = 0; i < r.length; i++)
								e = this._unparse(null, r[i].getExpression(), s.getActiveRowIndex(), s.getActiveColumnIndex()), o = this._parseValues(r[i].getExpression()), this._allnames.push({
									name : r[i].getName(),
									refersTo : e,
									scope : "Workbook",
									value : o
								}), r[i].getExpression()instanceof n.Calc.Expressions.ErrorExpression ? h.push(this._allnames[this._allnames.length - 1]) : c.push(this._allnames[this._allnames.length - 1])
					}
					if (f.val() !== t.res.nameManagerDialog.filterWith.nameScopedToWorkbook)
						for (u = 0; u < t.wrapper.spread.sheets.length; u++) {
							r = t.wrapper.spread.sheets[u].getCustomNames();
							if (r !== undefined)
								for (i = 0; i < r.length; i++)
									e = this._unparse(null, r[i].getExpression(), s.getActiveRowIndex(), s.getActiveColumnIndex()), o = this._parseValues(r[i].getExpression()), this._allnames.push({
										name : r[i].getName(),
										refersTo : e,
										scope : t.wrapper.spread.sheets[u].getName(),
										value : o
									}), r[i].getExpression()instanceof n.Calc.Expressions.ErrorExpression ? h.push(this._allnames[this._allnames.length - 1]) : c.push(this._allnames[this._allnames.length - 1])
						}
					f.val() === t.res.nameManagerDialog.filterWith.nameWithoutErrors && (this._allnames = c),
					f.val() === t.res.nameManagerDialog.filterWith.nameWithErrors && (this._allnames = h)
				},
				r
			}
			(t.BaseDialog),
			t.NameManagerDialog = lt,
			s = function (i) {
				function r(n) {
					var u = this,
					r;
					n !== undefined && (this._nameManagerDialog = n),
					r = {
						resizable : !1,
						autoOpen : !1,
						width : "auto",
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									u.close()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									u.close()
								}
							}
						]
					},
					i.call(this, "../dialogs/dialogs.html", ".new-name-dialog", r)
				}
				return __extends(r, i),
				r.prototype._afterClose = function () {
					this._nameManagerDialog !== undefined && this._nameManagerDialog.open()
				},
				r.prototype._validateSheetName = function (n) {
					var i = t.wrapper.spread.referenceStyle();
					return t.util.isValidateSheetName(n, i, !1) ? n : t.util.isValidateSheetName(n, i, !0) ? "'" + n + "'" : null
				},
				r.prototype._beforeOpen = function (i) {
					var o = this,
					s = this._element.find(".name-input"),
					a = this._element.find(".scope-select"),
					y = this._element.find(".referTo"),
					l = a[0].options,
					p,
					w,
					b,
					c,
					r,
					h,
					e,
					v,
					k,
					f;
					for (a.empty(), l.add(new Option(t.res.newNameDialog.scope.workbook)), f = 0; f < t.wrapper.spread.sheets.length; f++)
						l.add(new Option(t.wrapper.spread.sheets[f].getName()));
					p = this,
					w = function () {
						var h = a[0].selectedIndex === 0,
						e = a[0].selectedIndex - 1,
						c,
						f,
						l,
						n,
						r;
						if (s.val() === "")
							u.show(t.res.nameManagerDialog.exception1, t.res.title, 2, 0);
						else if (o.selectedItem !== undefined && o.selectedItem !== null || i[0] === "new") {
							o.selectedItem !== undefined && o.selectedItem !== null && (c = o.selectedItem.name);
							if (!(i[0] === "edit" && s.val() === c)) {
								f = h ? t.wrapper.spread.getCustomName(s.val()) : t.wrapper.spread.sheets[e].getCustomName(s.val());
								if (f !== null && f !== undefined) {
									u.show(t.res.nameManagerDialog.exception2, t.res.title, 2, 0);
									return
								}
							}
							if (t.util.isValidateName(s.val())) {
								if (i[0] === "edit")
									if (o.selectedItem.scope === "Workbook")
										t.wrapper.spread.removeCustomName(o.selectedItem.name);
									else {
										for (n = 0; n < t.wrapper.spread.sheets.length; n++)
											if (t.wrapper.spread.sheets[n].getName() === o.selectedItem.scope) {
												l = n;
												break
											}
										t.wrapper.spread.sheets[l].removeCustomName(o.selectedItem.name)
									}
								r = t.wrapper.spread.getActiveSheet(),
								h ? t.wrapper.spread.addCustomName(s.val(), y.val(), r.getActiveRowIndex(), r.getActiveColumnIndex()) : t.wrapper.spread.sheets[e].addCustomName(s.val(), y.val(), r.getActiveRowIndex(), r.getActiveColumnIndex()),
								o.close()
							} else
								u.show(t.res.newNameDialog.wrongName, t.res.title, 3)
						}
					};
					if (i[0] === "new") {
						for ($(".scope-select").removeAttr("disabled"), this._element.dialog("option", "title", t.res.newNameDialog.titleNew), this._element.dialog("option", "modal", !0), this._element.dialog("option", "buttons", [{
										text : t.res.ok,
										click : w
									}, {
										text : t.res.cancel,
										click : function () {
											p.close()
										}
									}
								]), s.prop("value", ""), a.prop("selectedIndex", 0), b = t.wrapper.spread.sheets[t.wrapper.spread.getActiveSheetIndex()].getSelections(), c = "", f = 0; f < b.length; f++)
							r = b[f], v = t.SpreadUtility.getRangeType(r), v == 3 && (e = new n.Calc.Expressions.RangeExpression, e.initBand(0, r.rowCount - 1, !1, !1, !0), h = this._unparse(null, e, 0, 0)), v == 0 && (e = new n.Calc.Expressions.RangeExpression, e.initBand(r.col, r.col + r.colCount - 1, !1, !1, !1), h = this._unparse(null, e, 0, 0)), v == 1 && (e = new n.Calc.Expressions.RangeExpression, e.initBand(r.row, r.row + r.rowCount - 1, !1, !1, !0), h = this._unparse(null, e, 0, 0)), v == 2 && (r.rowCount === 1 && r.colCount === 1 ? (k = new n.Calc.Expressions.CellExpression(r.row, r.col, !1, !1), h = this._unparse(null, k, 0, 0)) : (e = new n.Calc.Expressions.RangeExpression(r.row, r.col, r.row + r.rowCount - 1, r.col + r.colCount - 1, !1, !1, !1, !1), h = this._unparse(null, e, 0, 0))), h = this._validateSheetName(t.wrapper.spread.getActiveSheet().getName()) + "!" + h, c += h + ",";
						c = c.slice(0, c.length - 1),
						y.prop("value", c)
					} else if (i[0] === "edit")
						for ($(".scope-select").attr("disabled", "disabled"), this.selectedItem = i[1], this._element.dialog("option", "title", t.res.newNameDialog.titleEdit), this._element.dialog("option", "modal", !0), this._element.dialog("option", "buttons", [{
										text : t.res.ok,
										click : w
									}, {
										text : t.res.cancel,
										click : function () {
											p.close()
										}
									}
								]), s.prop("value", this.selectedItem.name), y.prop("value", this.selectedItem.refersTo), f = 0; f < l.length; f++)
							l[f].innerText === this.selectedItem.scope && $(l[f]).prop("selected", !0)
				},
				r
			}
			(t.BaseDialog),
			t.NewNameDialog = s,
			k = function (n) {
				function i() {
					var i = this,
					r = {
						resizable : !1,
						width : "470px",
						modal : !0,
						title : t.res.insertFunctionDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var n = i._element.find(".formula").val(),
									u = $("#formulaBarText"),
									r;
									n.substring(0, 1) !== "=" && (n = "=" + n),
									u.text(n),
									r = t.wrapper.spread.getActiveSheet(),
									r.setFormula(r.getActiveRowIndex(), r.getActiveColumnIndex(), n),
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".insert-function-dialog", r)
				}
				return __extends(i, n),
				i.prototype._init = function () {
					var n = this,
					e,
					o;
					this._databaseNames = ["DAVERAGE", "DCOUNT", "DCOUNTA", "DGET", "DMAX", "DMIN", "DPRODUCT", "DSTDEV", "DSTDEVP", "DSUM", "DVAR", "DVARP"],
					this._dateAndTimeNames = ["DATE", "DATEDIF", "DATEVALUE", "DAY", "DAYS360", "EDATE", "EOMONTH", "HOUR", "MINUTE", "MONTH", "NETWORKDAYS", "NOW", "SECOND", "TIME", "TIMEVALUE", "TODAY", "WEEKDAY", "WEEKNUM", "WORKDAY", "YEAR", "YEARFRAC"],
					this._engineeringNames = ["BESSELI", "BESSELJ", "BESSELK", "BESSELY", "BIN2DEC", "BIN2HEX", "BIN2OCT", "COMPLEX", "CONVERT", "DEC2BIN", "DEC2HEX", "DEC2OCT", "DELTA", "ERF", "ERFC", "GESTEP", "HEX2BIN", "HEX2DEC", "HEX2OCT", "IMABS", "IMAGINARY", "IMARGUMENT", "IMCONJUGATE", "IMCOS", "IMDIV", "IMEXP", "IMLN", "IMLOG10", "IMLOG2", "IMPOWER", "IMPRODUCT", "IMREAL", "IMSIN", "IMSQRT", "IMSUB", "IMSUM", "OCT2BIN", "OCT2DEC", "OCT2HEX"],
					this._financialNames = ["ACCRINT", "ACCRINTM", "AMORDEGRC", "AMORLINC", "COUPDAYBS", "COUPDAYS", "COUPDAYSNC", "COUPNCD", "COUPNUM", "COUPPCD", "CUMIPMT", "CUMPRINC", "DB", "DDB", "DISC", "DOLLARDE", "DOLLARFR", "DURATION", "EFFECT", "FV", "FVSCHEDULE", "INTRATE", "IPMT", "IRR", "ISPMT", "MDURATION", "MIRR", "NOMINAL", "NPER", "NPV", "ODDFPRICE", "ODDFYIELD", "ODDLPRICE", "ODDLYIELD", "EURO", "EUROCONVERT", "PMT", "PPMT", "PRICE", "PRICEDISC", "PRICEMAT", "PV", "RATE", "RECEIVED", "SLN", "SYD", "TBILLEQ", "TBILLPRICE", "TBILLYIELD", "VDB", "XIRR", "XNPV", "YIELD", "YIELDDISC", "YIELDMAT"],
					this._informationNames = ["ERROR.TYPE", "ISBLANK", "ISERR", "ISERROR", "ISEVEN", "ISLOGICAL", "ISNA", "ISNONTEXT", "ISNUMBER", "ISODD", "ISREF", "ISTEXT", "N", "NA", "TYPE"],
					this._logicalNames = ["AND", "FALSE", "IF", "IFERROR", "NOT", "OR", "TRUE"],
					this._lookupAndReferenceNames = ["ADDRESS", "CHOOSE", "COLUMN", "COLUMNS", "HLOOKUP", "INDEX", "LOOKUP", "MATCH", "OFFSET", "ROW", "ROWS", "TRANSPOSE", "VLOOKUP"],
					this._mathAndTrigonometryNames = ["ABS", "ACOS", "ACOSH", "ASIN", "ASINH", "ATAN", "ATAN2", "ATANH", "CEILING", "COMBIN", "COS", "COSH", "DEGREES", "EVEN", "EXP", "FACT", "FACTDOUBLE", "FLOOR", "GCD", "INT", "LCM", "LN", "LOG", "LOG10", "MDETERM", "MINVERSE", "MMULT", "MOD", "MROUND", "MULTINOMIAL", "ODD", "PI", "POWER", "PRODUCT", "QUOTIENT", "RADIANS", "RAND", "RANDBETWEEN", "ROMAN", "ROUND", "ROUNDDOWN", "ROUNDUP", "SERIESSUM", "SIGN", "SIN", "SINH", "SQRT", "SQRTPI", "SUBTOTAL", "SUM", "SUMIF", "SUMIFS", "SUMPRODUCT", "SUMSQ", "SUMX2MY2", "SUMX2PY2", "SUMXMY2", "TAN", "TANH", "TRUNC"],
					this._statisticalNames = ["AVEDEV", "AVERAGE", "AVERAGEA", "AVERAGEIF", "AVERAGEIFS", "BETADIST", "BETAINV", "BINOMDIST", "CHIDIST", "CHIINV", "CHITEST", "CONFIDENCE", "CORREL", "COUNT", "COUNTA", "COUNTBLANK", "COUNTIF", "COUNTIFS", "COVAR", "CRITBINOM", "DEVSQ", "EXPONDIST", "FDIST", "FINV", "FISHER", "FISHERINV", "FORECAST", "FREQUENCY", "FTEST", "GAMMADIST", "GAMMAINV", "GAMMALN", "GEOMEAN", "GROWTH", "HARMEAN", "HYPGEOMDIST", "INTERCEPT", "KURT", "LARGE", "LINEST", "LOGEST", "LOGINV", "LOGNORMDIST", "MAX", "MAXA", "MEDIAN", "MIN", "MINA", "MODE", "NEGBINOMDIST", "NORMDIST", "NORMINV", "NORMSDIST", "NORMSINV", "PEARSON", "PERCENTILE", "PERCENTRANK", "PERMUT", "POISSON", "PROB", "QUARTILE", "RANK", "RSQ", "SKEW", "SLOPE", "SMALL", "STANDARDIZE", "STDEV", "STDEVA", "STDEVP", "STDEVPA", "STEYX", "TDIST", "TINV", "TREND", "TRIMMEAN", "TTEST", "VAR", "VARA", "VARP", "VARPA", "WEIBULL", "ZTEST"],
					this._textNames = ["CHAR", "CLEAN", "CODE", "CONCATENATE", "DOLLAR", "EXACT", "FIND", "FIXED", "LEFT", "LEN", "LOWER", "MID", "PROPER", "REPLACE", "REPT", "RIGHT", "SEARCH", "SUBSTITUTE", "T", "TEXT", "TRIM", "UPPER", "VALUE"],
					this._functionCategory = t.res.insertFunctionDialog.functionCategorys.split(","),
					this._allNames = [],
					this._allNames = this._allNames.concat(this._databaseNames, this._dateAndTimeNames, this._engineeringNames, this._financialNames, this._informationNames, this._logicalNames, this._lookupAndReferenceNames, this._mathAndTrigonometryNames, this._statisticalNames, this._textNames),
					this._allNames.sort();
					var u = this._element.find(".function-list-select"),
					r = u[0].options,
					i = this._element.find(".formula"),
					s = this._element.find(".function-category-select"),
					h = s[0].options;
					for (s.empty(), e = 0; e < this._functionCategory.length; e++)
						h.add(new Option(this._functionCategory[e]));
					u.change(function (t) {
						for (var c = t.target || t.srcElement, s = c, h = f.loadXML("../resources/FormulaBar_FunctionInformation.xml"), r = h.getElementsByTagName("Function"), o, e, u, i = 0; i < r.length; i++) {
							u = r[i].attributes[0].value;
							if (u === s.value) {
								o = r[i].attributes[1].value,
								e = r[i].attributes[2].value;
								break
							}
						}
						n._element.find(".function-name").text(s.value + "(" + o + ")"),
						n._element.find(".function-description").text(e)
					}),
					u.dblclick(function (t) {
						var e = t.target || t.srcElement,
						f = e,
						r,
						u;
						i.prop("value") === "" ? (i.prop("value", f.value + "()"), i.attr("caretIndex", i.prop("value").length - 1), n._element.find(".formula").focus(), i[0].selectionStart = parseInt(i.attr("caretIndex")), i[0].selectionEnd = parseInt(i.attr("caretIndex"))) : (r = i.prop("value"), u = parseInt(i.attr("caretIndex")), r = r.substring(0, u) + f.value + "()" + r.substring(u, r.length), i.prop("value", r), i.attr("caretIndex", u + f.value.length + 1), n._element.find(".formula").focus(), i[0].selectionStart = parseInt(i.attr("caretIndex")), i[0].selectionEnd = parseInt(i.attr("caretIndex")))
					}),
					o = function () {
						var n = i[0].selectionStart;
						i.attr("caretIndex", n)
					},
					i.select(o),
					i.click(o),
					i.keyup(o),
					s.change(function (t) {
						var e = t.target || t.srcElement,
						f = e,
						i;
						u.empty();
						if (f.value === n._functionCategory[0])
							for (i = 0; i < n._allNames.length; i++)
								r.add(new Option(n._allNames[i]));
						else if (f.value === n._functionCategory[1])
							for (i = 0; i < n._databaseNames.length; i++)
								r.add(new Option(n._databaseNames[i]));
						else if (f.value === n._functionCategory[2])
							for (i = 0; i < n._dateAndTimeNames.length; i++)
								r.add(new Option(n._dateAndTimeNames[i]));
						else if (f.value === n._functionCategory[3])
							for (i = 0; i < n._engineeringNames.length; i++)
								r.add(new Option(n._engineeringNames[i]));
						else if (f.value === n._functionCategory[4])
							for (i = 0; i < n._financialNames.length; i++)
								r.add(new Option(n._financialNames[i]));
						else if (f.value === n._functionCategory[5])
							for (i = 0; i < n._informationNames.length; i++)
								r.add(new Option(n._informationNames[i]));
						else if (f.value === n._functionCategory[6])
							for (i = 0; i < n._logicalNames.length; i++)
								r.add(new Option(n._logicalNames[i]));
						else if (f.value === n._functionCategory[7])
							for (i = 0; i < n._lookupAndReferenceNames.length; i++)
								r.add(new Option(n._lookupAndReferenceNames[i]));
						else if (f.value === n._functionCategory[8])
							for (i = 0; i < n._mathAndTrigonometryNames.length; i++)
								r.add(new Option(n._mathAndTrigonometryNames[i]));
						else if (f.value === n._functionCategory[9])
							for (i = 0; i < n._statisticalNames.length; i++)
								r.add(new Option(n._statisticalNames[i]));
						else if (f.value === n._functionCategory[10])
							for (i = 0; i < n._textNames.length; i++)
								r.add(new Option(n._textNames[i]));
						$(r[0]).prop("selected", !0),
						u.trigger("change")
					})
				},
				i.prototype._beforeOpen = function () {
					var h = $("#formulaBarText"),
					f = h.text(),
					s = h[0].selectionStart,
					o,
					i,
					e,
					c,
					u;
					for (f !== undefined && (f.substring(0, 1) === "=" ? (o = f.substring(1, f.length), i = s - 1) : i = s), e = this._element.find(".function-list-select"), c = e[0].options, e.empty(), u = 0; u < this._allNames.length; u++)
						c.add(new Option(this._allNames[u]));
					this._element.find(".function-category-select").prop("selectedIndex", 0),
					this._element.find(".function-list-select").prop("selectedIndex", 0),
					this._element.find(".function-list-select").trigger("change");
					var l = t.wrapper.spread.getActiveSheet().getActiveRowIndex(),
					a = t.wrapper.spread.getActiveSheet().getActiveColumnIndex(),
					r = t.wrapper.spread.getActiveSheet().getCell(l, a).formula(),
					n = this._element.find(".formula");
					o !== undefined ? (n.prop("value", o), n.attr("caretIndex", i), n[0].selectionStart = i, n[0].selectionEnd = i) : r !== undefined && r !== null ? (n.prop("value", r), n.attr("caretIndex", r.length), n[0].selectionStart = parseInt(n.attr("caretIndex")), n[0].selectionEnd = parseInt(n.attr("caretIndex"))) : (n.prop("value", ""), n.attr("caretIndex", 0))
				},
				i
			}
			(t.BaseDialog),
			t.InsertFunctionDialog = k,
			at = function (i) {
				function r() {
					var r = this,
					u = {
						resizable : !1,
						modal : !0,
						title : t.res.buttonCellTypeDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var o = r._element.find(".margin-left"),
									s = r._element.find(".margin-top"),
									h = r._element.find(".margin-right"),
									c = r._element.find(".margin-bottom"),
									u = r._element.find(".button-text"),
									e = r._element.find(".color-span"),
									i = new n.ButtonCellType;
									o.val() !== "" && i.marginLeft(parseFloat(o.val())),
									s.val() !== "" && i.marginTop(parseFloat(s.val())),
									h.val() !== "" && i.marginRight(parseFloat(h.val())),
									c.val() !== "" && i.marginBottom(parseFloat(c.val())),
									u.val() !== "" && i.text(u.val()),
									e.css("background-color") !== f._getTransparentColorString() && i.buttonBackColor(e.css("background-color")),
									t.actions.doAction("setCellType", t.wrapper.spread, i),
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".button-celltype-dialog", u)
				}
				return __extends(r, i),
				r.prototype._init = function () {
					var n = this;
					$(".button-backcolor-color-picker").colorpicker({
						valueChanged : function (t, i) {
							i.color === undefined ? n._element.find(".color-span").css("background-color", "") : n._element.find(".color-span").css("background-color", i.color)
						},
						choosedColor : function (t, i) {
							n._element.find(".color-frame").comboframe("close")
						},
						openColorDialog : function (t, i) {
							n._element.find(".color-frame").comboframe("close")
						}
					}),
					this._element.find(".color-frame").comboframe()
				},
				r.prototype._beforeOpen = function () {
					var h = this._element.find(".margin-left"),
					c = this._element.find(".margin-top"),
					o = this._element.find(".margin-right"),
					l = this._element.find(".margin-bottom"),
					a = this._element.find(".button-text"),
					u = this._element.find(".color-span"),
					f = $(".button-backcolor-color-picker"),
					r;
					$(".button-backcolor-color-picker").colorpicker("option", "themeColors", t.wrapper.getThemeColors());
					var y = t.wrapper.spread.getActiveSheet().getActiveRowIndex(),
					v = t.wrapper.spread.getActiveSheet().getActiveColumnIndex(),
					s = t.wrapper.spread.getActiveSheet().getCell(y, v),
					e = s.cellType(),
					i;
					i = e instanceof n.ButtonCellType ? e : new n.ButtonCellType,
					h.val(i._marginLeft),
					c.val(i._marginTop),
					o.val(i._marginRight),
					l.val(i._marginBottom),
					a.val(i._text),
					i._buttonBackColor ? (r = t.ColorHelper.parse(i._buttonBackColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.colorpicker("option", "selectedItem", r), u.css("background-color", r.color)) : (f.colorpicker("option", "selectedItem", null), u.css("background-color", "transparent"))
				},
				r
			}
			(t.BaseDialog),
			t.ButtonCellTypeDialog = at,
			ct = function (i) {
				function r() {
					var r = this,
					u = {
						resizable : !1,
						modal : !0,
						title : t.res.checkBoxCellTypeDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var u = r._element.find(".text-true"),
									e = r._element.find(".text-indeterminate"),
									o = r._element.find(".text-false"),
									s = r._element.find(".text-align"),
									f = r._element.find(".caption"),
									h = r._element.find(".isThreeState"),
									i = new n.CheckBoxCellType;
									u.val() !== "" && i.textTrue(u.val()),
									e.val() !== "" && i.textIndeterminate(e.val()),
									o.val() !== "" && i.textFalse(o.val()),
									f.val() !== "" && i.caption(f.val()),
									i.textAlign(parseInt(s.val())),
									i.isThreeState(h.prop("checked")),
									t.actions.doAction("setCellType", t.wrapper.spread, i),
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".checkbox-celltype-dialog", u)
				}
				return __extends(r, i),
				r.prototype._init = function () {
					var i = this._element.find(".text-align"),
					n = i[0].options;
					n.add(new Option(t.res.checkBoxCellTypeDialog.checkBoxTextAlign.top, "0")),
					n.add(new Option(t.res.checkBoxCellTypeDialog.checkBoxTextAlign.bottom, "1")),
					n.add(new Option(t.res.checkBoxCellTypeDialog.checkBoxTextAlign.left, "2")),
					n.add(new Option(t.res.checkBoxCellTypeDialog.checkBoxTextAlign.right, "3"))
				},
				r.prototype._beforeOpen = function () {
					var o = this._element.find(".text-true"),
					l = this._element.find(".text-indeterminate"),
					c = this._element.find(".text-false"),
					r = this._element.find(".text-align"),
					h = r[0].options,
					a = this._element.find(".caption"),
					v = this._element.find(".isThreeState"),
					y = t.wrapper.spread.getActiveSheet(),
					e = t.wrapper.spread.getActiveSheet().getActiveRowIndex(),
					f = t.wrapper.spread.getActiveSheet().getActiveColumnIndex(),
					s = t.wrapper.spread.getActiveSheet().getCell(e, f),
					u = s.cellType(),
					i;
					i = u instanceof n.CheckBoxCellType ? u : new n.CheckBoxCellType,
					o.val(i.textTrue()),
					l.val(i.textIndeterminate()),
					c.val(i.textFalse()),
					a.val(i.caption()),
					$(h[parseInt(i.textAlign())]).prop("selected", !0),
					r.prop("selected", i.textAlign()),
					v.prop("checked", i.isThreeState())
				},
				r
			}
			(t.BaseDialog),
			t.CheckBoxCellTypeDialog = ct,
			l = function (i) {
				function r() {
					var r = this,
					u = {
						resizable : !1,
						width : "auto",
						modal : !0,
						title : t.res.comboBoxCellTypeDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var s = r._element.find(".text"),
									h = r._element.find(".value"),
									o,
									i,
									f,
									e,
									u;
									r.selectedIndex !== -1 && r.selectedIndex < r.items.length && (r.items[r.selectedIndex] = {
											text : s.val(),
											value : h.val()
										}),
									o = r._element.find(".editor-valuetype"),
									i = new n.ComboBoxCellType,
									i.editorValueType(parseInt(o.val())),
									f = r._element.find("#combox-editable"),
									i.editable(f.prop("checked")),
									e = r._element.find(".combo-item-height"),
									u = parseFloat(e.val()),
									isNaN(u) || i.itemHeight(u),
									r.items !== null && r.items !== undefined && i.items(r.items),
									t.actions.doAction("setCellType", t.wrapper.spread, i),
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".combobox-celltype-dialog", u)
				}
				return __extends(r, i),
				r.prototype._init = function () {
					var n = this,
					h,
					f;
					this.selectedIndex = -1,
					h = this._element.find(".editor-valuetype"),
					f = h[0].options,
					f.add(new Option(t.res.comboBoxCellTypeDialog.editorValueType.text, "0")),
					f.add(new Option(t.res.comboBoxCellTypeDialog.editorValueType.index, "1")),
					f.add(new Option(t.res.comboBoxCellTypeDialog.editorValueType.value, "2"));
					var e = this._element.find(".items"),
					i = e[0].options,
					r = this._element.find(".text"),
					u = this._element.find(".value"),
					s = this._element.find(".add-button"),
					o = this._element.find(".remove-button");
					s.button(),
					o.button(),
					s.click(function () {
						i[i.length] = new Option("ListItem" + i.length.toString()),
						n.items === null && (n.items = []),
						n.items.push({
							text : "",
							value : ""
						}),
						r.removeAttr("disabled"),
						u.removeAttr("disabled"),
						e.trigger("change", {
							selectMoveTo : n.items.length - 1,
							action : "add"
						})
					}),
					o.click(function () {
						i.remove(n.selectedIndex),
						n.items.splice(n.selectedIndex, 1);
						var t;
						n.items.length > n.selectedIndex ? t = n.selectedIndex : n.items.length > 0 ? t = n.selectedIndex - 1 : (t = -1, r.val(""), u.val(""), r.attr("disabled", !0), u.attr("disabled", !0)),
						e.trigger("change", {
							selectMoveTo : t,
							action : "remove"
						})
					}),
					e.change(function (t, f) {
						var o = t.target || t.srcElement,
						s = o,
						e;
						(f === undefined || f.action === "add") && n.selectedIndex !== -1 && n.selectedIndex < n.items.length && (n.items[n.selectedIndex] = {
								text : r.val(),
								value : u.val()
							}),
						f === undefined ? (e = s.value.substring(8), n.selectedIndex = parseInt(e)) : n.selectedIndex = f.selectMoveTo,
						n.selectedIndex !== -1 && ($(i[n.selectedIndex]).prop("selected", !0), r.val(n.items[n.selectedIndex].text), u.val(n.items[n.selectedIndex].value))
					})
				},
				r.prototype._beforeOpen = function () {
					var l = this._element.find(".editor-valuetype"),
					v = l[0].options,
					s = this._element.find(".items"),
					r = s[0].options,
					f = this._element.find(".text"),
					u = this._element.find(".value"),
					a = this._element.find(".combo-item-height"),
					y = this._element.find("#combox-editable"),
					w = t.wrapper.spread.getActiveSheet(),
					p = t.wrapper.spread.getActiveSheet().getActiveRowIndex(),
					h = t.wrapper.spread.getActiveSheet().getActiveColumnIndex(),
					c = t.wrapper.spread.getActiveSheet().getCell(p, h),
					o = c.cellType(),
					i,
					e;
					i = o instanceof n.ComboBoxCellType ? o : new n.ComboBoxCellType,
					a.val(i.itemHeight()),
					y.prop("checked", i.editable()),
					$(v[parseInt(i.editorValueType())]).prop("selected", !0),
					this.items = i.items(),
					s.empty();
					if (this.items !== null && this.items !== undefined && this.items.length !== 0) {
						for (e = 0; e < this.items.length; e++)
							r[r.length] = new Option("ListItem" + r.length.toString());
						f.removeAttr("disabled"),
						u.removeAttr("disabled"),
						$(r[0]).prop("selected", !0),
						f.val(this.items[0].text),
						u.val(this.items[0].value),
						this.selectedIndex = 0
					} else
						f.val(""), u.val(""), f.attr("disabled", !0), u.attr("disabled", !0)
				},
				r
			}
			(t.BaseDialog),
			t.ComboBoxCellTypeDialog = l,
			y = function (i) {
				function r() {
					var r = this,
					u = {
						resizable : !1,
						modal : !0,
						title : t.res.hyperLinkCellTypeDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var e = r._element.find(".text"),
									o = r._element.find(".linktooltip"),
									s = r._element.find(".link-color-span"),
									u = r._element.find(".visitedlink-color-span"),
									i = new n.HyperLinkCellType;
									e.val() !== "" && i.text(e.val()),
									o.val() !== "" && i.linkToolTip(o.val()),
									s.css("background-color") !== f._getTransparentColorString() && i.linkColor(s.css("background-color")),
									u.css("background-color") !== f._getTransparentColorString() && i.visitedLinkColor(u.css("background-color")),
									t.actions.doAction("setCellType", t.wrapper.spread, i),
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									r.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".hyperLink-celltype-dialog", u)
				}
				return __extends(r, i),
				r.prototype._init = function () {
					var n = this;
					$(".link-color-picker").colorpicker({
						valueChanged : function (t, i) {
							i.color === undefined ? n._element.find(".link-color-span").css("background-color", "") : n._element.find(".link-color-span").css("background-color", i.color)
						},
						choosedColor : function (t, i) {
							n._element.find(".link-color-frame").comboframe("close")
						},
						openColorDialog : function (t, i) {
							n._element.find(".link-color-frame").comboframe("close")
						}
					}),
					this._element.find(".link-color-frame").comboframe(),
					$(".visitedlink-color-picker").colorpicker({
						valueChanged : function (t, i) {
							i.color === undefined ? n._element.find(".visitedlink-color-span").css("background-color", "") : n._element.find(".visitedlink-color-span").css("background-color", i.color)
						},
						choosedColor : function (t, i) {
							n._element.find(".visitedlink-color-frame").comboframe("close")
						},
						openColorDialog : function (t, i) {
							n._element.find(".visitedlink-color-frame").comboframe("close")
						}
					}),
					this._element.find(".visitedlink-color-frame").comboframe()
				},
				r.prototype._beforeOpen = function () {
					var h = this._element.find(".text"),
					c = this._element.find(".linktooltip"),
					o = this._element.find(".link-color-span"),
					f = $(".link-color-picker"),
					s = this._element.find(".visitedlink-color-span"),
					u = $(".visitedlink-color-picker"),
					r;
					f.colorpicker("option", "themeColors", t.wrapper.getThemeColors()),
					u.colorpicker("option", "themeColors", t.wrapper.getThemeColors());
					var l = t.wrapper.spread.getActiveSheet().getActiveRowIndex(),
					a = t.wrapper.spread.getActiveSheet().getActiveColumnIndex(),
					v = t.wrapper.spread.getActiveSheet().getCell(l, a),
					e = v.cellType(),
					i;
					i = e instanceof n.HyperLinkCellType ? e : new n.HyperLinkCellType,
					c.val(i._linkToolTip),
					h.val(i._text),
					i._linkColor ? (r = t.ColorHelper.parse(i._linkColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.colorpicker("option", "selectedItem", r), o.css("background-color", r.color)) : (f.colorpicker("option", "selectedItem", null), o.css("background-color", "transparent")),
					i._visitedLinkColor ? (r = t.ColorHelper.parse(i._visitedLinkColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), u.colorpicker("option", "selectedItem", r), s.css("background-color", r.color)) : (u.colorpicker("option", "selectedItem", null), s.css("background-color", "transparent"))
				},
				r
			}
			(t.BaseDialog),
			t.HyperLinkCellTypeDialog = y,
			v = function (i) {
				function r() {
					var n = this,
					r = {
						width : 740,
						minWidth : 740,
						maxWidth : 740,
						height : 705,
						minHeight : 705,
						maxHeight : 705,
						resizable : !1,
						modal : !0,
						title : t.res.headerCellsDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									n._saveChanges(n._sheetArea),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".header-cells-dialog", r)
				}
				return __extends(r, i),
				r.prototype._init = function () {
					var r,
					u,
					f,
					e,
					i,
					s;
					for (this._hasError = !1, this._element.find(".font-popup").button(), this._settingTab = this._element.find(".header-tab").tabs(), this._rowSpread = new n.Spread(this._element.find("#rowHeaderTab")[0], {
								sheetCount : 1
							}), this._colSpread = new n.Spread(this._element.find("#columnHeaderTab")[0], {
								sheetCount : 1
							}), r = this._rowSpread, u = this._colSpread, r.sheets[0].selectionPolicy(1), u.sheets[0].selectionPolicy(1), r.tabStripVisible(!1), u.tabStripVisible(!1), f = this._element.find(".hAlign"), e = this._element.find(".vAlign"), i = 0; i < 4; i++)
						f.append($("<option></option>").val(i).text(t.res.headerCellsDialog[n.HorizontalAlign[i]]));
					for (i = 0; i < 3; i++)
						e.append($("<option></option>").val(i).text(t.res.headerCellsDialog[n.VerticalAlign[i]]));
					this._addEvents(r, u),
					this._element.find(".backColor-colorframe").comboframe(),
					this._element.find(".foreColor-colorframe").comboframe(),
					this._element.find(".borderBottom-borderframe").comboframe(),
					this._element.find(".borderLeft-borderframe").comboframe(),
					this._element.find(".borderRight-borderframe").comboframe(),
					this._element.find(".borderTop-borderframe").comboframe();
					var c = $(".borderBottom-borderpicker"),
					l = $(".borderLeft-borderpicker"),
					h = $(".borderRight-borderpicker"),
					o = $(".borderTop-borderpicker");
					c.borderpicker("option", "colorOptions", {
						showMoreColors : !1,
						showNoFill : !1
					}),
					l.borderpicker("option", "colorOptions", {
						showMoreColors : !1,
						showNoFill : !1
					}),
					h.borderpicker("option", "colorOptions", {
						showMoreColors : !1,
						showNoFill : !1
					}),
					o.borderpicker("option", "colorOptions", {
						showMoreColors : !1,
						showNoFill : !1
					}),
					s = this,
					this._element.data("ui-dialog")._focusTabbable = function () {}

				},
				r.prototype._beforeOpen = function (n) {
					var i = this,
					f,
					u,
					r,
					o,
					e;
					this._initialized || (this._initialized = !0, this._element.find(".button-set").gcuiribbon({
							click : function (n, r) {
								var o,
								f,
								e,
								u;
								switch (r.commandName) {
								case "merge":
									t.actions.doAction("mergeCells", i._currentSpread);
									break;
								case "unmerge":
									t.actions.doAction("unmergeCells", i._currentSpread);
									break;
								case "insertrows":
									t.actions.doAction("insertRows", i._currentSpread);
									break;
								case "addrows":
									for (f = new t.spreadActions.InsertAndDeleteBase(i._currentSpread), o = f.getSortedRowSelections(), u = 0; u < o.length; u++)
										i._currentSpread.sheets[0].addRows(i._currentSpread.sheets[0].getRowCount(), o[u].rowCount);
									break;
								case "deleterows":
									t.actions.doAction("deleteRows", i._currentSpread);
									break;
								case "insertcolumns":
									t.actions.doAction("insertColumns", i._currentSpread);
									break;
								case "addcolumns":
									for (f = new t.spreadActions.InsertAndDeleteBase(i._currentSpread), e = f.getSortedColumnSelections(), u = 0; u < e.length; u++)
										i._currentSpread.sheets[0].addColumns(i._currentSpread.sheets[0].getColumnCount(), e[u].colCount);
									break;
								case "deletecolumns":
									t.actions.doAction("deleteColumns", i._currentSpread);
									break;
								case "clear":
									t.actions.doAction("clearAll", i._currentSpread);
									break
								}
							}
						})),
					this._element.find(".gcui-ribbon-list").removeClass("gcui-gcuitabs-hide"),
					u = this._rowSpread,
					r = this._colSpread;
					switch (n[0]) {
					case "row":
						f = 0,
						this._currentSpread = u,
						this._sheetArea = 2,
						this._setActiveCell("row"),
						t.util.raiseSheetSelectionChanged(u.sheets[0]),
						setTimeout(function () {
							u.refresh()
						}, 0);
						break;
					case "col":
						f = 1,
						this._currentSpread = r,
						this._sheetArea = 1,
						this._setActiveCell("col"),
						t.util.raiseSheetSelectionChanged(r.sheets[0]),
						setTimeout(function () {
							r.refresh()
						}, 0);
						break
					}
					this._switchLayout(n[0]),
					this._settingTab.tabs("option", "active", f),
					this._synColRowCount(u, r),
					this._loadToSheet(1, r),
					this._loadToSheet(2, u),
					this._setActiveCell(n[0]),
					this._synToPropertyGrid("cell"),
					o = $(".backColor-colorpicker"),
					e = $(".foreColor-colorpicker"),
					o.colorpicker("option", "themeColors", t.wrapper.getThemeColors()),
					e.colorpicker("option", "themeColors", t.wrapper.getThemeColors())
				},
				r.prototype._synColRowCount = function (n, i, r) {
					if (r) {
						var h = n.sheets[0].getColumnCount(3),
						s = i.sheets[0].getColumnCount(3),
						l = n.sheets[0].getRowCount(3),
						c = i.sheets[0].getRowCount(3);
						t.wrapper.spread.getActiveSheet().setColumnCount(h, 2),
						t.wrapper.spread.getActiveSheet().setRowCount(l, 2),
						t.wrapper.spread.getActiveSheet().setColumnCount(s, 1),
						t.wrapper.spread.getActiveSheet().setRowCount(c, 1)
					} else {
						var f = t.wrapper.spread.getActiveSheet().getColumnCount(2),
						u = t.wrapper.spread.getActiveSheet().getColumnCount(1),
						o = t.wrapper.spread.getActiveSheet().getRowCount(2),
						e = t.wrapper.spread.getActiveSheet().getRowCount(1);
						n.sheets[0].setColumnCount(f),
						n.sheets[0].setRowCount(o),
						i.sheets[0].setColumnCount(u),
						i.sheets[0].setRowCount(e)
					}
				},
				r.prototype._setActiveCell = function (n) {
					var r = 0,
					i = 0;
					switch (n) {
					case "row":
						r = t.wrapper.spread.getActiveSheet().getActiveRowIndex();
						break;
					case "col":
						i = t.wrapper.spread.getActiveSheet().getActiveColumnIndex();
						break
					}
					this._currentSpread.sheets[0].setActiveCell(r, i)
				},
				r.prototype._synToPropertyGrid = function (i) {
					var e = this._currentSpread.sheets[0],
					bt = e.getActiveColumnIndex(),
					wt = e.getActiveRowIndex(),
					o = e.getCell(wt, bt),
					ot = e.getValue(o.row, o.col, 3),
					at = e.getColumnWidth(o.col, 3),
					lt = e.getRowHeight(o.row, 3),
					yt = e.getColumnVisible(o.col, 3),
					vt = e.getRowVisible(o.row, 3),
					ct = e.getColumnResizable(o.col, 3),
					st = e.getRowResizable(o.row, 3),
					kt = this._element.find(".height"),
					et = this._element.find(".value"),
					ut = this._element.find(".visible"),
					pt = this._element.find(".width"),
					ft = this._element.find(".resizable"),
					r,
					s,
					u,
					f;
					kt.val(lt),
					ot !== null ? et.val(ot.toString()) : et.val(""),
					pt.val(at);
					switch (i) {
					case "row":
						ft.prop("checked", st),
						ut.prop("checked", vt),
						r = e.getStyle(o.row, -1, 3);
						break;
					case "col":
						ft.prop("checked", ct),
						ut.prop("checked", yt),
						r = e.getStyle(-1, o.col, 3);
						break;
					case "cell":
						r = e.getStyle(o.row, o.col, 3);
						break;
					case "sheet":
						r = e.getStyle(-1, -1, 3);
						break
					}
					var it = this._element.find(".backColor-colorspan"),
					rt = $(".backColor-colorpicker"),
					tt = this._element.find(".foreColor-colorspan"),
					v = $(".foreColor-colorpicker"),
					a = this._element.find(".borderBottom-borderspan"),
					gt = $(".borderBottom-borderpicker"),
					y = this._element.find(".borderLeft-borderspan"),
					ni = $(".borderLeft-borderpicker"),
					h = this._element.find(".borderRight-borderspan"),
					ii = $(".borderRight-borderpicker"),
					c = this._element.find(".borderTop-borderspan"),
					ti = $(".borderTop-borderpicker"),
					l = this._element.find(".font"),
					p = this._element.find(".formatter"),
					dt = this._element.find(".hAlign"),
					d = this._element.find(".locked"),
					g = this._element.find(".shrinkToFit"),
					nt = this._element.find(".textIndent"),
					ht = this._element.find(".vAlign"),
					w = this._element.find(".wordWrap"),
					b = dt[0].options,
					k = ht[0].options;
					r !== null && r !== undefined ? (r.backColor !== undefined ? (s = t.ColorHelper.parse(r.backColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), rt.colorpicker("option", "selectedItem", s), it.css("background-color", s.color)) : (rt.colorpicker("option", "selectedItem", null), it.css("background-color", "transparent")), r.foreColor !== undefined ? (s = t.ColorHelper.parse(r.foreColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), v.colorpicker("option", "selectedItem", s), tt.css("background-color", s.color)) : (v.colorpicker("option", "selectedItem", null), tt.css("background-color", "transparent")), r.borderBottom !== undefined ? (u = r.borderBottom, f = "", u.color !== undefined && u.color !== null && (f = u.color), u.style !== undefined && u.style !== null && (f += ";" + n.LineStyle[u.style]), a.val(f)) : a.val(""), r.borderLeft !== undefined ? (u = r.borderLeft, f = "", u.color !== undefined && u.color !== null && (f = u.color), u.style !== undefined && u.style !== null && (f += ";" + n.LineStyle[u.style]), y.val(f)) : y.val(""), r.borderRight !== undefined ? (u = r.borderRight, f = "", u.color !== undefined && u.color !== null && (f = u.color), u.style !== undefined && u.style !== null && (f += ";" + n.LineStyle[u.style]), h.val(f)) : h.val(""), r.borderTop !== undefined ? (u = r.borderTop, f = "", u.color !== undefined && u.color !== null && (f = u.color), u.style !== undefined && u.style !== null && (f += ";" + n.LineStyle[u.style]), c.val(f)) : c.val(""), r.font !== undefined ? l.val(r.font) : l.val(""), r.formatter !== undefined ? p.val(r.formatter) : p.val(""), r.textIndent !== undefined ? nt.val(r.textIndent) : nt.val(""), r.locked !== undefined ? d.prop("checked", r.locked) : d.prop("checked", !0), r.wordWrap !== undefined ? w.prop("checked", r.wordWrap) : w.prop("checked", !1), r.shrinkToFit !== undefined ? g.prop("checked", r.shrinkToFit) : g.prop("checked", !1), r.hAlign !== undefined ? $(b[parseInt(r.hAlign)]).prop("selected", !0) : $(b[3]).prop("selected", !0), r.vAlign !== undefined ? $(k[parseInt(r.vAlign)]).prop("selected", !0) : $(k[1]).prop("selected", !0)) : (rt.colorpicker("option", "selectedItem", null), it.css("background-color", "transparent"), v.colorpicker("option", "selectedItem", null), tt.css("background-color", "transparent"), a.val(""), y.val(""), h.val(""), c.val(""), l.val(""), p.val(""), nt.val(""), d.prop("checked", !0), w.prop("checked", !1), g.prop("checked", !1), $(b[3]).prop("selected", !0), $(k[1]).prop("selected", !0))
				},
				r.prototype._loadToSheet = function (n, i) {
					var e,
					s,
					o,
					r,
					f,
					u;
					e = i ? i : this._currentSpread,
					s = e.isPaintSuspended(),
					e.isPaintSuspended(!0);
					try {
						for (o = t.wrapper.spread.getActiveSheet(), r = e.sheets[0], u = 0; u < r.getRowCount(); u++)
							for (f = 0; f < r.getColumnCount(); f++)
								this._copyCell(o, r, u, f, n, 3);
						for (f = 0; f < r.getColumnCount(); f++)
							this._copyCell(o, r, -1, f, n, 3);
						for (u = 0; u < r.getRowCount(); u++)
							this._copyCell(o, r, u, -1, n, 3);
						this._copyCell(o, r, -1, -1, n, 3),
						this._copySheet(o, r, n, 3)
					} catch (h) {
						e.isPaintSuspended(s)
					}
					e.isPaintSuspended(s)
				},
				r.prototype._saveChanges = function (n) {
					var s,
					r,
					i;
					if (this._hasError) {
						u.show(t.res.headerCellsDialog.exception, t.res.title, 3, 0);
						return
					}
					s = t.wrapper.spread.isPaintSuspended(),
					t.wrapper.spread.isPaintSuspended(!0);
					try {
						var h = this._rowSpread,
						c = this._colSpread,
						o = this._rowSpread.sheets[0],
						e = this._colSpread.sheets[0],
						f = t.wrapper.spread.getActiveSheet();
						for (this._synColRowCount(h, c, !0), i = 0; i < o.getRowCount(); i++)
							for (r = 0; r < o.getColumnCount(); r++)
								this._copyCell(o, f, i, r, 3, 2);
						for (i = 0; i < e.getRowCount(); i++)
							for (r = 0; r < e.getColumnCount(); r++)
								this._copyCell(e, f, i, r, 3, 1);
						for (r = 0; r < o.getColumnCount(); r++)
							this._copyCell(o, f, -1, r, 3, 2);
						for (r = 0; r < e.getColumnCount(); r++)
							this._copyCell(e, f, -1, r, 3, 1);
						for (i = 0; i < o.getRowCount(); i++)
							this._copyCell(o, f, i, -1, 3, 2);
						for (i = 0; i < e.getRowCount(); i++)
							this._copyCell(e, f, i, -1, 3, 1);
						this._copyCell(o, f, -1, -1, 3, 2),
						this._copyCell(e, f, -1, -1, 3, 1),
						this._copySheet(o, f, 3, 2),
						this._copySheet(e, f, 3, 1)
					} catch (l) {
						t.wrapper.spread.isPaintSuspended(s)
					}
					t.wrapper.spread.isPaintSuspended(s),
					this.close()
				},
				r.prototype._copyCell = function (n, t, i, r, u, f) {
					var y = n.getStyle(i, r, u),
					s,
					a,
					e,
					o,
					v,
					h,
					c,
					l;
					t.setStyle(i, r, y, f),
					s = n.getValue(i, r, u),
					a = t.getValue(i, r, f),
					s !== a && t.setValue(i, r, s, f),
					e = n.getColumnWidth(r, u),
					e === undefined || e < 0 || t.setColumnWidth(r, e, f),
					o = n.getRowHeight(i, u),
					o === undefined || o < 0 || t.setRowHeight(i, o, f),
					v = n.getColumnVisible(r, u),
					t.setColumnVisible(r, v, f),
					h = n.getRowVisible(i, u),
					t.setRowVisible(i, h, f),
					c = n.getColumnResizable(r, u),
					t.setColumnResizable(r, c, f),
					l = n.getRowResizable(i, u),
					t.setRowResizable(i, l, f)
				},
				r.prototype._copySheet = function (n, t, i, r) {
					for (var f = t.getSpans(undefined, r), u = 0; u < f.length; u++)
						t.removeSpan(f[u].row, f[u].col, r);
					f = n.getSpans(undefined, i);
					if (f.length !== 0)
						for (u = 0; u < f.length; u++)
							t.addSpan(f[u].row, f[u].col, f[u].rowCount, f[u].colCount, r)
				},
				r.prototype._switchLayout = function (n) {
					var r = this._element.find(".property-grid-container"),
					t = this._element.find(".property-grid"),
					i = this._element.find(".header-tab");
					switch (n) {
					case "row":
						i.addClass("rowheader-sheet"),
						i.removeClass("columnheader-sheet"),
						t.addClass("rowheader-porpertygird"),
						t.removeClass("columnheader-porpertygird"),
						r.removeClass("columnheader-property-grid-container");
						break;
					case "col":
						i.addClass("columnheader-sheet"),
						i.removeClass("rowheader-sheet"),
						t.addClass("columnheader-porpertygird"),
						t.removeClass("rowheader-porpertygird"),
						r.addClass("columnheader-property-grid-container");
						break
					}
				},
				r.prototype._setBorders = function (i) {
					var e = new n.Style,
					r,
					f,
					u;
					switch (i) {
					case "bottom":
						r = $(".borderBottom-borderspan").val();
						break;
					case "top":
						r = $(".borderTop-borderspan").val();
						break;
					case "left":
						r = $(".borderLeft-borderspan").val();
						break;
					case "right":
						r = $(".borderRight-borderspan").val();
						break
					}
					f = r.split(";")[0],
					u = r.split(";")[1];
					switch (i) {
					case "bottom":
						e.borderBottom = new n.LineBorder(f, n.LineStyle[u]);
						break;
					case "top":
						e.borderTop = new n.LineBorder(f, n.LineStyle[u]);
						break;
					case "left":
						e.borderLeft = new n.LineBorder(f, n.LineStyle[u]);
						break;
					case "right":
						e.borderRight = new n.LineBorder(f, n.LineStyle[u]);
						break
					}
					t.actions.doAction("setStyle", this._currentSpread, e)
				},
				r.prototype._addEvents = function (i, r) {
					var u = this,
					yt = this._element.find(".backColor-colorspan"),
					at = $(".backColor-colorpicker"),
					vt = this._element.find(".foreColor-colorspan"),
					lt = $(".foreColor-colorpicker"),
					rt = this._element.find(".borderBottom-borderspan"),
					b = $(".borderBottom-borderpicker"),
					g = this._element.find(".borderLeft-borderspan"),
					d = $(".borderLeft-borderpicker"),
					ot = this._element.find(".borderRight-borderspan"),
					k = $(".borderRight-borderpicker"),
					et = this._element.find(".borderTop-borderspan"),
					y = $(".borderTop-borderpicker"),
					a = this._element.find(".font"),
					tt = this._element.find(".formatter"),
					ft = this._element.find(".hAlign"),
					ct = this._element.find(".locked"),
					ht = this._element.find(".shrinkToFit"),
					e = this._element.find(".textIndent"),
					st = this._element.find(".vAlign"),
					ut = this._element.find(".wordWrap"),
					o = this._element.find(".height"),
					nt = this._element.find(".value"),
					v = this._element.find(".visible"),
					s = this._element.find(".width"),
					p = this._element.find(".resizable"),
					f = this,
					c,
					l,
					it,
					w;
					at.colorpicker({
						valueChanged : function (i, r) {
							if (r.color === undefined)
								f._element.find(".backColor-colorspan").css("background-color", ""), t.actions.doAction("setBackColor", f._currentSpread, undefined);
							else {
								f._element.find(".backColor-colorspan").css("background-color", r.color);
								var u = new n.Style;
								u.backColor = r.color,
								t.actions.doAction("setStyle", f._currentSpread, u)
							}
						},
						choosedColor : function (n, t) {
							f._element.find(".backColor-colorframe").comboframe("close")
						},
						openColorDialog : function (n, t) {
							f._element.find(".backColor-colorframe").comboframe("close")
						}
					}),
					lt.colorpicker({
						valueChanged : function (i, r) {
							if (r.color === undefined)
								f._element.find(".foreColor-colorspan").css("background-color", ""), t.actions.doAction("setForeColor", f._currentSpread, undefined);
							else {
								f._element.find(".foreColor-colorspan").css("background-color", r.color);
								var u = new n.Style;
								u.foreColor = r.color,
								t.actions.doAction("setStyle", f._currentSpread, u)
							}
						},
						choosedColor : function (n, t) {
							f._element.find(".foreColor-colorframe").comboframe("close")
						},
						openColorDialog : function (n, t) {
							f._element.find(".foreColor-colorframe").comboframe("close")
						}
					}),
					b.borderpicker({
						colorChanged : function (t, i) {
							rt.val(i.color + ";" + n.LineStyle[b.borderpicker("option", "lineStyle")]),
							f._setBorders("bottom")
						},
						lineStyleChanged : function (t, i) {
							rt.val(b.borderpicker("option", "borderColor").color + ";" + n.LineStyle[i]),
							f._setBorders("bottom")
						}
					}),
					d.borderpicker({
						colorChanged : function (t, i) {
							g.val(i.color + ";" + n.LineStyle[d.borderpicker("option", "lineStyle")]),
							f._setBorders("left")
						},
						lineStyleChanged : function (t, i) {
							g.val(d.borderpicker("option", "borderColor").color + ";" + n.LineStyle[i]),
							f._setBorders("left")
						}
					}),
					k.borderpicker({
						colorChanged : function (t, i) {
							ot.val(i.color + ";" + n.LineStyle[k.borderpicker("option", "lineStyle")]),
							f._setBorders("right")
						},
						lineStyleChanged : function (t, i) {
							ot.val(k.borderpicker("option", "borderColor").color + ";" + n.LineStyle[i]),
							f._setBorders("right")
						}
					}),
					y.borderpicker({
						colorChanged : function (t, i) {
							et.val(i.color + ";" + n.LineStyle[y.borderpicker("option", "lineStyle")]),
							f._setBorders("top")
						},
						lineStyleChanged : function (t, i) {
							et.val(y.borderpicker("option", "borderColor").color + ";" + n.LineStyle[i]),
							f._setBorders("top")
						}
					}),
					tt.change(function () {
						t.actions.doAction("setFormatter", u._currentSpread, tt.val())
					}),
					o.change(function () {
						o.removeClass("ui-state-error"),
						u._hasError = !1,
						$.isNumeric(o.val()) && parseInt(o.val()) >= 0 && parseInt(o.val()) === parseFloat(o.val()) ? t.actions.doAction("setRowsHeight", u._currentSpread, parseInt(o.val())) : (o.addClass("ui-state-error"), u._hasError = !0)
					}),
					p.change(function () {
						var n = t.spreadActions.getSelectionType(u._currentSpread);
						switch (n) {
						case 2:
							t.spreadActions.DesignerActionBase.prototype.execInSelectionsForCol(f._currentSpread.sheets[0], function (n, t) {
								f._currentSpread.sheets[0].setColumnResizable(t, p.prop("checked"), 1)
							});
							break;
						case 1:
							t.spreadActions.DesignerActionBase.prototype.execInSelectionsForRow(f._currentSpread.sheets[0], function (n, t) {
								f._currentSpread.sheets[0].setRowResizable(t, p.prop("checked"), 2)
							});
							break
						}
					}),
					nt.change(function (n) {
						var u = nt.val(),
						r = f._currentSpread.sheets[0],
						i = f._currentSpread.isPaintSuspended();
						f._currentSpread.isPaintSuspended(!0);
						try {
							t.spreadActions.DesignerActionBase.prototype.execInSelections(r, "", function (n, t, i) {
								n.getCell(t, i).text(u)
							})
						} catch (e) {
							f._currentSpread.isPaintSuspended(i)
						}
						f._currentSpread.isPaintSuspended(i)
					}),
					v.change(function () {
						var i = t.spreadActions.getSelectionType(u._currentSpread),
						n;
						switch (i) {
						case 2:
							n = v.prop("checked") == !0 ? "unHideColumns" : "hideColumns";
							break;
						case 1:
							n = v.prop("checked") == !0 ? "unHideRows" : "hideRows";
							break
						}
						t.actions.doAction(n, u._currentSpread, v.val())
					}),
					s.change(function () {
						s.removeClass("ui-state-error"),
						u._hasError = !1,
						$.isNumeric(s.val()) && parseInt(s.val()) >= 0 && parseInt(s.val()) === parseFloat(s.val()) ? t.actions.doAction("setColumnsWidth", u._currentSpread, parseInt(s.val())) : (s.addClass("ui-state-error"), u._hasError = !0)
					}),
					c = function (i) {
						var f = i.target || i.srcElement,
						r = new n.Style;
						switch (f.id) {
						case "hAlign":
							r.hAlign = parseInt(ft.val());
							break;
						case "locked":
							r.locked = ct.prop("checked");
							break;
						case "shrinkToFit":
							r.shrinkToFit = ht.prop("checked");
							break;
						case "textIndent":
							e.removeClass("ui-state-error"),
							u._hasError = !1,
							$.isNumeric(e.val()) && parseInt(e.val()) >= 0 && parseInt(e.val()) === parseFloat(e.val()) ? r.textIndent = parseInt(e.val()) : e.val() === "" ? r.textIndent = undefined : (e.addClass("ui-state-error"), u._hasError = !0);
							break;
						case "vAlign":
							r.vAlign = parseInt(st.val());
							break;
						case "wordWrap":
							r.wordWrap = ut.prop("checked");
							break;
						case "font":
							r.font = a.val();
							break
						}
						t.actions.doAction("setStyle", u._currentSpread, r)
					},
					ft.change(c),
					ct.change(c),
					ht.change(c),
					e.change(c),
					st.change(c),
					ut.change(c),
					a.change(c),
					l = function (n, i) {
						var r = t.spreadActions.getSelectionType(u._currentSpread);
						switch (r) {
						case 2:
							u._element.find(".resizable-row").removeClass("hidden"),
							u._element.find(".visible-row").removeClass("hidden"),
							u._element.find(".width-row").removeClass("hidden"),
							u._element.find(".resizable-row").addClass("visible"),
							u._element.find(".visible-row").addClass("visible"),
							u._element.find(".width-row").addClass("visible"),
							u._element.find(".height-row").removeClass("visible"),
							u._element.find(".value-row").removeClass("visible"),
							u._element.find(".height-row").addClass("hidden"),
							u._element.find(".value-row").addClass("hidden"),
							u._synToPropertyGrid("col");
							break;
						case 1:
							u._element.find(".resizable-row").removeClass("hidden"),
							u._element.find(".visible-row").removeClass("hidden"),
							u._element.find(".width-row").removeClass("visible"),
							u._element.find(".resizable-row").addClass("visible"),
							u._element.find(".visible-row").addClass("visible"),
							u._element.find(".width-row").addClass("hidden"),
							u._element.find(".height-row").removeClass("hidden"),
							u._element.find(".value-row").removeClass("visible"),
							u._element.find(".height-row").addClass("visible"),
							u._element.find(".value-row").addClass("hidden"),
							u._synToPropertyGrid("row");
							break;
						case 3:
							u._element.find(".resizable-row").removeClass("visible"),
							u._element.find(".visible-row").removeClass("visible"),
							u._element.find(".width-row").removeClass("visible"),
							u._element.find(".resizable-row").addClass("hidden"),
							u._element.find(".visible-row").addClass("hidden"),
							u._element.find(".width-row").addClass("hidden"),
							u._element.find(".height-row").removeClass("visible"),
							u._element.find(".value-row").removeClass("hidden"),
							u._element.find(".height-row").addClass("hidden"),
							u._element.find(".value-row").addClass("visible"),
							u._synToPropertyGrid("cell");
							break;
						default:
							u._element.find(".resizable-row").removeClass("visible"),
							u._element.find(".visible-row").removeClass("visible"),
							u._element.find(".width-row").removeClass("visible"),
							u._element.find(".resizable-row").addClass("hidden"),
							u._element.find(".visible-row").addClass("hidden"),
							u._element.find(".width-row").addClass("hidden"),
							u._element.find(".height-row").removeClass("visible"),
							u._element.find(".value-row").removeClass("visible"),
							u._element.find(".height-row").addClass("hidden"),
							u._element.find(".value-row").addClass("hidden"),
							u._synToPropertyGrid("sheet");
							break
						}
						o.removeClass("ui-state-error"),
						s.removeClass("ui-state-error"),
						e.removeClass("ui-state-error"),
						u._hasError = !1
					},
					i.sheets[0].bind(n.Events.SelectionChanged, l),
					r.sheets[0].bind(n.Events.SelectionChanged, l),
					it = function (n, f) {
						if (f.newPanel[0].id === "columnHeaderTab") {
							u._currentSpread = r,
							u._sheetArea = 1,
							u._switchLayout("col"),
							t.util.raiseSheetSelectionChanged(r.sheets[0]),
							setTimeout(function () {
								r.refresh()
							}, 0);
							return
						} else if (f.newPanel[0].id === "rowHeaderTab") {
							u._currentSpread = i,
							u._sheetArea = 2,
							u._switchLayout("row"),
							t.util.raiseSheetSelectionChanged(i.sheets[0]),
							setTimeout(function () {
								i.refresh()
							}, 0);
							return
						}
					};
					this._settingTab.on("tabsactivate", it);
					this._element.find(".property-grid").click(function (n) {
						$(u._element.find(".property-grid").children()[0].children).removeClass("ui-state-focus");
						var t = n.target || n.srcElement;
						$(t).parents("tr").addClass("ui-state-focus")
					});
					if (this._fontDialog === undefined) {
						w = new h,
						this._element.find(".font-popup").click(function () {
							w.open(a.val())
						});
						$(w).on("dialogClose", function (n, t) {
							a.val(t),
							a.trigger("change")
						})
					}
					$(document).mousedown(function (n) {
						for (var t = n.target || n.srcElement, r = $(".gcui-borderpicker-color-picker"), f = !1, i = 0; i < r.length; i++)
							if (r[i].contains(t)) {
								f = !0;
								break
							}
						f || ($(".borderBottom-borderpicker")[0].contains(t) || u._element.find(".borderBottom-borderframe").comboframe("close"), $(".borderLeft-borderpicker")[0].contains(t) || u._element.find(".borderLeft-borderframe").comboframe("close"), $(".borderRight-borderpicker")[0].contains(t) || u._element.find(".borderRight-borderframe").comboframe("close"), $(".borderTop-borderpicker")[0].contains(t) || u._element.find(".borderTop-borderframe").comboframe("close"), $(".gcui-borderpicker-color").comboframe("close"))
					}),
					t.wrapper.spread.bind(n.Events.ActiveSheetChanged, function () {
						var f = u._element.find("#rowHeaderTab"),
						t = u._element.find("#columnHeaderTab");
						i.destroy(),
						f.empty(),
						r.destroy(),
						t.empty(),
						i = new n.Spread(t[0], {
								sheetCount : 1
							}),
						r = new n.Spread(t[0], {
								sheetCount : 1
							}),
						i.sheets[0].selectionPolicy(1),
						r.sheets[0].selectionPolicy(1),
						i.tabStripVisible(!1),
						r.tabStripVisible(!1),
						i.sheets[0].bind(n.Events.SelectionChanged, l),
						r.sheets[0].bind(n.Events.SelectionChanged, l)
					})
				},
				r
			}
			(t.BaseDialog),
			t.HeaderCellsDialog = v,
			h = function (n) {
				function i() {
					var i = this,
					r = {
						width : 475,
						autoOpen : !1,
						resizable : !1,
						modal : !0,
						title : t.res.fontPickerDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									i._raiseClose(event, i._composeFont()),
									i.close()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close()
								}
							}
						]
					};
					n.call(this, "../dialogs/dialogs.html", ".font-dialog", r)
				}
				return __extends(i, n),
				i.prototype._init = function () {
					var n = this;
					this._element.find(".font-picker").fontpicker({
						changed : function (t, i) {
							switch (i.name) {
							case "family":
								n._fontFamily = i.value;
								break;
							case "style":
								n._fontStyle = i.value;
								break;
							case "size":
								n._fontSize = i.value;
								break;
							case "weight":
								n._fontWeight = i.value;
								break
							}
						},
						isColorVisible : !1
					})
				},
				i.prototype._composeFont = function () {
					var n;
					return this._fontFamily === undefined && this._fontStyle === undefined && this._fontSize === undefined && this._fontWeight === undefined ? n = "" : (n = this._fontStyle ? this._fontStyle : "normal", n += this._fontWeight ? " " + this._fontWeight : " normal", n += this._fontSize ? " " + this._fontSize + "pt" : " " + t.res.defaultFont.split(" ")[0], n += this._fontFamily ? " " + this._fontFamily : " " + t.res.defaultFont.split(" ")[1]),
					n
				},
				i.prototype._beforeOpen = function (n) {
					if (n[0] !== undefined && n[0] !== null && n[0] !== "") {
						var i = t.util.parseFont(n[0]);
						this._element.find(".font-picker").fontpicker("family", i.fontFamily),
						this._element.find(".font-picker").fontpicker("style", i.fontStyle),
						this._element.find(".font-picker").fontpicker("size", parseFloat(i.fontSize).toString()),
						this._element.find(".font-picker").fontpicker("weight", i.fontWeight)
					} else
						this._element.find(".font-picker").fontpicker("family", ""), this._element.find(".font-picker").fontpicker("style", ""), this._element.find(".font-picker").fontpicker("size", ""), this._element.find(".font-picker").fontpicker("weight", ""), this._fontFamily = undefined, this._fontStyle = undefined, this._fontSize = undefined, this._fontWeight = undefined
				},
				i.prototype._raiseClose = function (n, t) {
					$(this).trigger("dialogClose", t)
				},
				i
			}
			(t.BaseDialog),
			t.FontPickerDialog = h,
			function (n) {
				n[n.greaterThan = 0] = "greaterThan",
				n[n.lessThan = 1] = "lessThan",
				n[n.between = 2] = "between",
				n[n.equalTo = 3] = "equalTo",
				n[n.top = 4] = "top",
				n[n.bottom = 5] = "bottom",
				n[n.above = 6] = "above",
				n[n.below = 7] = "below"
			}
			(t.OpenType || (t.OpenType = {})),
			kt = t.OpenType,
			a = function (i) {
				function f() {
					var n = this,
					r = {
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var i = n._validateValue();
									i && (n._addRule(), n.close(), t.wrapper.setFocusToSpread())
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".cellValueRuleFormat-dialog", r)
				}
				return __extends(f, i),
				f.prototype._init = function () {
					var n = this;
					this.formatCellDialog === undefined && (this.formatCellDialog = new t.FormatDialog),
					this._element.find(".withStyle").change(function (i) {
						var u = i.target || i.srcElement,
						r = u;
						r.value === t.res.conditionalFormatting.withStyle.customFormat && (n.formatCellDialog.selectTabOptions = {
								numbers : !0,
								font : !0,
								border : !0,
								fill : !0
							}, n.formatCellDialog.setFormatDirectly(!1), n.formatCellDialog.open("font", {
								family : "disabled",
								size : "disabled",
								weight : "disabled"
							}, n._style, !0))
					});
					$(this.formatCellDialog).on("okClicked", function (t, i) {
						n._style = i
					})
				},
				f.prototype._beforeOpen = function (n) {
					var u = n[0],
					i,
					r;
					this._style = undefined,
					this._openType = u;
					switch (u) {
					case 2:
						i = t.res.conditionalFormatting.between.title,
						r = t.res.conditionalFormatting.between.description,
						this._switchDisplay(!0);
						break;
					case 3:
						i = t.res.conditionalFormatting.equalTo.title,
						r = t.res.conditionalFormatting.equalTo.description,
						this._switchDisplay(!1);
						break;
					case 0:
						i = t.res.conditionalFormatting.greaterThan.title,
						r = t.res.conditionalFormatting.greaterThan.description,
						this._switchDisplay(!1);
						break;
					case 1:
						i = t.res.conditionalFormatting.lessThan.title,
						r = t.res.conditionalFormatting.lessThan.description,
						this._switchDisplay(!1);
						break
					}
					this._element.dialog("option", "title", i),
					this._element.find(".description").text(r),
					this._initCellValuesInput(),
					$(this._element.find(".withStyle").children()[0]).prop("selected", !0)
				},
				f.prototype._switchDisplay = function (n) {
					var i = this._element.find(".label-and"),
					t = this._element.find(".textBox-cell2");
					n ? (i.removeClass("hidden"), t.removeClass("hidden")) : (i.addClass("hidden"), t.addClass("hidden"))
				},
				f.prototype._getStyle = function () {
					var n = parseInt(this._element.find(".withStyle").prop("selectedIndex"));
					return r._getStyle(n, this._style)
				},
				f.prototype._addRule = function () {
					var s = t.wrapper.spread.getActiveSheet(),
					h = s.getSelections(),
					i = this._element.find(".textBox-cell1").val(),
					r = this._element.find(".textBox-cell2").val(),
					o = (i || "").toString().toUpperCase(),
					e = (r || "").toString().toUpperCase(),
					f,
					u;
					o === "TRUE" ? i = !0 : o === "FALSE" && (i = !1),
					e === "TRUE" ? r = !0 : e === "FALSE" && (r = !1),
					f = this._getStyle();
					switch (this._openType) {
					case 2:
						u = new n.CellValueRule(6, i, r, f);
						break;
					case 3:
						u = new n.CellValueRule(0, i, r, f);
						break;
					case 0:
						u = new n.CellValueRule(2, i, r, f);
						break;
					case 1:
						u = new n.CellValueRule(4, i, r, f);
						break
					}
					u.ranges = h,
					t.actions.doAction("addRule", t.wrapper.spread, u)
				},
				f.prototype._initCellValuesInput = function () {
					var r = t.wrapper.spread.getActiveSheet(),
					o = r.getSelections(),
					e = r.getCalcService(),
					f = this._element.find(".textBox-cell1"),
					c = this._element.find(".textBox-cell2"),
					l = t.util.createStatisticalExpression("AVERAGE", o),
					i = e.evaluateParsedFormula(r._getSheetSource(), l, 0, 0, !0);
					i instanceof n.Calc.CalcError && (i = 0);
					if (this._openType === 2) {
						var a = t.util.createStatisticalExpression("MIN", o),
						u = e.evaluateParsedFormula(r._getSheetSource(), a, 0, 0, !0),
						h = i - u,
						s = i + u;
						f.val(h),
						c.val(s)
					} else
						f.val(i)
				},
				f.prototype._validateValue = function () {
					var i = this._element.find(".textBox-cell1").val(),
					r = this._element.find(".textBox-cell2").val(),
					n = !0;
					switch (this._openType) {
					case 2:
						(i === "" || r === "") && (u.show(t.res.conditionalFormatting.exceptions.e1, t.res.title, 2), n = !1);
						break;
					case 3:
					case 0:
					case 1:
						i === "" && (u.show(t.res.conditionalFormatting.exceptions.e1, t.res.title, 2), n = !1);
						break
					}
					return n
				},
				f
			}
			(t.BaseDialog),
			t.CellValueRuleFormatDialog = a,
			p = function (i) {
				function f() {
					var n = this,
					r = {
						title : t.res.conditionalFormatting.textThatCotains.title,
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var i = n._validateValue();
									i && (n._addRule(), n.close(), t.wrapper.setFocusToSpread())
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".textRuleFormat-dialog", r)
				}
				return __extends(f, i),
				f.prototype._init = function () {
					var n = this;
					this.formatCellDialog === undefined && (this.formatCellDialog = new t.FormatDialog),
					this._element.find(".withStyle").change(function (i) {
						var u = i.target || i.srcElement,
						r = u;
						r.value === t.res.conditionalFormatting.withStyle.customFormat && (n.formatCellDialog.selectTabOptions = {
								numbers : !0,
								font : !0,
								border : !0,
								fill : !0
							}, n.formatCellDialog.setFormatDirectly(!1), n.formatCellDialog.open("font", {
								family : "disabled",
								size : "disabled",
								weight : "disabled"
							}, n._style, !0))
					});
					$(this.formatCellDialog).on("okClicked", function (t, i) {
						n._style = i
					})
				},
				f.prototype._beforeOpen = function () {
					this._style = undefined,
					this._initCellValuesInput(),
					$(this._element.find(".withStyle").children()[0]).prop("selected", !0)
				},
				f.prototype._getStyle = function () {
					var n = parseInt(this._element.find(".withStyle").prop("selectedIndex"));
					return r._getStyle(n, this._style)
				},
				f.prototype._addRule = function () {
					var e = t.wrapper.spread.getActiveSheet(),
					o = e.getSelections(),
					i = this._element.find(".textBox-cell1").val(),
					s = this._getStyle(),
					r;
					if (i.toString().substring(0, 1) === "=") {
						var h = new n.Calc.ParserContext(null, t.wrapper.spread.referenceStyle(), 0, 0),
						f = (new n.Calc.Parser).parse(i, h),
						u = f;
						i = t.wrapper.spread.getActiveSheet().getCell(u.row, u.column).text()
					}
					r = new n.SpecificTextRule(0, i, s),
					r.ranges = o,
					t.actions.doAction("addRule", t.wrapper.spread, r)
				},
				f.prototype._initCellValuesInput = function () {
					var n = t.wrapper.spread.getActiveSheet(),
					u = n.getActiveColumnIndex(),
					f = n.getActiveRowIndex(),
					i = n.getCell(f, u),
					r = this._element.find(".textBox-cell1");
					r.val(i.text())
				},
				f.prototype._validateValue = function () {
					var i = this._element.find(".textBox-cell1").val(),
					n = !0;
					return i === "" && (u.show(t.res.conditionalFormatting.exceptions.e2, t.res.title, 2), n = !1),
					n
				},
				f
			}
			(t.BaseDialog),
			t.TextRuleFormatDialog = p,
			g = function (i) {
				function u() {
					var n = this,
					r = {
						title : t.res.conditionalFormatting.dateOccurringFormat.title,
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									n._addRule(),
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".dateOccurringFormat-dialog", r)
				}
				return __extends(u, i),
				u.prototype._init = function () {
					var n = this;
					this.formatCellDialog === undefined && (this.formatCellDialog = new t.FormatDialog),
					this._element.find(".withStyle").change(function (i) {
						var u = i.target || i.srcElement,
						r = u;
						r.value === t.res.conditionalFormatting.withStyle.customFormat && (n.formatCellDialog.selectTabOptions = {
								numbers : !0,
								font : !0,
								border : !0,
								fill : !0
							}, n.formatCellDialog.setFormatDirectly(!1), n.formatCellDialog.open("font", {
								family : "disabled",
								size : "disabled",
								weight : "disabled"
							}, n._style, !0))
					});
					$(this.formatCellDialog).on("okClicked", function (t, i) {
						n._style = i
					})
				},
				u.prototype._beforeOpen = function () {
					this._style = undefined,
					$(this._element.find(".date").children()[0]).prop("selected", !0),
					$(this._element.find(".withStyle").children()[0]).prop("selected", !0)
				},
				u.prototype._getStyle = function () {
					var n = parseInt(this._element.find(".withStyle").prop("selectedIndex"));
					return r._getStyle(n, this._style)
				},
				u.prototype._addRule = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					e = u.getSelections(),
					o = this._getStyle(),
					f = parseInt(this._element.find(".date").prop("selectedIndex")),
					i,
					r;
					switch (f) {
					case 0:
						i = 1;
						break;
					case 1:
						i = 0;
						break;
					case 2:
						i = 2;
						break;
					case 3:
						i = 3;
						break;
					case 4:
						i = 8;
						break;
					case 5:
						i = 7;
						break;
					case 6:
						i = 9;
						break;
					case 7:
						i = 5;
						break;
					case 8:
						i = 4;
						break;
					case 9:
						i = 6;
						break
					}
					r = new n.DateOccurringRule(i, o),
					r.ranges = e,
					t.actions.doAction("addRule", t.wrapper.spread, r)
				},
				u
			}
			(t.BaseDialog),
			t.DateOccurringFormatDialog = g,
			nt = function (i) {
				function u() {
					var n = this,
					r = {
						title : t.res.conditionalFormatting.duplicateValuesFormat.title,
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									n._addRule(),
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".duplicateValuesFormat-dialog", r)
				}
				return __extends(u, i),
				u.prototype._init = function () {
					var n = this;
					this.formatCellDialog === undefined && (this.formatCellDialog = new t.FormatDialog),
					this._element.find(".withStyle").change(function (i) {
						var u = i.target || i.srcElement,
						r = u;
						r.value === t.res.conditionalFormatting.withStyle.customFormat && (n.formatCellDialog.selectTabOptions = {
								numbers : !0,
								font : !0,
								border : !0,
								fill : !0
							}, n.formatCellDialog.setFormatDirectly(!1), n.formatCellDialog.open("font", {
								family : "disabled",
								size : "disabled",
								weight : "disabled"
							}, n._style, !0))
					});
					$(this.formatCellDialog).on("okClicked", function (t, i) {
						n._style = i
					})
				},
				u.prototype._beforeOpen = function () {
					this._style = undefined,
					$(this._element.find(".type").children()[0]).prop("selected", !0),
					$(this._element.find(".withStyle").children()[0]).prop("selected", !0)
				},
				u.prototype._getStyle = function () {
					var n = parseInt(this._element.find(".withStyle").prop("selectedIndex"));
					return r._getStyle(n, this._style)
				},
				u.prototype._addRule = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					e = u.getSelections(),
					r = this._getStyle(),
					f = parseInt(this._element.find(".type").prop("selectedIndex")),
					i;
					switch (f) {
					case 0:
						i = new n.DuplicateRule(r);
						break;
					case 1:
						i = new n.UniqueRule(r);
						break
					}
					i.ranges = e,
					t.actions.doAction("addRule", t.wrapper.spread, i)
				},
				u
			}
			(t.BaseDialog),
			t.DuplicateValuesFormatDialog = nt,
			tt = function (i) {
				function f() {
					var n = this,
					r = {
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var i = n._validateValue();
									i && (n._addRule(), n.close(), t.wrapper.setFocusToSpread())
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".top10RuleFormat-dialog", r)
				}
				return __extends(f, i),
				f.prototype._init = function () {
					var n = this;
					this.formatCellDialog === undefined && (this.formatCellDialog = new t.FormatDialog),
					this._element.find(".withStyle").change(function (i) {
						var u = i.target || i.srcElement,
						r = u;
						r.value === t.res.conditionalFormatting.withStyle.customFormat && (n.formatCellDialog.selectTabOptions = {
								numbers : !0,
								font : !0,
								border : !0,
								fill : !0
							}, n.formatCellDialog.setFormatDirectly(!1), n.formatCellDialog.open("font", {
								family : "disabled",
								size : "disabled",
								weight : "disabled"
							}, n._style, !0))
					});
					$(this.formatCellDialog).on("okClicked", function (t, i) {
						n._style = i
					})
				},
				f.prototype._beforeOpen = function (n) {
					var f = n[0],
					u,
					i,
					r;
					this._style = undefined,
					this._openType = f;
					switch (f) {
					case 4:
						u = t.res.conditionalFormatting.top10items.title,
						i = t.res.conditionalFormatting.top10items.description;
						break;
					case 5:
						u = t.res.conditionalFormatting.bottom10items.title,
						i = t.res.conditionalFormatting.bottom10items.description;
						break
					}
					this._element.dialog("option", "title", u),
					this._element.find(".description").text(i),
					r = this._element.find(".itemCounts"),
					r.spinner({
						min : 1,
						max : 1e3
					}),
					r.val(10),
					$(this._element.find(".withStyle").children()[0]).prop("selected", !0)
				},
				f.prototype._getStyle = function () {
					var n = parseInt(this._element.find(".withStyle").prop("selectedIndex"));
					return r._getStyle(n, this._style)
				},
				f.prototype._addRule = function () {
					var f = t.wrapper.spread.getActiveSheet(),
					e = f.getSelections(),
					u = this._getStyle(),
					r = this._element.find(".itemCounts").val(),
					i;
					switch (this._openType) {
					case 4:
						i = new n.Top10Rule(0, r, u);
						break;
					case 5:
						i = new n.Top10Rule(1, r, u);
						break
					}
					i.ranges = e,
					t.actions.doAction("addRule", t.wrapper.spread, i)
				},
				f.prototype._validateValue = function () {
					var n = parseInt(this._element.find(".itemCounts").val()),
					i = !0;
					return (isNaN(n) || n > 1e3 || n < 1) && (u.show(t.res.conditionalFormatting.exceptions.e3, t.res.title, 2), i = !1),
					i
				},
				f
			}
			(t.BaseDialog),
			t.Top10RuleFormatDialog = tt,
			d = function (i) {
				function u() {
					var n = this,
					r = {
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									n._addRule(),
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									t.wrapper.setFocusToSpread()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".averageRuleFormat-dialog", r)
				}
				return __extends(u, i),
				u.prototype._init = function () {
					var n = this;
					this.formatCellDialog === undefined && (this.formatCellDialog = new t.FormatDialog),
					this._element.find(".withStyle").change(function (i) {
						var u = i.target || i.srcElement,
						r = u;
						r.value === t.res.conditionalFormatting.withStyle.customFormat && (n.formatCellDialog.selectTabOptions = {
								numbers : !0,
								font : !0,
								border : !0,
								fill : !0
							}, n.formatCellDialog.setFormatDirectly(!1), n.formatCellDialog.open("font", {
								family : "disabled",
								size : "disabled",
								weight : "disabled"
							}, n._style, !0))
					});
					$(this.formatCellDialog).on("okClicked", function (t, i) {
						n._style = i
					})
				},
				u.prototype._beforeOpen = function (n) {
					var u = n[0],
					i,
					r;
					this._style = undefined,
					this._openType = u;
					switch (u) {
					case 6:
						i = t.res.conditionalFormatting.aboveAverage.title,
						r = t.res.conditionalFormatting.aboveAverage.description;
						break;
					case 7:
						i = t.res.conditionalFormatting.belowAverage.title,
						r = t.res.conditionalFormatting.belowAverage.description;
						break
					}
					this._element.dialog("option", "title", i),
					this._element.find(".description").text(r),
					$(this._element.find(".withStyle").children()[0]).prop("selected", !0)
				},
				u.prototype._getStyle = function () {
					var n = parseInt(this._element.find(".withStyle").prop("selectedIndex"));
					return r._getStyle(n, this._style)
				},
				u.prototype._addRule = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					f = u.getSelections(),
					r = this._getStyle(),
					i;
					switch (this._openType) {
					case 6:
						i = new n.AverageRule(0, r);
						break;
					case 7:
						i = new n.AverageRule(1, r);
						break
					}
					i.ranges = f,
					t.actions.doAction("addRule", t.wrapper.spread, i)
				},
				u
			}
			(t.BaseDialog),
			t.AverageRuleFormatDialog = d,
			function (n) {
				n[n.formatOnValue = 0] = "formatOnValue",
				n[n.formatContain = 1] = "formatContain",
				n[n.formatRankedValue = 2] = "formatRankedValue",
				n[n.formatAbove = 3] = "formatAbove",
				n[n.formatUnique = 4] = "formatUnique",
				n[n.useFormula = 5] = "useFormula"
			}
			(t.RuleType || (t.RuleType = {})),
			bt = t.RuleType,
			function (n) {
				n[n.color2 = 0] = "color2",
				n[n.color3 = 1] = "color3",
				n[n.dataBar = 2] = "dataBar",
				n[n.iconSets = 3] = "iconSets"
			}
			(t.FormatStyle || (t.FormatStyle = {})),
			wt = t.FormatStyle,
			o = function (i) {
				function f() {
					var n = this,
					r = {
						width : "auto",
						height : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var i = n._validateValue();
									i && (n._addRule(), t.actions.isFileModified = !0, n.close(), n._notApplySetting || t.wrapper.setFocusToSpread(), n._ranges && (n._rule.ranges = n._ranges), n._raiseClose(event, {
											rule : n._rule,
											isCloseByOK : !0
										}), n.destroy())
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.close(),
									n._notApplySetting || t.wrapper.setFocusToSpread(),
									n._ranges && (n._rule.ranges = n._ranges),
									n._raiseClose(event, {
										rule : n._rule,
										isCloseByOK : !1
									}),
									n.destroy()
								}
							}
						],
						beforeClose : function (t, i) {
							t.currentTarget && (n._ranges && (n._rule.ranges = n._ranges), n._raiseClose(t, {
									rule : n._rule,
									isCloseByOK : !1
								}), n.destroy())
						}
					};
					i.call(this, "../dialogs/dialogs.html", ".newFormattingRule-dialog", r)
				}
				return __extends(f, i),
				f.prototype.destroy = function () {
					var u = $(".min-color-picker"),
					f = $(".max-color-picker"),
					r = $(".mid-color-picker"),
					n = $(".barcolor1-picker"),
					t = $(".barcolor2-picker");
					u.length > 0 && u.children().length > 0 && u.colorpicker("destroy"),
					f.length > 0 && f.children().length > 0 && f.colorpicker("destroy"),
					r.length > 0 && r.children().length > 0 && r.colorpicker("destroy"),
					n.length > 0 && n.children().length > 0 && n.colorpicker("destroy"),
					t.length > 0 && t.children().length > 0 && t.colorpicker("destroy"),
					u.remove(),
					f.remove(),
					r.remove(),
					n.remove(),
					t.remove(),
					$("#icon-sets-popup-dialog").remove(),
					i.prototype.destroy.call(this)
				},
				f.prototype._init = function () {
					var n = this,
					t = this._element.find(".ruleType");
					t.change(function () {
						var i = parseInt(t.prop("selectedIndex"));
						n._switchVisible(i),
						n._showSperatorLine(i),
						n._isEdit && n._parseRule(n._rule)
					}),
					this._notApplySetting = !1,
					this._addEvents()
				},
				f.prototype._beforeOpen = function (n) {
					var i = n[0],
					e = n[1],
					o = n[2],
					f = n[3],
					r = n[4],
					u = n[5];
					this._style = undefined,
					this._negativeDialogData = undefined,
					this._switchVisible(i, o, u),
					this._showSperatorLine(i),
					e ? this._element.dialog("option", "title", t.res.conditionalFormatting.newFormattingRule.title) : (this._element.dialog("option", "title", t.res.conditionalFormatting.newFormattingRule.title2), this._parseRule(r), this._isEdit = !0),
					this._notApplySetting = f
				},
				f.prototype._addEvents = function () {
					var t = this,
					n = this,
					k = this._element.find(".formatStyle"),
					h,
					c,
					v,
					l,
					s,
					it,
					y,
					tt,
					u,
					r,
					i,
					o,
					a,
					nt,
					ft,
					ut,
					rt,
					g,
					p,
					w,
					b,
					e,
					f,
					d;
					k.change(function () {
						var n = parseInt(k.prop("selectedIndex"));
						t._formatOnValue_switchVisible(n),
						(n === 0 || n === 1) && t._colorOfColor23Changed()
					}),
					h = this._element.find(".minSelector"),
					h.change(function () {
						var i = parseInt(h.prop("selectedIndex")),
						n = t._element.find(".minValue");
						switch (i) {
						case 0:
							n.val("(" + h.val() + ")"),
							n.attr("disabled", "disabled");
							break;
						case 1:
						case 2:
							n.val(0),
							n.removeAttr("disabled");
							break;
						case 3:
							n.val(""),
							n.removeAttr("disabled");
							break;
						case 4:
							n.val(10),
							n.removeAttr("disabled");
							break
						}
					}),
					c = this._element.find(".maxSelector"),
					c.change(function () {
						var i = parseInt(c.prop("selectedIndex")),
						n = t._element.find(".maxValue");
						switch (i) {
						case 0:
							n.val("(" + c.val() + ")"),
							n.attr("disabled", "disabled");
							break;
						case 1:
							n.val(0),
							n.removeAttr("disabled");
							break;
						case 2:
							n.val(100),
							n.removeAttr("disabled");
							break;
						case 3:
							n.val(""),
							n.removeAttr("disabled");
							break;
						case 4:
							n.val(90),
							n.removeAttr("disabled");
							break
						}
					}),
					v = this._element.find(".midSelector"),
					v.change(function () {
						var i = parseInt(v.prop("selectedIndex")),
						n = t._element.find(".midValue");
						switch (i) {
						case 0:
							n.val(0);
							break;
						case 1:
							n.val(50);
							break;
						case 2:
							n.val("");
							break;
						case 3:
							n.val(50);
							break
						}
					}),
					l = this._element.find(".minSelector2"),
					l.change(function () {
						var i = parseInt(l.prop("selectedIndex")),
						n = t._element.find(".minValue2");
						switch (i) {
						case 0:
						case 5:
							n.val("(" + l.val() + ")"),
							n.attr("disabled", "disabled");
							break;
						case 1:
						case 2:
							n.val(0),
							n.removeAttr("disabled");
							break;
						case 3:
							n.val(""),
							n.removeAttr("disabled");
							break;
						case 4:
							n.val(10),
							n.removeAttr("disabled");
							break
						}
					}),
					s = this._element.find(".maxSelector2"),
					s.change(function () {
						var i = parseInt(s.prop("selectedIndex")),
						n = t._element.find(".maxValue2");
						switch (i) {
						case 0:
						case 5:
							n.val("(" + s.val() + ")"),
							n.attr("disabled", "disabled");
							break;
						case 1:
							n.val(0),
							n.removeAttr("disabled");
							break;
						case 2:
							n.val(100),
							n.removeAttr("disabled");
							break;
						case 3:
							n.val(""),
							n.removeAttr("disabled");
							break;
						case 4:
							n.val(90),
							n.removeAttr("disabled");
							break
						}
					}),
					it = this._element.find(".fillSelector"),
					it.change(function () {
						n._dataBarAppChanged()
					}),
					y = this._element.find(".borderSelector"),
					y.change(function () {
						n._dataBarAppChanged(),
						y.prop("selectedIndex") === 0 ? t._element.find(".barcolor2-frame button").attr("disabled", "disabled") : t._element.find(".barcolor2-frame button").removeAttr("disabled")
					}),
					tt = this._element.find(".barDirectionSelector"),
					tt.change(function () {
						n._dataBarAppChanged()
					}),
					u = this._element.find(".value1"),
					u.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(u.val())
					}),
					r = this._element.find(".value2"),
					r.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(undefined, r.val())
					}),
					i = this._element.find(".value3"),
					i.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(undefined, undefined, i.val())
					}),
					o = this._element.find(".value4"),
					o.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(undefined, undefined, undefined, o.val())
					}),
					a = this._element.find(".reverseIconOrder"),
					a.change(function (n) {
						for (var u = [], r, i = 0; i < t._speratoriconStyleImages.length; i++)
							u.push(t._speratoriconStyleImages[i].toString());
						r = u.reverse(),
						t._formatOnValue_iconSets_updateIcons(undefined, r)
					});
					$("#icon-sets-popup-dialog button").on("mouseenter", function (n) {
						var i = n.currentTarget,
						t = $(i).children("span.icon-button-container");
						$(t).addClass("ui-state-hover")
					});
					$("#icon-sets-popup-dialog button").on("mouseleave", function (n) {
						var i = n.currentTarget,
						t = $(i).children("span.icon-button-container");
						$(t).removeClass("ui-state-hover")
					});
					$("#icon-sets-popup-dialog button").on("click", function (t) {
						var u,
						i,
						e;
						n._element.find(".iconStyle-frame").comboframe("close");
						var r = [],
						f = t.currentTarget,
						s = f.childNodes[1].children;
						for (i = 0; i < s.length; i++) {
							var o = s[i].className,
							h = "iconSetsIcons horizontal-icon-set-item ",
							c = o.substring(h.length, o.length);
							r.push(c)
						}
						if (a.prop("checked")) {
							for (u = [], i = 0; i < r.length; i++)
								u.push(r[i].toString());
							e = u.reverse(),
							n._formatOnValue_iconSets_updateIcons(r, e)
						} else
							n._formatOnValue_iconSets_updateIcons(r, r);
						n._formatOnValue_IconSets_switchVisible(r.length),
						n._iconNames = f.name,
						n._formatOnValue_iconSets_updateValues(f.name)
					});
					nt = this._element.find(".value1Selector"),
					nt.change(function () {
						n._formatOnValue_iconSets_updateValues(n._iconNames, 1)
					}),
					ft = this._element.find(".value2Selector"),
					ft.change(function () {
						n._formatOnValue_iconSets_updateValues(n._iconNames, 2)
					}),
					ut = this._element.find(".value3Selector"),
					ut.change(function () {
						n._formatOnValue_iconSets_updateValues(n._iconNames, 3)
					}),
					rt = this._element.find(".value4Selector"),
					rt.change(function () {
						n._formatOnValue_iconSets_updateValues(n._iconNames, 4)
					}),
					g = this._element.find(".operator1"),
					g.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(u.val())
					}),
					p = this._element.find(".operator2"),
					p.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(undefined, r.val())
					}),
					w = this._element.find(".operator3"),
					w.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(undefined, undefined, i.val())
					}),
					b = this._element.find(".operator4"),
					b.change(function () {
						n._formatOnValue_iconSets_updatedesctiptions(undefined, undefined, undefined, o.val())
					}),
					e = this._element.find(".formatContain-type"),
					f = this._element.find(".operator"),
					e.change(function () {
						var n = parseInt(e.prop("selectedIndex"));
						t._formatContain_switchOperator(n),
						t._formatContain_switchVisible(n),
						f.trigger("change")
					}),
					f.change(function (n) {
						var u = parseInt(e.prop("selectedIndex")),
						i,
						r;
						u === 0 && (i = n.target || n.srcElement, r = i, t._formatContain_switchVisible_CellValue(f.prop("selectedIndex")))
					}),
					d = this._element.find(".format-button"),
					d.click(function () {
						t.formatCellDialog.selectTabOptions = {
							numbers : !0,
							font : !0,
							border : !0,
							fill : !0
						},
						t.formatCellDialog.setFormatDirectly(!1),
						t.formatCellDialog.open("font", {
							family : "disabled",
							size : "disabled",
							weight : "disabled"
						}, t._style, !0)
					})
				},
				f.prototype._showSperatorLine = function (n) {
					var t = ".format-rule-sperator-line";
					n === 0 ? this._element.find(t).css("display", "none") : this._element.find(t).css("display", "block")
				},
				f.prototype._raiseClose = function (n, t) {
					$(this).trigger("dialogClose", t)
				},
				f.prototype._parseRule = function (t) {
					var c,
					o,
					et,
					p,
					vi,
					oi,
					kt,
					ft,
					b,
					w,
					d,
					ni,
					fi,
					e,
					si,
					v,
					ei,
					y,
					dt,
					rr,
					ir,
					gt,
					er,
					fr,
					ur,
					ki,
					bi,
					wi,
					nr,
					gi,
					ti,
					ii,
					k,
					ui,
					ri,
					tt,
					vt,
					di,
					at,
					u,
					f,
					bt,
					wt,
					ut,
					it,
					nt,
					l,
					pt,
					h,
					tr,
					g,
					pi,
					st,
					ht,
					ct,
					lt,
					hi,
					s,
					ot,
					ai,
					yt,
					rt,
					ci,
					li,
					a,
					i,
					yi;
					this._ranges = t.ranges,
					this._rule = t;
					if (t instanceof n.TwoScaleRule)
						c = t, et = c.getMinimumType(), v = c.getMinimumValue(), p = c.getMinimumColor(), ft = c.getMaximumType(), y = c.getMaximumValue(), b = c.getMaximumColor(), w = this._element.find(".minSelector"), i = this._getIndexofScaleValueType(et), w.prop("selectedIndex", i), w.trigger("change"), d = this._element.find(".maxSelector"), k = this._getIndexofScaleValueType(ft), d.prop("selectedIndex", k), d.trigger("change"), $(".min-color-picker").colorpicker("option", "value", p), this._element.find(".min-color-span").css("background-color", p), $(".max-color-picker").colorpicker("option", "value", b), this._element.find(".max-color-span").css("background-color", b), this._element.find(".minValue").val(v), this._element.find(".maxValue").val(y), this._colorOfColor23Changed();
					else if (t instanceof n.ThreeScaleRule)
						o = t, et = o.getMinimumType(), v = o.getMinimumValue(), p = o.getMinimumColor(), ft = o.getMaximumType(), y = o.getMaximumValue(), b = o.getMaximumColor(), vi = o.getMidpointType(), oi = o.getMidpointValue(), kt = o.getMidpointColor(), w = this._element.find(".minSelector"), i = this._getIndexofScaleValueType(et), w.prop("selectedIndex", i), w.trigger("change"), d = this._element.find(".maxSelector"), k = this._getIndexofScaleValueType(ft), d.prop("selectedIndex", k), d.trigger("change"), ni = this._element.find(".midSelector"), fi = this._getIndexofScaleValueType(vi) - 1, ni.prop("selectedIndex", fi), ni.trigger("change"), $(".min-color-picker").colorpicker("option", "value", p), this._element.find(".min-color-span").css("background-color", p), $(".max-color-picker").colorpicker("option", "value", b), this._element.find(".max-color-span").css("background-color", b), $(".mid-color-picker").colorpicker("option", "value", kt), this._element.find(".mid-color-span").css("background-color", kt), this._element.find(".minValue").val(v), this._element.find(".maxValue").val(y), this._element.find(".midValue").val(oi), this._colorOfColor23Changed();
					else if (t instanceof n.DataBarRule)
						e = t, si = e.minimumType(), v = e.minimumValue(), ei = e.maximumType(), y = e.maximumValue(), dt = e.color(), gt = e.borderColor(), rr = e.showBarOnly(), ir = e.gradient(), er = e.showBorder(), fr = e.dataBarDirection(), ur = e.negativeBorderColor(), ki = e.negativeFillColor(), bi = e.useNegativeBorderColor(), wi = e.useNegativeFillColor(), nr = e.axisColor(), gi = e.axisPosition(), ti = this._element.find(".minSelector2"), i = this._getIndexofScaleValueType(si), ti.prop("selectedIndex", i), ti.trigger("change"), ii = this._element.find(".maxSelector2"), k = this._getIndexofScaleValueType(ei), ii.prop("selectedIndex", k), ii.trigger("change"), this._element.find(".minValue2").val(v), this._element.find(".maxValue2").val(y), $(".barcolor1-picker").colorpicker("option", "value", dt), $(".barcolor2-picker").colorpicker("option", "value", gt), this._element.find(".barcolor1-span").css("background-color", dt), this._element.find(".barcolor2-span").css("background-color", gt), this._element.find(".showBarOnly").prop("checked", rr), ui = this._element.find(".fillSelector"), ui.prop("selectedIndex", ir === !0 ? 1 : 0), ui.trigger("change"), ri = this._element.find(".borderSelector"), ri.prop("selectedIndex", er === !0 ? 1 : 0), ri.trigger("change"), this._element.find(".barDirectionSelector").prop("selectedIndex", fr === 0 ? 0 : 1), this._negativeDialogData = {
							negativeBorderColor : ur,
							negativeFillColor : ki,
							useNegativeBorderColor : bi,
							useNegativeFillColor : wi,
							axisColor : nr,
							axisPosition : gi
						},
					this._dataBarAppChanged();
					else if (t instanceof n.IconSetRule) {
						tt = t,
						vt = tt.iconSetType(),
						di = tt.showIconOnly(),
						at = tt.reverseIconOrder(),
						u = tt.iconCriteria();
						switch (vt) {
						case 0:
							f = "3-arrows-icon-set";
							break;
						case 1:
							f = "3-arrows-gray-icon-set";
							break;
						case 2:
							f = "3-triangles-icon-set";
							break;
						case 5:
							f = "3-traffic-lights-unrimmed-icon-set";
							break;
						case 6:
							f = "3-traffic-lights-rimmed-icon-set";
							break;
						case 7:
							f = "3-signs-icon-set";
							break;
						case 8:
							f = "3-symbols-circled-icon-set";
							break;
						case 9:
							f = "3-symbols-uncircled-icon-set";
							break;
						case 4:
							f = "3-flags-icon-set";
							break;
						case 3:
							f = "3-stars-icon-set";
							break;
						case 11:
							f = "4-arrows-gray-icon-set";
							break;
						case 10:
							f = "4-arrows-icon-set";
							break;
						case 14:
							f = "4-traffic-lights-icon-set";
							break;
						case 12:
							f = "red-to-black-icon-set";
							break;
						case 13:
							f = "4-ratings-icon-set";
							break;
						case 16:
							f = "5-arrows-gray-icon-set";
							break;
						case 15:
							f = "5-arrows-icon-set";
							break;
						case 18:
							f = "5-quarters-icon-set";
							break;
						case 17:
							f = "5-ratings-icon-set";
							break;
						case 19:
							f = "5-boxes-icon-set";
							break
						}
						for (this._formatOnValue_iconSets_updateValues(f), this._element.find(".showIconOnly").prop("checked", di), this._element.find(".reverseIconOrder").prop("checked", at), this._element.find(".operator1").prop("selectedIndex", this._getIsGreaterThanOrEqualTo(u[u.length - 1]) === !0 ? 0 : 1), this._element.find(".operator2").prop("selectedIndex", this._getIsGreaterThanOrEqualTo(u[u.length - 2]) === !0 ? 0 : 1), this._element.find(".value1Selector").prop("selectedIndex", this._getIndexofIconValueType(u[u.length - 1])), this._element.find(".value2Selector").prop("selectedIndex", this._getIndexofIconValueType(u[u.length - 2])), bt = this._element.find(".value1"), bt.val(this._getIconValue(u[u.length - 1])), wt = this._element.find(".value2"), wt.val(this._getIconValue(u[u.length - 2])), u.length < 3 || (this._element.find(".operator3").prop("selectedIndex", this._getIsGreaterThanOrEqualTo(u[u.length - 3]) === !0 ? 0 : 1), this._element.find(".value3Selector").prop("selectedIndex", this._getIndexofIconValueType(u[u.length - 3])), ut = this._element.find(".value3"), ut.val(this._getIconValue(u[u.length - 3]))), u.length < 4 || (this._element.find(".operator4").prop("selectedIndex", this._getIsGreaterThanOrEqualTo(u[u.length - 4]) === !0 ? 0 : 1), this._element.find(".value4Selector").prop("selectedIndex", this._getIndexofIconValueType(u[u.length - 4])), it = this._element.find(".value4"), it.val(this._getIconValue(u[u.length - 4]))), nt = $("<div></div>"), r._drawIconSetPreview(nt, vt), nt.children().removeClass("iconSetsIcons"), l = [], h = 0; h < nt.children().length; h++)
							l.push(nt.children()[h].className);
						if (at) {
							for (pt = [], h = 0; h < l.length; h++)
								pt.push(l[h]), tr = pt.reverse();
							this._formatOnValue_iconSets_updateIcons(l, tr)
						} else
							this._formatOnValue_iconSets_updateIcons(l, l);
						this._formatOnValue_IconSets_switchVisible(u.length + 1),
						this._formatOnValue_iconSets_updatedesctiptions(bt.val(), wt.val(), ut === undefined ? undefined : ut.val(), it === undefined ? undefined : it.val())
					} else if (t instanceof n.CellValueRule) {
						g = t,
						ht = g.operator,
						ct = g.value1,
						pi = g.value2,
						this._style = g.style,
						s = this._element.find(".formatContain-type"),
						s.prop("selectedIndex", 0),
						s.trigger("change");
						switch (ht) {
						case 6:
							i = 0;
							break;
						case 7:
							i = 1;
							break;
						case 0:
							i = 2;
							break;
						case 1:
							i = 3;
							break;
						case 2:
							i = 4;
							break;
						case 4:
							i = 5;
							break;
						case 3:
							i = 6;
							break;
						case 5:
							i = 7;
							break
						}
						this._element.find(".operator").prop("selectedIndex", i),
						this._element.find(".operator").trigger("change"),
						this._element.find(".textBox-cell1").val(ct),
						this._element.find(".textBox-cell2").val(pi),
						this._drawPreviewControl(this._style)
					} else if (t instanceof n.SpecificTextRule) {
						st = t,
						ht = st.operator,
						ct = st.text,
						this._style = st.style,
						s = this._element.find(".formatContain-type"),
						s.prop("selectedIndex", 1),
						s.trigger("change");
						switch (ht) {
						case 0:
							i = 0;
							break;
						case 1:
							i = 1;
							break;
						case 2:
							i = 2;
							break;
						case 3:
							i = 3;
							break
						}
						this._element.find(".operator").prop("selectedIndex", i),
						this._element.find(".operator").trigger("change"),
						this._element.find(".textBox-cell1").val(ct),
						this._drawPreviewControl(this._style)
					} else if (t instanceof n.DateOccurringRule) {
						lt = t,
						hi = lt.type,
						this._style = lt.style,
						s = this._element.find(".formatContain-type"),
						s.prop("selectedIndex", 2),
						s.trigger("change");
						switch (hi) {
						case 1:
							i = 0;
							break;
						case 0:
							i = 1;
							break;
						case 2:
							i = 2;
							break;
						case 3:
							i = 3;
							break;
						case 8:
							i = 4;
							break;
						case 7:
							i = 5;
							break;
						case 9:
							i = 6;
							break;
						case 5:
							i = 7;
							break;
						case 4:
							i = 8;
							break;
						case 6:
							i = 9;
							break
						}
						this._element.find(".operator").prop("selectedIndex", i),
						this._element.find(".operator").trigger("change"),
						this._drawPreviewControl(this._style)
					} else if (t instanceof n.Top10Rule)
						ot = t, rt = ot.type, ai = ot.rank, this._style = ot.style, this._element.find(".formatRankedValue-type").prop("selectedIndex", rt === 0 ? 0 : 1), this._element.find(".formatRankedValue-type").trigger("change"), this._element.find(".itemCounts").val(ai), this._drawPreviewControl(this._style);
					else if (t instanceof n.AverageRule) {
						yt = t,
						rt = yt.type,
						this._style = yt.style;
						switch (rt) {
						case 0:
							i = 0;
							break;
						case 1:
							i = 1;
							break;
						case 2:
							i = 2;
							break;
						case 3:
							i = 3;
							break;
						case 4:
							i = 4;
							break;
						case 5:
							i = 5;
							break;
						case 6:
							i = 6;
							break;
						case 7:
							i = 7;
							break;
						case 8:
							i = 8;
							break;
						case 9:
							i = 9;
							break
						}
						this._element.find(".formatAbove-type").prop("selectedIndex", i),
						this._element.find(".formatAbove-type").trigger("change"),
						this._drawPreviewControl(this._style)
					} else
						t instanceof n.DuplicateRule ? (ci = t, this._style = ci.style, this._element.find(".formatUnique-type").prop("selectedIndex", 0), this._drawPreviewControl(this._style)) : t instanceof n.UniqueRule ? (li = t, this._style = li.style, this._element.find(".formatUnique-type").prop("selectedIndex", 1), this._drawPreviewControl(this._style)) : t instanceof n.FormulaRule && (a = r._getformulaRuleType(t), i = a.selectorIndex, this._style = a.style, a.ruleType === 1 ? (this._element.find(".formatContain-type").prop("selectedIndex", i), this._element.find(".formatContain-type").trigger("change")) : a.ruleType === 5 && (yi = a.formula, this._element.find(".formula-input").val(yi)), this._drawPreviewControl(this._style))
				},
				f.prototype._getIndexofScaleValueType = function (n) {
					var t;
					switch (n) {
					case 2:
					case 1:
						t = 0;
						break;
					case 0:
						t = 1;
						break;
					case 3:
						t = 2;
						break;
					case 6:
						t = 3;
						break;
					case 4:
						t = 4;
						break;
					case 5:
					case 7:
						t = 5;
						break
					}
					return t
				},
				f.prototype._getIconCriterionProperty = function (n, t) {
					return n[t]
				},
				f.prototype._getIsGreaterThanOrEqualTo = function (n) {
					return this._getIconCriterionProperty(n, "isGreaterThanOrEqualTo")
				},
				f.prototype._getIconValue = function (n) {
					return this._getIconCriterionProperty(n, "iconValue")
				},
				f.prototype._getIndexofIconValueType = function (n) {
					var i = this._getIconCriterionProperty(n, "iconValueType"),
					t;
					switch (i) {
					case 1:
						t = 0;
						break;
					case 4:
						t = 1;
						break;
					case 7:
						t = 2;
						break;
					case 5:
						t = 3;
						break
					}
					return t
				},
				f.prototype._getIconValueTypeofIndex = function (n) {
					var t;
					switch (n) {
					case 0:
						t = 1;
						break;
					case 1:
						t = 4;
						break;
					case 2:
						t = 7;
						break;
					case 3:
						t = 5;
						break
					}
					return t
				},
				f.prototype._validateValue = function () {
					var h = parseInt(this._element.find(".ruleType").prop("selectedIndex")),
					i,
					f,
					s,
					r;
					switch (h) {
					case 0:
						break;
					case 1:
						var c = parseInt(this._element.find(".formatContain-type").prop("selectedIndex")),
						o = this._element.find(".operator").prop("selectedIndex"),
						e = this._element.find(".textBox-cell1"),
						l = this._element.find(".textBox-cell2");
						switch (c) {
						case 0:
							if (o === 0 || o === 1) {
								if (e.val() === "" || l.val() === "")
									return u.show(t.res.conditionalFormatting.exceptions.e4, t.res.title, 2), !1
							} else if (e.val() === "")
								return u.show(t.res.conditionalFormatting.exceptions.e4, t.res.title, 2), !1;
							break;
						case 1:
							if (e.val() === "")
								return u.show(t.res.conditionalFormatting.exceptions.e4, t.res.title, 2), !1;
							break
						}
						break;
					case 2:
						return i = parseInt(this._element.find(".itemCounts").val()),
						f = !0,
						(isNaN(i) || i > 1e3 || i < 1) && (u.show(t.res.conditionalFormatting.exceptions.e3, t.res.title, 2), f = !1),
						f;
						break;
					case 5:
						s = this._element.find(".formula-input").val(),
						r = (new n.Calc.Parser).parse(s);
						if (!(r instanceof n.Calc.Expressions.FunctionExpression) && !(r instanceof n.Calc.Expressions.CellExpression) && !(r instanceof n.Calc.Expressions.OperatorExpression))
							return u.show(t.res.conditionalFormatting.exceptions.e5, t.res.title, 2), !1;
						break
					}
					return !0
				},
				f.prototype._addRule = function () {
					var i = parseInt(this._element.find(".ruleType").prop("selectedIndex")),
					t,
					n;
					switch (i) {
					case 0:
						t = parseInt(this._element.find(".formatStyle").prop("selectedIndex"));
						switch (t) {
						case 0:
							this._addRuleOfColorScale(!1);
							break;
						case 1:
							this._addRuleOfColorScale(!0);
							break;
						case 2:
							this._addRuleOfDataBar();
							break;
						case 3:
							this._addRuleOfIconSets();
							break
						}
						break;
					case 1:
						n = parseInt(this._element.find(".formatContain-type").prop("selectedIndex"));
						switch (n) {
						case 0:
							this._addRuleOfCellValue();
							break;
						case 1:
							this._addRuleOfText();
							break;
						case 2:
							this._addRuleOfDatesOccuring();
							break;
						default:
							this._addRuleOfFormulaRule(n);
							break
						}
						break;
					case 2:
						this._addRuleOfformatRankedValue();
						break;
					case 3:
						this._addRuleOfformatAbove();
						break;
					case 4:
						this._addRuleOfformatUnique();
						break;
					case 5:
						this._addRuleOfuseFormula();
						break
					}
				},
				f.prototype._switchVisible = function (n, t, i) {
					var s = this._element.find(".formatOnValue"),
					o = this._element.find(".formatContain"),
					c = this._element.find(".formatRankedValue"),
					h = this._element.find(".formatAbove"),
					u = this._element.find(".formatUnique"),
					r = this._element.find(".useFormula"),
					e = this._element.find(".ruleType"),
					f = this._element.find(".preview");
					switch (n) {
					case 0:
						s.removeClass("hidden"),
						o.addClass("hidden"),
						c.addClass("hidden"),
						h.addClass("hidden"),
						u.addClass("hidden"),
						r.addClass("hidden"),
						f.addClass("hidden"),
						this._initformatOnValue(t),
						e.prop("selectedIndex", 0);
						break;
					case 1:
						s.addClass("hidden"),
						o.removeClass("hidden"),
						c.addClass("hidden"),
						h.addClass("hidden"),
						u.addClass("hidden"),
						r.addClass("hidden"),
						f.removeClass("hidden"),
						this._initformatContain(i),
						this._initPreview(),
						e.prop("selectedIndex", 1);
						break;
					case 2:
						s.addClass("hidden"),
						o.addClass("hidden"),
						c.removeClass("hidden"),
						h.addClass("hidden"),
						u.addClass("hidden"),
						r.addClass("hidden"),
						f.removeClass("hidden"),
						this._initformatRankedValue(),
						this._initPreview(),
						e.prop("selectedIndex", 2);
						break;
					case 3:
						s.addClass("hidden"),
						o.addClass("hidden"),
						c.addClass("hidden"),
						h.removeClass("hidden"),
						u.addClass("hidden"),
						r.addClass("hidden"),
						f.removeClass("hidden"),
						this._initformatAbove(),
						this._initPreview(),
						e.prop("selectedIndex", 3);
						break;
					case 4:
						s.addClass("hidden"),
						o.addClass("hidden"),
						c.addClass("hidden"),
						h.addClass("hidden"),
						u.removeClass("hidden"),
						r.addClass("hidden"),
						f.removeClass("hidden"),
						this._initformatUnique(),
						this._initPreview(),
						e.prop("selectedIndex", 4);
						break;
					case 5:
						s.addClass("hidden"),
						o.addClass("hidden"),
						c.addClass("hidden"),
						h.addClass("hidden"),
						u.addClass("hidden"),
						r.removeClass("hidden"),
						f.removeClass("hidden"),
						this._inituseFormula(),
						this._initPreview(),
						e.prop("selectedIndex", 5);
						break
					}
				},
				f.prototype._colorOfColor23Changed = function () {
					var t = this._element.find(".min-color-span").css("background-color"),
					i = this._element.find(".mid-color-span").css("background-color"),
					n = this._element.find(".max-color-span").css("background-color");
					this._formatStyle === 0 ? this._formatOnValue_previewColor23(t, n) : this._formatOnValue_previewColor23(t, i, n)
				},
				f.prototype._dataBarAppChanged = function () {
					var e = this._element.find(".barcolor1-span").css("background-color"),
					f = this._element.find(".barcolor2-span").css("background-color"),
					h = this._element.find(".fillSelector").prop("selectedIndex"),
					o = this._element.find(".borderSelector").prop("selectedIndex"),
					s = this._element.find(".barDirectionSelector").prop("selectedIndex"),
					u = this._element.find(".previewContainer-dataBar"),
					t = e,
					n,
					c,
					r,
					i;
					h === 1 && (n = "white"),
					o === 1 && (r = f),
					s === 1 ? (i = t, t = n, n = i, u.attr("align", "right")) : u.attr("align", "left"),
					this._formatRankedValue_previewDataBar(t, n, r)
				},
				f.prototype._initformatOnValue = function (n) {
					var s = this,
					t = this,
					i,
					nt,
					tt,
					d,
					ot,
					f,
					ut,
					u,
					ht,
					o,
					ct,
					r,
					et,
					e,
					ft,
					rt,
					v,
					it,
					g,
					l,
					b,
					p,
					a,
					y,
					w,
					h,
					k;
					$(".min-color-picker").colorpicker({
						valueChanged : function (n, i) {
							var r;
							r = i.color === undefined ? "red" : i.color,
							t._element.find(".min-color-span").css("background-color", r),
							t._colorOfColor23Changed()
						},
						choosedColor : function (n, i) {
							t._element.find(".min-color-frame").comboframe("close")
						},
						openColorDialog : function (n, i) {
							t._element.find(".min-color-frame").comboframe("close")
						}
					}),
					this._element.find(".min-color-frame").comboframe(),
					$(".min-color-picker").colorpicker("option", "value", "red"),
					this._element.find(".min-color-span").css("background-color", "red"),
					$(".mid-color-picker").colorpicker({
						valueChanged : function (n, i) {
							i.color === undefined ? t._element.find(".mid-color-span").css("background-color", "yellow") : t._element.find(".mid-color-span").css("background-color", i.color),
							t._colorOfColor23Changed()
						},
						choosedColor : function (n, i) {
							t._element.find(".mid-color-frame").comboframe("close")
						},
						openColorDialog : function (n, i) {
							t._element.find(".mid-color-frame").comboframe("close")
						}
					}),
					this._element.find(".mid-color-frame").comboframe(),
					$(".mid-color-picker").colorpicker("option", "value", "yellow"),
					this._element.find(".mid-color-span").css("background-color", "yellow"),
					$(".max-color-picker").colorpicker({
						valueChanged : function (n, i) {
							i.color === undefined ? t._element.find(".max-color-span").css("background-color", "green") : t._element.find(".max-color-span").css("background-color", i.color),
							t._colorOfColor23Changed()
						},
						choosedColor : function (n, i) {
							t._element.find(".max-color-frame").comboframe("close")
						},
						openColorDialog : function (n, i) {
							t._element.find(".max-color-frame").comboframe("close")
						}
					}),
					this._element.find(".max-color-frame").comboframe(),
					$(".max-color-picker").colorpicker("option", "value", "green"),
					this._element.find(".max-color-span").css("background-color", "green"),
					i = this._element.find(".formatStyle");
					if (n)
						switch (n) {
						case 0:
							i.prop("selectedIndex", 0);
							break;
						case 1:
							i.prop("selectedIndex", 1);
							break;
						case 2:
							i.prop("selectedIndex", 2);
							break;
						case 3:
							i.prop("selectedIndex", 3);
							break
						}
					else
						i.prop("selectedIndex", 0);
					i.trigger("change"),
					nt = this._element.find(".minSelector"),
					nt.prop("selectedIndex", 0),
					nt.trigger("change"),
					tt = this._element.find(".maxSelector"),
					tt.prop("selectedIndex", 0),
					tt.trigger("change"),
					d = this._element.find(".midSelector"),
					d.prop("selectedIndex", 3),
					d.trigger("change"),
					ot = this._element.find(".showBarOnly"),
					ot.prop("checked", !1),
					f = this._element.find(".minSelector2"),
					ut = f.prop("selectedIndex"),
					f.prop("selectedIndex", 5),
					ut !== f.prop("selectedIndex") && f.trigger("change"),
					u = this._element.find(".maxSelector2"),
					ht = u.prop("selectedIndex"),
					u.prop("selectedIndex", 5),
					ht !== u.prop("selectedIndex") && u.trigger("change"),
					$(".barcolor1-picker").colorpicker({
						valueChanged : function (n, i) {
							var r;
							r = i.color === undefined ? "rgb(99,142,198)" : i.color,
							t._element.find(".barcolor1-span").css("background-color", r),
							t._dataBarAppChanged()
						},
						choosedColor : function (n, i) {
							t._element.find(".barcolor1-frame").comboframe("close")
						},
						openColorDialog : function (n, i) {
							t._element.find(".barcolor1-frame").comboframe("close")
						}
					}),
					this._element.find(".barcolor1-frame").comboframe(),
					$(".barcolor1-picker").colorpicker("option", "value", "rgb(99,142,198)"),
					this._element.find(".barcolor1-span").css("background-color", "rgb(99,142,198)"),
					$(".barcolor2-picker").colorpicker({
						valueChanged : function (n, i) {
							var r;
							r = i.color === undefined ? "black" : i.color,
							t._element.find(".barcolor2-span").css("background-color", r),
							t._dataBarAppChanged()
						},
						choosedColor : function (n, i) {
							t._element.find(".barcolor2-frame").comboframe("close")
						},
						openColorDialog : function (n, i) {
							t._element.find(".barcolor2-frame").comboframe("close")
						}
					}),
					this._element.find(".barcolor2-frame").comboframe(),
					$(".barcolor2-picker").colorpicker("option", "value", "black"),
					this._element.find(".barcolor2-span").css("background-color", "black"),
					o = this._element.find(".fillSelector"),
					ct = o.prop("selectedIndex"),
					o.prop("selectedIndex", 0),
					ct !== o.prop("selectedIndex") && o.trigger("change"),
					r = this._element.find(".borderSelector"),
					et = r.prop("selectedIndex"),
					r.prop("selectedIndex", 0),
					et !== r.prop("selectedIndex") && r.trigger("change"),
					e = this._element.find(".barDirectionSelector"),
					ft = e.prop("selectedIndex"),
					e.prop("selectedIndex", 0),
					ft !== e.prop("selectedIndex") && e.trigger("change"),
					rt = this._element.find(".negativeBtn"),
					rt.button(),
					rt.click(function () {
						var n = r.prop("selectedIndex");
						s.negativeDialog || (s.negativeDialog = new c);
						$(s.negativeDialog).on("dialogClose", function (n, i) {
							i && (t._negativeDialogData = i),
							t.negativeDialog = null
						});
						s.negativeDialog.open(n, s._negativeDialogData)
					}),
					this._dataBarAppChanged(),
					this._spaniconStyleImages === undefined && (this._spaniconStyleImages = []),
					this._speratoriconStyleImages === undefined && (this._speratoriconStyleImages = []),
					v = this._element.find(".reverseIconOrder"),
					v.prop("checked") !== !1 && (v.prop("checked", !1), v.trigger("change")),
					it = this._element.find(".showIconOnly"),
					it.prop("checked") !== !1 && it.prop("checked", !1);
					var at = this._element.find(".iconStyleIcon1-span"),
					vt = this._element.find(".iconStyleIcon2-span"),
					yt = this._element.find(".iconStyleIcon3-span"),
					st = $("#icon-sets-popup-dialog"),
					lt = st.find("ul");
					st.gcuipopup({
						autoHide : !0,
						position : {
							of : at,
							my : "left top",
							at : "right top"
						},
						collision : "fit fit",
						showing : function (n, t) {
							lt.removeClass("hidden")
						},
						hidden : function (n, i) {
							t._element.find(".iconStyle-frame").comboframe("close")
						}
					}),
					this._element.find(".iconStyle-frame").comboframe(),
					g = ["up-arrow-green", "right-arrow-yellow", "down-arrow-red"],
					this._formatOnValue_iconSets_updateIcons(g, g),
					this._formatOnValue_IconSets_switchVisible(3),
					this._iconNames = "3-arrows-icon-set",
					l = this._element.find(".value1Selector"),
					l.prop("selectedIndex") !== 1 && (l.prop("selectedIndex", 1), l.trigger("change")),
					b = this._element.find(".value2Selector"),
					b.prop("selectedIndex") !== 1 && (b.prop("selectedIndex", 1), b.trigger("change")),
					p = this._element.find(".value3Selector"),
					p.prop("selectedIndex") !== 1 && (p.prop("selectedIndex", 1), p.trigger("change")),
					a = this._element.find(".value4Selector"),
					a.prop("selectedIndex") !== 1 && (a.prop("selectedIndex", 1), a.trigger("change")),
					t._formatOnValue_iconSets_updateValues("3-arrows-icon-set"),
					y = this._element.find(".operator1"),
					y.prop("selectedIndex") !== 0 && (y.prop("selectedIndex", 0), y.trigger("change")),
					w = this._element.find(".operator2"),
					w.prop("selectedIndex") !== 0 && (w.prop("selectedIndex", 0), w.trigger("change")),
					h = this._element.find(".operator3"),
					h.prop("selectedIndex") !== 0 && (h.prop("selectedIndex", 0), h.trigger("change")),
					k = this._element.find(".operator4"),
					k.prop("selectedIndex") !== 0 && (k.prop("selectedIndex", 0), k.trigger("change"))
				},
				f.prototype._formatOnValue_iconSets_updateValues = function (n, t) {
					this._iconNames = n;
					var c = this._element.find(".value1Selector").prop("selectedIndex"),
					h = this._element.find(".value2Selector").prop("selectedIndex"),
					a = this._element.find(".value3Selector").prop("selectedIndex"),
					v = this._element.find(".value4Selector").prop("selectedIndex"),
					i,
					r,
					u,
					f;
					switch (n) {
					case "3-arrows-icon-set":
					case "3-arrows-gray-icon-set":
					case "3-triangles-icon-set":
					case "3-traffic-lights-unrimmed-icon-set":
					case "3-traffic-lights-rimmed-icon-set":
					case "3-signs-icon-set":
					case "3-symbols-circled-icon-set":
					case "3-symbols-uncircled-icon-set":
					case "3-flags-icon-set":
					case "3-stars-icon-set":
						switch (c) {
						case 0:
							i = 0;
							break;
						case 1:
						case 3:
							i = 67;
							break;
						case 2:
							i = "";
							break
						}
						switch (h) {
						case 0:
							r = 0;
							break;
						case 1:
						case 3:
							r = 33;
							break;
						case 2:
							r = "";
							break
						}
						break;
					case "4-arrows-gray-icon-set":
					case "4-arrows-icon-set":
					case "4-traffic-lights-icon-set":
					case "red-to-black-icon-set":
					case "4-ratings-icon-set":
						switch (c) {
						case 0:
							i = 0;
							break;
						case 1:
						case 3:
							i = 75;
							break;
						case 2:
							i = "";
							break
						}
						switch (h) {
						case 0:
							r = 0;
							break;
						case 1:
						case 3:
							r = 50;
							break;
						case 2:
							r = "";
							break
						}
						switch (a) {
						case 0:
							u = 0;
							break;
						case 1:
						case 3:
							u = 25;
							break;
						case 2:
							u = "";
							break
						}
						break;
					case "5-arrows-gray-icon-set":
					case "5-arrows-icon-set":
					case "5-quarters-icon-set":
					case "5-ratings-icon-set":
					case "5-boxes-icon-set":
						switch (c) {
						case 0:
							i = 0;
							break;
						case 1:
						case 3:
							i = 80;
							break;
						case 2:
							i = "";
							break
						}
						switch (h) {
						case 0:
							r = 0;
							break;
						case 1:
						case 3:
							r = 60;
							break;
						case 2:
							r = "";
							break
						}
						switch (a) {
						case 0:
							u = 0;
							break;
						case 1:
						case 3:
							u = 40;
							break;
						case 2:
							u = "";
							break
						}
						switch (v) {
						case 0:
							f = 0;
							break;
						case 1:
						case 3:
							f = 20;
							break;
						case 2:
							f = "";
							break
						}
						break
					}
					var o = this._element.find(".value1"),
					e = this._element.find(".value2"),
					s = this._element.find(".value3"),
					l = this._element.find(".value4");
					if (t !== undefined)
						switch (t) {
						case 1:
							o.val(i);
							break;
						case 2:
							e.val(r);
							break;
						case 3:
							s.val(u);
							break;
						case 4:
							l.val(f);
							break
						}
					else
						o.val(i), e.val(r), s.val(u), l.val(f);
					this._formatOnValue_iconSets_updatedesctiptions(o.val(), e.val(), s.val(), l.val())
				},
				f.prototype._formatOnValue_iconSets_updatedesctiptions = function (n, i, r, u) {
					var it = this._element.find(".iconSet-dataRow4"),
					g = this._element.find(".iconSet-dataRow5"),
					l,
					h,
					f,
					v,
					e,
					p,
					s,
					a;
					l = it.hasClass("hidden") ? !1 : !0,
					h = g.hasClass("hidden") ? !1 : !0;
					var nt = this._element.find(".des2_iconSet"),
					b = this._element.find(".des3_iconSet"),
					w = this._element.find(".des4_iconSet"),
					ft = this._element.find(".des5_iconSet"),
					k = "",
					tt = this._element.find(".operator1").prop("selectedIndex");
					tt === 1 && (k = " = "),
					f = "",
					v = this._element.find(".operator2").prop("selectedIndex"),
					v === 1 && (f = " = "),
					e = "",
					p = this._element.find(".operator3").prop("selectedIndex"),
					p === 1 && (e = " = "),
					s = "",
					a = this._element.find(".operator4").prop("selectedIndex"),
					a === 1 && (s = " = ");
					var ut = this._element.find(".value1Selector").prop("selectedIndex"),
					ot = this._element.find(".value2Selector").prop("selectedIndex"),
					et = this._element.find(".value3Selector").prop("selectedIndex"),
					rt = this._element.find(".value4Selector").prop("selectedIndex"),
					y = ut === 2 ? "Formula" : n,
					c = ot === 2 ? "Formula" : i,
					o = et === 2 ? "Formula" : r,
					d = rt === 2 ? "Formula" : u;
					y && nt.text(t.res.conditionalFormatting.newFormattingRule.formatOnValue.iconSets.description2 + k + y + " " + t.res.conditionalFormatting.common.and),
					c && (l ? b.text(t.res.conditionalFormatting.newFormattingRule.formatOnValue.iconSets.description2 + f + c + " " + t.res.conditionalFormatting.common.and) : b.text(t.res.conditionalFormatting.newFormattingRule.formatOnValue.iconSets.description2 + f + c)),
					h ? (o && w.text(t.res.conditionalFormatting.newFormattingRule.formatOnValue.iconSets.description2 + e + o + " " + t.res.conditionalFormatting.common.and), d && ft.text(t.res.conditionalFormatting.newFormattingRule.formatOnValue.iconSets.description2 + s + d)) : o && w.text(t.res.conditionalFormatting.newFormattingRule.formatOnValue.iconSets.description2 + e + o)
				},
				f.prototype._formatOnValue_iconSets_updateIcons = function (n, t) {
					var h = this._element.find(".iconStyleIcon1-span"),
					s = this._element.find(".iconStyleIcon2-span"),
					c = this._element.find(".iconStyleIcon3-span"),
					f = this._element.find(".iconStyleIcon4-span"),
					e = this._element.find(".iconStyleIcon5-span"),
					a = this._element.find(".icon1"),
					l = this._element.find(".icon2"),
					o = this._element.find(".icon3"),
					u = this._element.find(".icon4"),
					r = this._element.find(".icon5"),
					i;
					if (n) {
						for (i = 0; i < this._spaniconStyleImages.length; i++)
							switch (i) {
							case 0:
								h.removeClass(this._spaniconStyleImages[i]);
								break;
							case 1:
								s.removeClass(this._spaniconStyleImages[i]);
								break;
							case 2:
								c.removeClass(this._spaniconStyleImages[i]);
								break;
							case 3:
								f.removeClass(this._spaniconStyleImages[i]);
								break;
							case 4:
								e.removeClass(this._spaniconStyleImages[i]);
								break
							}
						for (i = 0; i < n.length; i++)
							switch (i) {
							case 0:
								h.addClass(n[i]);
								break;
							case 1:
								s.addClass(n[i]);
								break;
							case 2:
								c.addClass(n[i]);
								break;
							case 3:
								f.addClass(n[i]),
								f.addClass("iconSetsIcons");
								break;
							case 4:
								e.addClass(n[i]),
								e.addClass("iconSetsIcons");
								break
							}
						for (this._spaniconStyleImages = n, i = n.length; i < 5; i++)
							switch (i) {
							case 3:
								f.removeClass("iconSetsIcons");
								break;
							case 4:
								e.removeClass("iconSetsIcons");
								break
							}
					}
					if (t) {
						for (i = 0; i < this._speratoriconStyleImages.length; i++)
							switch (i) {
							case 0:
								a.removeClass(this._speratoriconStyleImages[i]);
								break;
							case 1:
								l.removeClass(this._speratoriconStyleImages[i]);
								break;
							case 2:
								o.removeClass(this._speratoriconStyleImages[i]);
								break;
							case 3:
								u.removeClass(this._speratoriconStyleImages[i]);
								break;
							case 4:
								r.removeClass(this._speratoriconStyleImages[i]);
								break
							}
						for (i = 0; i < t.length; i++)
							switch (i) {
							case 0:
								a.addClass(t[i]);
								break;
							case 1:
								l.addClass(t[i]);
								break;
							case 2:
								o.addClass(t[i]);
								break;
							case 3:
								u.addClass(t[i]),
								u.addClass("iconSetsIcons");
								break;
							case 4:
								r.addClass(t[i]),
								r.addClass("iconSetsIcons");
								break
							}
						for (this._speratoriconStyleImages = t, i = t.length; i < 5; i++)
							switch (i) {
							case 3:
								u.removeClass("iconSetsIcons");
								break;
							case 4:
								r.removeClass("iconSetsIcons");
								break
							}
					}
				},
				f.prototype._formatOnValue_previewColor23 = function (n, t, i) {
					var u = this._element.find(".previewOfColor23");
					r._setLinearGradient(u, n, t, i)
				},
				f.prototype._formatOnValue_switchVisible = function (n) {
					this._formatStyle = n;
					var r = this._element.find(".color23"),
					u = this._element.find(".color3"),
					t = this._element.find(".dataBar"),
					i = this._element.find(".iconSets");
					switch (n) {
					case 0:
						r.removeClass("hidden"),
						t.addClass("hidden"),
						i.addClass("hidden"),
						u.addClass("hidden"),
						this._formatOnValue_previewColor23("red", "green");
						break;
					case 1:
						r.removeClass("hidden"),
						t.addClass("hidden"),
						i.addClass("hidden"),
						u.removeClass("hidden"),
						this._formatOnValue_previewColor23("red", "yellow", "green");
						break;
					case 2:
						r.addClass("hidden"),
						t.removeClass("hidden"),
						i.addClass("hidden");
						break;
					case 3:
						r.addClass("hidden"),
						t.addClass("hidden"),
						i.removeClass("hidden");
						break
					}
				},
				f.prototype._formatOnValue_IconSets_switchVisible = function (n) {
					var r = this._element.find(".iconSet-dataRow4"),
					u = this._element.find(".iconSet-dataRow5"),
					t = this._element.find(".row3-mayHiddenParts"),
					i = this._element.find(".row4-mayHiddenParts");
					n > 3 ? n > 4 ? (r.removeClass("hidden"), u.removeClass("hidden"), t.removeClass("hidden"), i.removeClass("hidden")) : (r.removeClass("hidden"), u.addClass("hidden"), t.removeClass("hidden"), i.addClass("hidden")) : (r.addClass("hidden"), u.addClass("hidden"), t.addClass("hidden"), i.addClass("hidden"))
				},
				f.prototype._initformatContain = function (n) {
					var u = this._element.find(".formatContain-type"),
					t,
					r,
					i;
					u.prop("selectedIndex", 0),
					u.trigger("change"),
					t = this._element.find(".operator"),
					n ? t.prop("selectedIndex", n) : t.prop("selectedIndex", 0),
					t.trigger("change"),
					r = this._element.find(".textBox-cell1"),
					r.val(""),
					i = this._element.find(".textBox-cell2"),
					i.val("")
				},
				f.prototype._formatContain_switchOperator = function (n) {
					var r = this._element.find(".operator"),
					i = r[0].options;
					r.empty();
					switch (n) {
					case 0:
						i[0] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.between),
						i[1] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.notBetween),
						i[2] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.equalTo),
						i[3] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.notEqualTo),
						i[4] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.greaterThan),
						i[5] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.lessThan),
						i[6] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.greaterThanOrEqu),
						i[7] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_cellValue.lessThanOrEqu);
						break;
					case 1:
						i[0] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_specificText.containing),
						i[1] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_specificText.notContaining),
						i[2] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_specificText.beginningWith),
						i[3] = new Option(t.res.conditionalFormatting.newFormattingRule.formatContain.operator_specificText.endingWith);
						break;
					case 2:
						i[0] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.yesterday),
						i[1] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.today),
						i[2] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.tomorrow),
						i[3] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.last7days),
						i[4] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.lastweek),
						i[5] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.thisweek),
						i[6] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.nextweek),
						i[7] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.lastmonth),
						i[8] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.thismonth),
						i[9] = new Option(t.res.conditionalFormatting.dateOccurringFormat.date.nextmonth);
						break
					}
				},
				f.prototype._formatContain_switchVisible = function (n) {
					var r = this._element.find(".operator"),
					u = this._element.find(".textBox-cell1"),
					t = this._element.find(".label-and"),
					i = this._element.find(".textBox-cell2");
					switch (n) {
					case 0:
					case 1:
						r.removeClass("hidden"),
						u.removeClass("hidden"),
						t.addClass("hidden"),
						i.addClass("hidden");
						break;
					case 2:
						r.removeClass("hidden"),
						u.addClass("hidden"),
						t.addClass("hidden"),
						i.addClass("hidden");
						break;
					case 3:
					case 4:
					case 5:
					case 6:
						r.addClass("hidden"),
						u.addClass("hidden"),
						t.addClass("hidden"),
						i.addClass("hidden");
						break
					}
				},
				f.prototype._formatContain_switchVisible_CellValue = function (n) {
					var r = this._element.find(".textBox-cell1"),
					i = this._element.find(".label-and"),
					t = this._element.find(".textBox-cell2");
					switch (n) {
					case 0:
					case 1:
						r.removeClass("hidden"),
						i.removeClass("hidden"),
						t.removeClass("hidden");
						break;
					default:
						r.removeClass("hidden"),
						i.addClass("hidden"),
						t.addClass("hidden");
						break
					}
				},
				f.prototype._initformatRankedValue = function () {
					var t = this._element.find(".formatRankedValue-type"),
					n;
					t.prop("selectedIndex", 0),
					n = this._element.find(".itemCounts"),
					n.spinner({
						min : 1,
						max : 1e3
					}),
					n.val(10)
				},
				f.prototype._formatRankedValue_previewDataBar = function (n, t, i) {
					var u = this._element.find(".previewOfDatabar");
					t ? r._setLinearGradient(u, n, t) : u.css("background", n),
					i ? u.css("border", "1px solid " + i) : u.css("border-width", "0px")
				},
				f.prototype._initformatAbove = function () {
					var n = this._element.find(".formatAbove-type");
					n.prop("selectedIndex", 0)
				},
				f.prototype._initformatUnique = function () {
					var n = this._element.find(".formatUnique-type");
					n.prop("selectedIndex", 0)
				},
				f.prototype._inituseFormula = function () {
					var n = this._element.find(".formula-input");
					n.val("")
				},
				f.prototype._initPreview = function () {
					var n = this,
					i = this._element.find(".format-button");
					i.button();
					if (this.formatCellDialog === undefined) {
						this.formatCellDialog = new t.FormatDialog;
						$(this.formatCellDialog).on("okClicked", function (i, r) {
							var f;
							n._style = r;
							if (r.font !== "" && r.font !== undefined) {
								var e = t.wrapper.spread.getActiveSheet(),
								s = e.getActiveColumnIndex(),
								h = e.getActiveRowIndex(),
								o = e.getActualStyle(h, s, 3),
								u = $("<span></span>");
								o.font !== undefined ? (n._style.font !== "" && (u.css("font", n._style.font), f = u.css("font-style")), u.css("font", o.font), f && u.css("font-style", f)) : r.font !== "" && u.css("font", r.font + t.res.defaultFont),
								n._style.font = u.css("font")
							}
							n._drawPreviewControl(n._style)
						})
					}
					this._style = undefined,
					this._drawPreviewControl(this._style)
				},
				f.prototype._drawPreviewControl = function (n) {
					var t = this._element.find(".preview-common");
					r._drawPreviewControl(t, this._style)
				},
				f.prototype._addRuleOfColorScale = function (i) {
					var k = t.wrapper.spread.getActiveSheet(),
					p = k.getSelections(),
					r,
					w = this._element.find(".minSelector"),
					e = parseInt(w.prop("selectedIndex")),
					u,
					a,
					f,
					l,
					o;
					switch (e) {
					case 0:
						r = 1;
						break;
					case 1:
						r = 0;
						break;
					case 2:
						r = 3;
						break;
					case 3:
						r = 6;
						break;
					case 4:
						r = 4;
						break
					}
					a = this._element.find(".maxSelector"),
					e = parseInt(a.prop("selectedIndex"));
					switch (e) {
					case 0:
						u = 2;
						break;
					case 1:
						u = 0;
						break;
					case 2:
						u = 3;
						break;
					case 3:
						u = 6;
						break;
					case 4:
						u = 4;
						break
					}
					var c = this._element.find(".minValue").val(),
					y = this._element.find(".maxValue").val(),
					h = this._element.find(".min-color-span").css("background-color"),
					v = this._element.find(".max-color-span").css("background-color");
					if (i) {
						l = this._element.find(".midSelector"),
						e = parseInt(l.prop("selectedIndex"));
						switch (e) {
						case 0:
							f = 0;
							break;
						case 1:
							f = 3;
							break;
						case 2:
							f = 6;
							break;
						case 3:
							f = 4;
							break
						}
						var d = this._element.find(".midValue").val(),
						b = this._element.find(".mid-color-span").css("background-color"),
						s = new n.ThreeScaleRule(r, c, h, f, d, b, u, y, v);
						s.ranges = p,
						this._notApplySetting ? this._rule = s : t.actions.doAction("addRule", t.wrapper.spread, s)
					} else
						o = new n.TwoScaleRule(r, c, h, u, y, v), o.ranges = p, this._notApplySetting ? this._rule = o : t.actions.doAction("addRule", t.wrapper.spread, o)
				},
				f.prototype._addRuleOfDataBar = function () {
					var a = t.wrapper.spread.isPaintSuspended(),
					f,
					o,
					e;
					t.wrapper.spread.isPaintSuspended(!0);
					var w = t.wrapper.spread.getActiveSheet(),
					p = w.getSelections(),
					u,
					y = this._element.find(".minSelector2"),
					e = parseInt(y.prop("selectedIndex"));
					switch (e) {
					case 0:
						u = 1;
						break;
					case 1:
						u = 0;
						break;
					case 2:
						u = 3;
						break;
					case 3:
						u = 6;
						break;
					case 4:
						u = 4;
						break;
					case 5:
						u = 5;
						break
					}
					o = this._element.find(".maxSelector2"),
					e = parseInt(o.prop("selectedIndex"));
					switch (e) {
					case 0:
						f = 2;
						break;
					case 1:
						f = 0;
						break;
					case 2:
						f = 3;
						break;
					case 3:
						f = 6;
						break;
					case 4:
						f = 4;
						break;
					case 5:
						f = 7;
						break
					}
					var d = this._element.find(".minValue2").val(),
					k = this._element.find(".maxValue2").val(),
					b = this._element.find(".barcolor1-span").css("background-color"),
					c = this._element.find(".barcolor2-span").css("background-color"),
					h = this._element.find(".showBarOnly").prop("checked"),
					s = this._element.find(".fillSelector").prop("selectedIndex") === 0 ? !1 : !0,
					v = this._element.find(".borderSelector").prop("selectedIndex") === 0 ? !1 : !0,
					l = this._element.find(".barDirectionSelector").prop("selectedIndex") === 0 ? 0 : 1,
					i;
					i = new n.DataBarRule(u, r.parseValue(d), f, r.parseValue(k), b),
					i.showBarOnly(h),
					i.gradient(s),
					i.borderColor(c),
					i.showBorder(v),
					i.dataBarDirection(l),
					this._negativeDialogData && (i.negativeBorderColor(this._negativeDialogData.negativeBorderColor), i.negativeFillColor(this._negativeDialogData.negativeFillColor), i.useNegativeBorderColor(this._negativeDialogData.useNegativeBorderColor), i.useNegativeFillColor(this._negativeDialogData.useNegativeFillColor), i.axisColor(this._negativeDialogData.axisColor), i.axisPosition(this._negativeDialogData.axisPosition)),
					i.ranges = p,
					this._notApplySetting ? this._rule = i : t.actions.doAction("addRule", t.wrapper.spread, i),
					t.wrapper.spread.isPaintSuspended(a)
				},
				f.prototype._addRuleOfIconSets = function () {
					var nt = t.wrapper.spread.isPaintSuspended(),
					d,
					k,
					o,
					i,
					u;
					t.wrapper.spread.isPaintSuspended(!0),
					d = t.wrapper.spread.getActiveSheet(),
					k = d.getSelections();
					switch (this._iconNames) {
					case "3-arrows-icon-set":
						i = 0;
						break;
					case "3-arrows-gray-icon-set":
						i = 1;
						break;
					case "3-triangles-icon-set":
						i = 2;
						break;
					case "3-traffic-lights-unrimmed-icon-set":
						i = 5;
						break;
					case "3-traffic-lights-rimmed-icon-set":
						i = 6;
						break;
					case "3-signs-icon-set":
						i = 7;
						break;
					case "3-symbols-circled-icon-set":
						i = 8;
						break;
					case "3-symbols-uncircled-icon-set":
						i = 9;
						break;
					case "3-flags-icon-set":
						i = 4;
						break;
					case "3-stars-icon-set":
						i = 3;
						break;
					case "4-arrows-gray-icon-set":
						i = 11;
						break;
					case "4-arrows-icon-set":
						i = 10;
						break;
					case "4-traffic-lights-icon-set":
						i = 14;
						break;
					case "red-to-black-icon-set":
						i = 12;
						break;
					case "4-ratings-icon-set":
						i = 13;
						break;
					case "5-arrows-gray-icon-set":
						i = 16;
						break;
					case "5-arrows-icon-set":
						i = 15;
						break;
					case "5-quarters-icon-set":
						i = 18;
						break;
					case "5-ratings-icon-set":
						i = 17;
						break;
					case "5-boxes-icon-set":
						i = 19;
						break
					}
					var rt = this._element.find(".showIconOnly").prop("checked"),
					tt = this._element.find(".reverseIconOrder").prop("checked"),
					a = this._element.find(".operator1").prop("selectedIndex") === 0 ? !0 : !1,
					l = this._element.find(".operator2").prop("selectedIndex") === 0 ? !0 : !1,
					v = this._element.find(".operator3").prop("selectedIndex") === 0 ? !0 : !1,
					g = this._element.find(".operator4").prop("selectedIndex") === 0 ? !0 : !1,
					et = parseInt(this._element.find(".value1Selector").prop("selectedIndex")),
					e = this._getIconValueTypeofIndex(et),
					ot = parseInt(this._element.find(".value2Selector").prop("selectedIndex")),
					f = this._getIconValueTypeofIndex(ot),
					ft = parseInt(this._element.find(".value3Selector").prop("selectedIndex")),
					s = this._getIconValueTypeofIndex(ft),
					ut = parseInt(this._element.find(".value4Selector").prop("selectedIndex")),
					p = this._getIconValueTypeofIndex(ut),
					c = this._element.find(".value1").val(),
					h = this._element.find(".value2").val(),
					y = this._element.find(".value3").val(),
					w = this._element.find(".value4").val(),
					b = this._element.find(".iconSet-dataRow4"),
					it = this._element.find(".iconSet-dataRow5");
					o = new n.IconSetRule(i),
					o.showIconOnly(rt),
					o.reverseIconOrder(tt),
					u = o.iconCriteria(),
					it.hasClass("hidden") || b.hasClass("hidden") ? b.hasClass("hidden") ? (u[0] = f !== 7 ? new n.IconCriterion(l, f, r.parseValue(h)) : new n.IconCriterion(l, f, h), u[1] = e !== 7 ? new n.IconCriterion(a, e, r.parseValue(c)) : new n.IconCriterion(a, e, c)) : (u[0] = s !== 7 ? new n.IconCriterion(v, s, r.parseValue(y)) : new n.IconCriterion(v, s, y), u[1] = f !== 7 ? new n.IconCriterion(l, f, r.parseValue(h)) : new n.IconCriterion(l, f, h), u[2] = e !== 7 ? new n.IconCriterion(a, e, r.parseValue(c)) : new n.IconCriterion(a, e, c)) : (u[0] = p !== 7 ? new n.IconCriterion(g, p, r.parseValue(w)) : new n.IconCriterion(g, p, w), u[1] = s !== 7 ? new n.IconCriterion(v, s, r.parseValue(y)) : new n.IconCriterion(v, s, y), u[2] = f !== 7 ? new n.IconCriterion(l, f, r.parseValue(h)) : new n.IconCriterion(l, f, h), u[3] = e !== 7 ? new n.IconCriterion(a, e, r.parseValue(c)) : new n.IconCriterion(a, e, c)),
					o.ranges = k,
					this._notApplySetting ? this._rule = o : t.actions.doAction("addRule", t.wrapper.spread, o),
					t.wrapper.spread.isPaintSuspended(nt)
				},
				f.prototype._addRuleOfCellValue = function () {
					var s = t.wrapper.spread.getActiveSheet(),
					h = s.getSelections(),
					u,
					c = this._element.find(".operator"),
					l = parseInt(c.prop("selectedIndex")),
					i;
					switch (l) {
					case 0:
						i = 6;
						break;
					case 1:
						i = 7;
						break;
					case 2:
						i = 0;
						break;
					case 3:
						i = 1;
						break;
					case 4:
						i = 2;
						break;
					case 5:
						i = 4;
						break;
					case 6:
						i = 3;
						break;
					case 7:
						i = 5;
						break
					}
					var f = this._element.find(".textBox-cell1").val(),
					r = this._element.find(".textBox-cell2").val(),
					o = (f || "").toString().toUpperCase(),
					e = (r || "").toString().toUpperCase();
					o === "TRUE" ? f = !0 : o === "FALSE" && (f = !1),
					e === "TRUE" ? r = !0 : e === "FALSE" && (r = !1),
					u = new n.CellValueRule(i, f, r, this._style),
					u.ranges = h,
					this._notApplySetting ? this._rule = u : t.actions.doAction("addRule", t.wrapper.spread, u)
				},
				f.prototype._addRuleOfText = function () {
					var f = t.wrapper.spread.getActiveSheet(),
					o = f.getSelections(),
					r,
					s = this._element.find(".operator"),
					e = parseInt(s.prop("selectedIndex")),
					i,
					u;
					switch (e) {
					case 0:
						i = 0;
						break;
					case 1:
						i = 1;
						break;
					case 2:
						i = 2;
						break;
					case 3:
						i = 3;
						break
					}
					u = this._element.find(".textBox-cell1").val(),
					r = new n.SpecificTextRule(i, u, this._style),
					r.ranges = o,
					this._notApplySetting ? this._rule = r : t.actions.doAction("addRule", t.wrapper.spread, r)
				},
				f.prototype._addRuleOfDatesOccuring = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					f = u.getSelections(),
					e = parseInt(this._element.find(".operator").prop("selectedIndex")),
					i,
					r;
					switch (e) {
					case 0:
						i = 1;
						break;
					case 1:
						i = 0;
						break;
					case 2:
						i = 2;
						break;
					case 3:
						i = 3;
						break;
					case 4:
						i = 8;
						break;
					case 5:
						i = 7;
						break;
					case 6:
						i = 9;
						break;
					case 7:
						i = 5;
						break;
					case 8:
						i = 4;
						break;
					case 9:
						i = 6;
						break
					}
					r = new n.DateOccurringRule(i, this._style),
					r.ranges = f,
					this._notApplySetting ? this._rule = r : t.actions.doAction("addRule", t.wrapper.spread, r)
				},
				f.prototype._addRuleOfFormulaRule = function (i) {
					var l = t.wrapper.spread.getActiveSheet(),
					h = l.getSelections(),
					o,
					s;
					h.length > 1 && u.show(t.res.conditionalFormatting.exceptions.e6, t.res.title, 2);
					var r = h[0],
					c = new n.Calc.Expressions.RangeExpression(r.row, r.col, r.row + r.rowCount - 1, r.col + r.colCount - 1, !1, !1),
					e = this._unparse(null, c, 0, 0),
					f;
					switch (i) {
					case 3:
						f = "ISBLANK(" + e + ")";
						break;
					case 4:
						f = "NOT(ISBLANK(" + e + "))";
						break;
					case 5:
						f = "ISERROR(" + e + ")";
						break;
					case 6:
						f = "NOT(ISERROR(" + e + "))";
						break
					}
					o = new n.FormulaRule("=" + f, this._style),
					s = [],
					s.push(r),
					o.ranges = s,
					this._notApplySetting ? this._rule = o : t.actions.doAction("addRule", t.wrapper.spread, o)
				},
				f.prototype._addRuleOfformatRankedValue = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					f = u.getSelections(),
					e = this._element.find(".formatRankedValue-type").prop("selectedIndex") === 0 ? 0 : 1,
					r = this._element.find(".itemCounts").val(),
					i = new n.Top10Rule(e, r, this._style);
					i.ranges = f,
					this._notApplySetting ? this._rule = i : t.actions.doAction("addRule", t.wrapper.spread, i)
				},
				f.prototype._addRuleOfformatAbove = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					e = u.getSelections(),
					r,
					f = parseInt(this._element.find(".formatAbove-type").prop("selectedIndex")),
					i;
					switch (f) {
					case 0:
						i = 0;
						break;
					case 1:
						i = 1;
						break;
					case 2:
						i = 2;
						break;
					case 3:
						i = 3;
						break;
					case 4:
						i = 4;
						break;
					case 5:
						i = 5;
						break;
					case 6:
						i = 6;
						break;
					case 7:
						i = 7;
						break;
					case 8:
						i = 8;
						break;
					case 9:
						i = 9;
						break
					}
					r = new n.AverageRule(i, this._style),
					r.ranges = e,
					this._notApplySetting ? this._rule = r : t.actions.doAction("addRule", t.wrapper.spread, r)
				},
				f.prototype._addRuleOfformatUnique = function () {
					var r = t.wrapper.spread.getActiveSheet(),
					f = r.getSelections(),
					u = parseInt(this._element.find(".formatUnique-type").prop("selectedIndex")),
					i;
					switch (u) {
					case 0:
						i = new n.DuplicateRule(this._style);
						break;
					case 1:
						i = new n.UniqueRule(this._style);
						break
					}
					i.ranges = f,
					this._notApplySetting ? this._rule = i : t.actions.doAction("addRule", t.wrapper.spread, i)
				},
				f.prototype._addRuleOfuseFormula = function () {
					var r = t.wrapper.spread.getActiveSheet(),
					f = r.getSelections(),
					u = this._element.find(".formula-input").val(),
					i = new n.FormulaRule(u, this._style);
					i.ranges = f,
					this._notApplySetting ? this._rule = i : t.actions.doAction("addRule", t.wrapper.spread, i)
				},
				f
			}
			(t.BaseDialog),
			t.NewFormattingRuleDialog = o,
			c = function (n) {
				function i() {
					var i = this,
					r = {
						title : t.res.conditionalFormatting.newFormattingRule.formatOnValue.dataBar.negativeDialog.title,
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									i.close(),
									i._raiseClose(event, i._returnData()),
									i.destroy()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									i.close(),
									i._raiseClose(event, null),
									i.destroy()
								}
							}
						],
						beforeClose : function (n, t) {
							n.currentTarget && (i._raiseClose(n, null), i.destroy())
						}
					};
					n.call(this, "../dialogs/dialogs.html", ".negativeValueAndAxisSettings-dialog", r)
				}
				return __extends(i, n),
				i.prototype.destroy = function () {
					var r = $(".fillcolor-picker"),
					i = $(".bordercolor-picker"),
					t = $(".axiscolor-picker");
					r.length > 0 && r.children().length > 0 && r.colorpicker("destroy"),
					i.length > 0 && i.children().length > 0 && i.colorpicker("destroy"),
					t.length > 0 && t.children().length > 0 && t.colorpicker("destroy"),
					r.remove(),
					i.remove(),
					t.remove(),
					n.prototype.destroy.call(this)
				},
				i.prototype._raiseClose = function (n, t) {
					$(this).trigger("dialogClose", t)
				},
				i.prototype._init = function () {
					var t = this,
					n = this;
					$(".fillcolor-picker").colorpicker({
						valueChanged : function (t, i) {
							var r;
							r = i.color === undefined ? "red" : i.color,
							n._element.find(".fillcolor-span").css("background-color", r)
						},
						choosedColor : function (t, i) {
							n._element.find(".fillcolor-frame").comboframe("close")
						},
						openColorDialog : function (t, i) {
							n._element.find(".fillcolor-frame").comboframe("close")
						}
					}),
					this._element.find(".fillcolor-frame").comboframe(),
					$(".fillcolor-picker").colorpicker("option", "value", "red"),
					this._element.find(".fillcolor-span").css("background-color", "red"),
					$(".bordercolor-picker").colorpicker({
						valueChanged : function (t, i) {
							var r;
							r = i.color === undefined ? "black" : i.color,
							n._element.find(".bordercolor-span").css("background-color", r)
						},
						choosedColor : function (t, i) {
							n._element.find(".bordercolor-frame").comboframe("close")
						},
						openColorDialog : function (t, i) {
							n._element.find(".bordercolor-frame").comboframe("close")
						}
					}),
					this._element.find(".bordercolor-frame").comboframe(),
					$(".bordercolor-picker").colorpicker("option", "value", "black"),
					this._element.find(".bordercolor-span").css("background-color", "black"),
					$(".axiscolor-picker").colorpicker({
						valueChanged : function (t, i) {
							var r;
							r = i.color === undefined ? "black" : i.color,
							n._element.find(".axiscolor-span").css("background-color", r)
						},
						choosedColor : function (t, i) {
							n._element.find(".axiscolor-frame").comboframe("close")
						},
						openColorDialog : function (t, i) {
							n._element.find(".axiscolor-frame").comboframe("close")
						}
					}),
					this._element.find(".axiscolor-frame").comboframe(),
					$(".axiscolor-picker").colorpicker("option", "value", "black"),
					this._element.find(".axiscolor-span").css("background-color", "black"),
					this._element.find(".default-radio").prop("checked", !0).attr("autofocus", !0),
					this._element.find("input[name = 'axis-positon']").change(function () {
						t._element.find("input[name = 'axis-positon']:checked").val() === "none" ? t._element.find(".axiscolor-frame button").attr("disabled", "disabled") : t._element.find(".axiscolor-frame button").removeAttr("disabled")
					})
				},
				i.prototype._beforeOpen = function (n) {
					var r = n[0],
					t = n[1],
					i = this._element.find(".borderColor");
					r === 0 ? i.attr("disabled", "disabled") : i.removeAttr("disabled"),
					t && this._loadData(t)
				},
				i.prototype._loadData = function (n) {
					this._element.find(".fillcolor-span").css("background-color", n.negativeFillColor),
					this._element.find(".bordercolor-span").css("background-color", n.negativeBorderColor),
					this._element.find(".axiscolor-span").css("background-color", n.axisColor),
					n.useNegativeFillColor ? (this._element.find(".default-radio").prop("checked", !0), this._element.find("#fill-color-editor1").prop("checked", !0)) : this._element.find("#fill-color-editor2").prop("checked", !0),
					n.useNegativeBorderColor ? this._element.find("#border-color-editor1").prop("checked", !0) : this._element.find("#border-color-editor2").prop("checked", !0),
					n.axisPosition === 0 ? this._element.find("#axis-positon-editor1").prop("checked", !0) : n.axisPosition === 1 ? this._element.find("#axis-positon-editor2").prop("checked", !0) : this._element.find("#axis-positon-editor3").prop("checked", !0)
				},
				i.prototype._returnData = function () {
					var h,
					o,
					e,
					t,
					r,
					s,
					n,
					u,
					f,
					i;
					return e = this._element.find(".fillcolor-span").css("background-color"),
					o = this._element.find(".bordercolor-span").css("background-color"),
					s = this._element.find(".axiscolor-span").css("background-color"),
					u = this._element.find("input[name = 'fill-color']:checked").val(),
					r = u === "fillColor" ? !0 : !1,
					f = this._element.find("input[name = 'border-color']:checked").val(),
					t = f === "borderColor" ? !0 : !1,
					i = this._element.find("input[name = 'axis-positon']:checked").val(),
					n = i === "auto" ? 0 : i === "cell" ? 1 : 2,
					h = {
						negativeBorderColor : o,
						negativeFillColor : e,
						useNegativeBorderColor : t,
						useNegativeFillColor : r,
						axisColor : s,
						axisPosition : n
					}
				},
				i
			}
			(t.BaseDialog),
			t.NegativeValueandAxisDialog = c,
			r = function () {
				function i() {}

				return i._getStyle = function (i, r) {
					var u = new n.Style,
					e;
					switch (i) {
					case 0:
						u.backColor = "#FFB6C1",
						u.foreColor = "#8B0000";
						break;
					case 1:
						u.backColor = "#F0E68C",
						u.foreColor = "#BDB76B";
						break;
					case 2:
						u.backColor = "#90EE90",
						u.foreColor = "#006400";
						break;
					case 3:
						u.backColor = "#FFB6C1";
						break;
					case 4:
						u.foreColor = "#8B0000";
						break;
					case 5:
						u.borderBottom = new n.LineBorder("#8B0000", 1),
						u.borderLeft = new n.LineBorder("#8B0000", 1),
						u.borderTop = new n.LineBorder("#8B0000", 1),
						u.borderRight = new n.LineBorder("#8B0000", 1);
						break;
					case 6:
						u = r;
						if (r.font !== "" && r.font !== undefined) {
							var o = t.wrapper.spread.getActiveSheet(),
							h = o.getActiveColumnIndex(),
							c = o.getActiveRowIndex(),
							s = o.getActualStyle(c, h, 3),
							f = $("<span></span>");
							s.font !== undefined ? (r.font !== "" && (f.css("font", r.font), e = f.css("font-style")), f.css("font", s.font), e && f.css("font-style", e)) : r.font !== "" && f.css("font", r.font + t.res.defaultFont),
							u.font = f.css("font")
						}
						break
					}
					return u
				},
				i._setLinearGradient = function (n, t, i, r) {
					r === undefined ? (n.css("background-image", "linear-gradient(to right, " + t + ", " + i + ")"), n.css("background-image", "-o-linear-gradient(to right, " + t + ", " + i + ")"), n.css("background-image", "-moz-linear-gradient(to right, " + t + ", " + i + ")"), n.css("background-image", "-webkit-linear-gradient(to right, " + t + ", " + i + ")"), n.css("background-image", "-ms-linear-gradient(to right, " + t + ", " + i + ")"), n.css("background-image", "-webkit-gradient(linear, left top, right top, color-stop(0, " + t + "),  color-stop(1, " + i + "))")) : (n.css("background-image", "linear-gradient(to right, " + t + ", " + i + ", " + r + ")"), n.css("background-image", "-o-linear-gradient(to right, " + t + ", " + i + ", " + r + ")"), n.css("background-image", "-moz-linear-gradient(to right, " + t + ", " + i + ", " + r + ")"), n.css("background-image", "-webkit-linear-gradient(to right, " + t + ", " + i + ", " + r + ")"), n.css("background-image", "-ms-linear-gradient(to right, " + t + ", " + i + ", " + r + ")"), n.css("background-image", "-webkit-gradient(linear, left top, right top, from(" + t + "), to(" + r + "),  color-stop(50%, " + i + "))"))
				},
				i._drawPreviewControl = function (n, r) {
					var f,
					u,
					o,
					e;
					r === undefined ? (n.text(t.res.conditionalFormatting.newFormattingRule.preview.noFormat), n.css("background-color", ""), n.css("color", "black"), n.css("font-style", "normal"), n.css("text-decoration", "none")) : (n.text(t.res.conditionalFormatting.newFormattingRule.preview.hasFormat), f = i._convertThemeColor(r.backColor), f === undefined && (f = r.backColor), n.css("background-color", f), u = i._convertThemeColor(r.foreColor), u === undefined && (u = r.foreColor), n.css("color", u), r.font !== undefined && r.font !== "" && (o = t.util.parseFont(r.font), n.css("font-style", o.fontStyle)), r.textDecoration && (e = t.util.toCSSTextDecoration(r.textDecoration), n.css("text-decoration", e)))
				},
				i._convertThemeColor = function (n) {
					var r = t.wrapper.spread.getActiveSheet().currentTheme().colors();
					return r.getColor(n)
				},
				i._getformulaRuleType = function (t) {
					var i,
					r,
					h,
					o = t,
					s,
					u,
					f,
					c,
					e;
					return h = o.style,
					s = (new n.Calc.Parser).parse(o.formula),
					s instanceof n.Calc.Expressions.FunctionExpression && (u = s, f = u.getFunctionName(), f === "ISBLANK" ? (i = 1, r = 3) : f === "ISERROR" ? (i = 1, r = 5) : f === "NOT" && u.args.length === 1 && (c = u.args[0], e = c.getFunctionName(), e === "ISBLANK" ? (i = 1, r = 4) : e === "ISERROR" && (i = 1, r = 6))),
					i === undefined && (i = 5), {
						ruleType : i,
						selectorIndex : r,
						style : h,
						formula : o.formula
					}
				},
				i.parseValue = function (n) {
					return !isNaN(n) && isFinite(n) ? parseFloat(n) : n
				},
				i._drawIconSetPreview = function (n, t, r) {
					switch (t) {
					case 15:
						i._buildIconSet(n, ["up-arrow-green", "right-up-arrow-yellow", "right-arrow-yellow", "right-down-arrow-yellow", "down-arrow-red"], r);
						break;
					case 16:
						i._buildIconSet(n, ["up-arrow-gray", "right-up-arrow-gray", "right-arrow-gray", "right-down-arrow-gray", "down-arrow-gray"], r);
						break;
					case 19:
						i._buildIconSet(n, ["box-4", "box-3", "box-2", "box-1", "box-0"], r);
						break;
					case 18:
						i._buildIconSet(n, ["quarters-4", "quarters-3", "quarters-2", "quarters-1", "quarters-0"], r);
						break;
					case 17:
						i._buildIconSet(n, ["rating-4", "rating-3", "rating-2", "rating-1", "rating-0"], r);
						break;
					case 10:
						i._buildIconSet(n, ["up-arrow-green", "right-up-arrow-yellow", "right-down-arrow-yellow", "down-arrow-red"], r);
						break;
					case 11:
						i._buildIconSet(n, ["up-arrow-gray", "right-up-arrow-gray", "right-down-arrow-gray", "down-arrow-gray"], r);
						break;
					case 13:
						i._buildIconSet(n, ["rating-3", "rating-2", "rating-1", "rating-0"], r);
						break;
					case 12:
						i._buildIconSet(n, ["ball-red", "ball-pink", "ball-gray", "ball-black"], r);
						break;
					case 14:
						i._buildIconSet(n, ["traffic-light-green", "traffic-light-yellow", "traffic-light-red", "traffic-light-black"], r);
						break;
					case 0:
						i._buildIconSet(n, ["up-arrow-green", "right-arrow-yellow", "down-arrow-red"], r);
						break;
					case 1:
						i._buildIconSet(n, ["up-arrow-gray", "right-arrow-gray", "down-arrow-gray"], r);
						break;
					case 4:
						i._buildIconSet(n, ["flag-green", "flag-yellow", "flag-red"], r);
						break;
					case 7:
						i._buildIconSet(n, ["traffic-light-green", "up-triangle-yellow", "down-rhombus-red"], r);
						break;
					case 3:
						i._buildIconSet(n, ["star-solid", "star-half", "star-hollow"], r);
						break;
					case 8:
						i._buildIconSet(n, ["check-circled-green", "notice-circled-yellow", "close-circled-red"], r);
						break;
					case 9:
						i._buildIconSet(n, ["check-uncircled-green", "notice-uncircled-yellow", "close-uncircled-red"], r);
						break;
					case 6:
						i._buildIconSet(n, ["traffic-light-rimmed-green", "traffic-light-rimmed-yellow", "traffic-light-rimmed-red"], r);
						break;
					case 5:
						i._buildIconSet(n, ["traffic-light-green", "traffic-light-yellow", "traffic-light-red"], r);
						break;
					case 2:
						i._buildIconSet(n, ["up-triangle-green", "minus-yellow", "down-triangle-red"], r);
						break;
					default:
					}
				},
				i._buildIconSet = function (n, t, i) {
					for (var u, r = 0; r < t.length; r++)
						u = $("<span>").addClass("iconSetsIcons").addClass(t[r].toString()), i && u.css(i), n.append(u)
				},
				i
			}
			(),
			t.RuleFormatHelper = r,
			b = function (i) {
				function u() {
					var n = this,
					r = {
						title : t.res.formattingRulesManagerDialog.title,
						width : "auto",
						resizable : !1,
						modal : !0,
						buttons : [{
								text : t.res.ok,
								click : function () {
									t.wrapper.spread.isPaintSuspended(this._spreadSuspendState),
									t.actions.isFileModified = !0,
									n._applyRules(),
									n.close()
								}
							}, {
								text : t.res.close,
								click : function () {
									n.close()
								}
							}, {
								text : t.res.apply,
								click : function () {
									t.wrapper.spread.isPaintSuspended(this._spreadSuspendState),
									n._applyRules()
								}
							}
						]
					};
					i.call(this, "../dialogs/dialogs.html", ".format-rules-manager-dialog", r)
				}
				return __extends(u, i),
				u.prototype._applyRules = function () {
					var i,
					n;
					if (this._tempFormats === undefined)
						return;
					var f = t.wrapper.spread.getActiveSheet(),
					u = f.getConditionalFormats(),
					r = t.wrapper.spread.isPaintSuspended();
					t.wrapper.spread.isPaintSuspended(!0);
					try {
						for (u.clearRule(), i = 0; i < this._tempFormats.count(); i++)
							n = this._tempFormats.getRule(i), n.condition && delete n.condition, u.addRule(n)
					} catch (e) {
						t.wrapper.spread.isPaintSuspended(r);
						throw e;
					}
					t.wrapper.spread.isPaintSuspended(r),
					this._spreadSuspendState = r,
					t.wrapper.spread.isPaintSuspended(!0)
				},
				u.prototype._afterClose = function () {
					var i = t.wrapper.spread.getActiveSheet().getConditionalFormats(),
					r = i.getRules().concat(),
					n;
					for (i.clearRule(), n = 0; n < r.length; n++)
						i.addRule(r[n]);
					t.wrapper.spread.isPaintSuspended(this._spreadSuspendState)
				},
				u.prototype._addEventListner = function () {
					var n = this;
					$("#new-rule").on("click", function () {
						n._newFormatRule(),
						n.close()
					});
					$("#edit-rule").on("click", function () {
						if ($(".format-rules-grid-body .ui-state-default").length === 0)
							return;
						n._editFormatRule(),
						n.close()
					});
					$("#delete-rule").on("click", function () {
						return n._deleteFormatRule()
					});
					$("#format-rule-move-up").on("click", function () {
						return n._sortFormatRules(!0)
					});
					$("#format-rule-move-down").on("click", function () {
						return n._sortFormatRules(!1)
					})
				},
				u.prototype._newFormatRule = function () {
					var n = this;
					if (!n._newRuleDialog) {
						n._newRuleDialog = new o;
						$(n._newRuleDialog).on("dialogClose", function (t, i) {
							i.isCloseByOK && n._tempFormats.addRule(i.rule),
							n._newRuleDialog = null,
							n.open(!0)
						})
					}
					n._newRuleDialog.open(0, !0, 0, !0)
				},
				u.prototype._editFormatRule = function () {
					var u;
					if (this._tempFormats === undefined || this._tempFormats.count() === 0)
						return;
					var e = $(".format-rules-grid-body .ui-state-default").index(),
					s = this._tempFormats.count() - 1 - e,
					t = this._tempFormats.getRule(s),
					i,
					f;
					t instanceof n.CellValueRule ? i = 1 : t instanceof n.SpecificTextRule ? i = 1 : t instanceof n.DateOccurringRule ? i = 1 : t instanceof n.DuplicateRule ? i = 4 : t instanceof n.UniqueRule ? i = 4 : t instanceof n.Top10Rule ? i = 2 : t instanceof n.AverageRule ? i = 3 : t instanceof n.DataBarRule ? (i = 0, f = 2) : t instanceof n.TwoScaleRule ? (i = 0, f = 0) : t instanceof n.ThreeScaleRule ? (i = 0, f = 1) : t instanceof n.IconSetRule ? (i = 0, f = 3) : t instanceof n.FormulaRule && (i = r._getformulaRuleType(t).ruleType),
					u = this;
					if (!u._editRuleDialog) {
						u._editRuleDialog = new o;
						$(u._editRuleDialog).on("dialogClose", function (n, i) {
							if (i.isCloseByOK) {
								var r = u._tempFormats.getRules().indexOf(t);
								u._tempFormats.rules[r] = i.rule
							}
							u._editRuleDialog = null,
							u.open(!0)
						})
					}
					u._editRuleDialog.open(i, !1, f, !0, t)
				},
				u.prototype._deleteFormatRule = function () {
					var n,
					t;
					if (this._tempFormats === undefined || this._tempFormats.count() === 0)
						return;
					n = $(".format-rules-grid-body .ui-state-default").index();
					if (n === -1)
						return;
					t = this._tempFormats.count() - 1 - n,
					this._tempFormats.removeRule(this._tempFormats.getRule(t)),
					this._updateFormatsGrid()
				},
				u.prototype._sortFormatRules = function (n) {
					var u = $(".format-rules-grid-body .ui-state-default").index(),
					i,
					r,
					t;
					if (u === 0 && n || u === this._tempFormats.count() - 1 && !n)
						return;
					i = $.extend(!0, {}, this._tempFormats),
					this._tempFormats.clearRule(),
					r = i.count() - 1 - u;
					if (n)
						for (t = 0; t < i.count(); t++)
							t === r ? this._tempFormats.addRule(i.getRule(r + 1)) : t === r + 1 ? this._tempFormats.addRule(i.getRule(r)) : this._tempFormats.addRule(i.getRule(t));
					else
						for (t = 0; t < i.count(); t++)
							t === r ? this._tempFormats.addRule(i.getRule(r - 1)) : t === r - 1 ? this._tempFormats.addRule(i.getRule(r)) : this._tempFormats.addRule(i.getRule(t));
					this._updateFormatsGrid(),
					n ? $(".format-rules-grid-body tr:eq(" + (u - 1) + ")").addClass("ui-state-default") : $(".format-rules-grid-body tr:eq(" + (u + 1) + ")").addClass("ui-state-default")
				},
				u.prototype._init = function () {
					this._addEventListner()
				},
				u.prototype._beforeOpen = function (n) {
					var u = n[0],
					i,
					r;
					this._spreadSuspendState = t.wrapper.spread.isPaintSuspended(),
					t.wrapper.spread.isPaintSuspended(!0),
					i = t.wrapper.spread.getActiveSheet(),
					r = i.getConditionalFormats(),
					u || (this._tempFormats = $.extend(!0, {}, r)),
					this._updateFormatsGrid()
				},
				u.prototype._stringToRange = function (t) {
					var r = new n.Calc.Parser,
					i = r.parse(t);
					return i instanceof n.Calc.Expressions.ReferenceExpression ? i.getRange(0, 0) : null
				},
				u.prototype._addEventListnerForEachRow = function (t, i) {
					var r = this;
					t.on("click", function (n) {
						$(".format-rules-grid-body tr").removeClass("ui-state-default"),
						t.addClass("ui-state-default")
					});
					t.on("dblclick", function (n) {
						r._editFormatRule(),
						r.close()
					});
					t.find("input[type!=checkbox]").on("change", function (n) {
						return f(n)
					});
					t.find("input[type=checkbox]").on("change", function (n) {
						return u(n)
					});
					var e = this,
					f = function (t) {
						for (var s = t.currentTarget, o = s.value, f = o.slice(1).split(","), u, r = 0; r < i.ranges.length; r++)
							i.ranges.pop();
						for (r = 0; r < f.length; r++)
							u = e._stringToRange(f[r]), i.ranges.unshift(new n.Range(u.row, u.column, u.rowCount, u.columnCount))
					},
					u = function (n) {
						var t = n.currentTarget;
						i.stopIfTrue(t.checked)
					}
				},
				u.prototype._updateFormatsGrid = function () {
					var u,
					i,
					f,
					e,
					nt,
					d,
					c,
					y,
					s,
					l,
					v,
					g;
					for ($(".format-rules-grid-body").empty(), u = this._tempFormats.getRules(), i = u.length - 1; i >= 0; i--) {
						var p = $("<tr>"),
						h = $("<td>"),
						w = $("<td>"),
						o = $("<div>"),
						b = $("<td>"),
						tt = $("<input>"),
						k = $("<td>"),
						a = $("<input>");
						a.prop("type", "checkbox"),
						f = t.res.formattingRulesManagerDialog.ruleDescriptions;
						if (u[i]instanceof n.CellValueRule) {
							switch (u[i].operator) {
							case 6:
								e = t.util.format(f.valueBetween, u[i].value1, +u[i].value2);
								break;
							case 0:
								e = t.util.format(f.valueEquals, u[i].value1);
								break;
							case 2:
								e = t.util.format(f.valueGreateThan, u[i].value1);
								break;
							case 3:
								e = t.util.format(f.valueGreateThanOrEquals, u[i].value1);
								break;
							case 4:
								e = t.util.format(f.valueLessThan, u[i].value1);
								break;
							case 5:
								e = t.util.format(f.valueLessThanOrEquals, u[i].value1);
								break;
							case 7:
								e = t.util.format(f.valueNotBetween, u[i].value1, u[i].value2);
								break;
							case 1:
								e = t.util.format(f.valueNotEquals, u[i].value1);
								break
							}
							h.text(e),
							o.text(t.res.formattingRulesManagerDialog.previewText),
							r._drawPreviewControl(o, u[i].style)
						} else if (u[i]instanceof n.SpecificTextRule) {
							switch (u[i].operator) {
							case 2:
								e = t.util.format(f.valueBeginsWith, u[i].text);
								break;
							case 0:
								e = t.util.format(f.valueContains, u[i].text);
								break;
							case 1:
								e = t.util.format(f.valueNotContains, u[i].text);
								break;
							case 3:
								e = t.util.format(f.valueEndsWith, u[i].text);
								break
							}
							h.text(e),
							o.text(t.res.formattingRulesManagerDialog.previewText),
							r._drawPreviewControl(o, u[i].style)
						} else if (u[i]instanceof n.DateOccurringRule) {
							switch (u[i].type) {
							case 3:
								e = f.last7Days;
								break;
							case 5:
								e = f.lastMonth;
								break;
							case 8:
								e = f.lastWeek;
								break;
							case 6:
								e = f.nextMonth;
								break;
							case 9:
								e = f.nextWeek;
								break;
							case 4:
								e = f.thisMonth;
								break;
							case 7:
								e = f.thisWeek;
								break;
							case 0:
								e = f.today;
								break;
							case 2:
								e = f.tomorrow;
								break;
							case 1:
								e = f.yesterday;
								break
							}
							h.text(e),
							o.text(t.res.formattingRulesManagerDialog.previewText),
							r._drawPreviewControl(o, u[i].style)
						} else if (u[i]instanceof n.DuplicateRule)
							h.text(f.duplicateValues), o.text(t.res.formattingRulesManagerDialog.previewText), r._drawPreviewControl(o, u[i].style);
						else if (u[i]instanceof n.UniqueRule)
							h.text(f.uniqueValues), o.text(t.res.formattingRulesManagerDialog.previewText), r._drawPreviewControl(o, u[i].style);
						else if (u[i]instanceof n.Top10Rule) {
							switch (u[i].type) {
							case 0:
								e = t.util.format(f.top, u[i].rank);
								break;
							case 1:
								e = t.util.format(f.bottom, u[i].rank);
								break
							}
							h.text(e),
							o.text(t.res.formattingRulesManagerDialog.previewText),
							r._drawPreviewControl(o, u[i].style)
						} else if (u[i]instanceof n.AverageRule) {
							switch (u[i].type) {
							case 0:
								e = f.above;
								break;
							case 4:
								e = f.above1StdDev;
								break;
							case 6:
								e = f.above2StdDev;
								break;
							case 8:
								e = f.above3StdDev;
								break;
							case 1:
								e = f.below;
								break;
							case 5:
								e = f.below1StdDev;
								break;
							case 7:
								e = f.below2StdDev;
								break;
							case 9:
								e = f.below3StdDev;
								break;
							case 2:
								e = f.equalOrAbove;
								break;
							case 3:
								e = f.equalOrBelow;
								break
							}
							h.text(e),
							o.text(t.res.formattingRulesManagerDialog.previewText),
							r._drawPreviewControl(o, u[i].style)
						} else
							u[i]instanceof n.DataBarRule ? (h.text(f.dataBar), u[i].showBorder() && o.css("border", "1px solid " + u[i].borderColor()), u[i].gradient() ? r._setLinearGradient(o, u[i].color(), "white") : o.css("background-color", u[i].color()), a.prop("disabled", "disabled")) : u[i]instanceof n.TwoScaleRule ? (h.text(f.twoScale), r._setLinearGradient(o, u[i].getMinimumColor(), u[i].getMaximumColor()), a.prop("disabled", "disabled")) : u[i]instanceof n.ThreeScaleRule ? (h.text(f.threeScale), r._setLinearGradient(o, u[i].getMinimumColor(), u[i].getMidpointColor(), u[i].getMaximumColor()), a.prop("disabled", "disabled")) : u[i]instanceof n.IconSetRule ? (h.text(f.iconSet), r._drawIconSetPreview(o, u[i].iconSetType(), {
									margin : "2px 0 0 2px"
								}), a.prop("disabled", "disabled")) : u[i]instanceof n.FormulaRule && (h.text(t.util.format(f.formula, u[i].formula)), r._drawPreviewControl(o, u[i].style));
						for (nt = "", d = u[i].ranges, y = 0; y < d.length; y++)
							s = d[y], v = t.SpreadUtility.getRangeType(s), v == 3 && (c = new n.Calc.Expressions.RangeExpression, c.initBand(0, s.rowCount - 1, !1, !1, !0), l = this._unparse(null, c, 0, 0)), v == 0 && (c = new n.Calc.Expressions.RangeExpression, c.initBand(s.col, s.col + s.colCount - 1, !1, !1, !1), l = this._unparse(null, c, 0, 0)), v == 1 && (c = new n.Calc.Expressions.RangeExpression, c.initBand(s.row, s.row + s.rowCount - 1, !1, !1, !0), l = this._unparse(null, c, 0, 0)), v == 2 && (s.rowCount === 1 && s.colCount === 1 ? (g = new n.Calc.Expressions.CellExpression(s.row, s.col, !1, !1), l = this._unparse(null, g, 0, 0)) : (c = new n.Calc.Expressions.RangeExpression(s.row, s.col, s.row + s.rowCount - 1, s.col + s.colCount - 1, !1, !1, !1, !1), l = this._unparse(null, c, 0, 0))), nt += l + ",";
						tt.val("=" + l),
						b.append(tt),
						a.prop("checked", u[i].stopIfTrue()),
						k.append(a),
						o.css({
							width : "100%",
							height : "20px"
						}).appendTo(w),
						h.addClass("rule-column"),
						w.addClass("format-column"),
						b.addClass("applies-to-column"),
						k.addClass("stop-if-true-column"),
						p.append([h, w, b, k]),
						p.appendTo($(".format-rules-grid-body")),
						this._addEventListnerForEachRow(p, u[i])
					}
				},
				u
			}
			(t.BaseDialog),
			t.FormatRulesManagerDialog = b,
			f = function () {
				function n() {}

				return n._getTransparentColorString = function () {
					var n = $("<span></span>");
					return n.css("background-color", "rgba(0,0,0,0)"),
					n.css("background-color")
				},
				n.loadXML = function (n) {
					var t;
					return $.ajax({
						url : n,
						async : !1,
						type : "GET",
						dataType : "xml",
						success : function (n) {
							t = n
						}
					}),
					t
				},
				n
			}
			(),
			t.Helper = f
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.Sheets || (n.Sheets = {}));
	var t = n.Sheets
})(GcSpread || (GcSpread = {}))
