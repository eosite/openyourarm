var __extends = this.__extends || function (n, t) {
	function r() {
		this.constructor = n
	}
	for (var i in t)
		t.hasOwnProperty(i) && (n[i] = t[i]);
	r.prototype = t.prototype,
	n.prototype = new r
}, GcSpread;
(function (n) {
	(function (n) {
		(function (n) {
			var t = function (t) {
				function i() {
					t.apply(this, arguments)
				}
				return __extends(i, t),
				i.prototype.family = function (n) {
					return n === undefined ? this._family : (this._family !== n && (this._family = n, this._updateAppearance()), this)
				},
				i.prototype.size = function (n) {
					return n === undefined ? this._size : (this._size !== n && (this._size = n, this._updateAppearance()), this)
				},
				i.prototype.style = function (n) {
					return n === undefined ? this._style : (this._style !== n && (this._style = n, this._updateAppearance()), this)
				},
				i.prototype.weight = function (n) {
					return n === undefined ? this._weight : (this._weight !== n && (this._weight = n, this._updateAppearance()), this)
				},
				i.prototype.color = function (n) {
					return n === undefined ? this._color : (this._color = n, this.options.color = n, this._updateAppearance(), this)
				},
				i.prototype.underline = function (n) {
					return n === undefined ? this._underline : (this._underline !== n && (this._underline = n, this._updateAppearance()), this)
				},
				i.prototype.strikethrough = function (n) {
					return n === undefined ? this._strikethrough : (this._strikethrough !== n && (this._strikethrough = n, this._updateAppearance()), this)
				},
				i.prototype.colorOption = function (n, t) {
					return t === undefined ? this._colorPicker.colorpicker("option", n) : (this._colorPicker.colorpicker("option", n, t), this)
				},
				i.prototype._create = function () {
					this._id = i._currentId++,
					this.element.addClass("gcui-fontpicker"),
					this._createPicker("family", this.options.families, this.options.familyLabelText),
					this._createPicker("style", this.options.styles, this.options.styleLabelText),
					this._createPicker("size", this.options.size, this.options.sizeLabelText),
					this._createPicker("weight", this.options.weights, this.options.weightLabelText);
					var n = $("<div></div>").addClass("gcui-fontpicker-group-others").addClass("gcui-fontpicker-group");
					this.options.isColorVisible && ($("<label></label>").addClass("gcui-fontpicker-group-label").text(this.options.colorLabelText).appendTo(n), this._createColorPicker(n)),
					this._createNormalFont(n),
					n.append($('<div class="clear-float"></div>')),
					this._createEffects(n),
					this._createPreview(n),
					this.element.append(n)
				},
				i.prototype._setOption = function (n, t) {
					if (n === "customFontStyle") {
						this.options.customFontStyle = t;
						for (var i in this.options.customFontStyle)
							if (this.options.customFontStyle[i] === "disabled")
								switch (i) {
								case "family":
									$("#gcui-fontpicker-input-family-" + this._id).attr("disabled", "disabled"),
									$("#gcui-fontpicker-select-family-" + this._id).attr("disabled", "disabled");
									break;
								case "size":
									$("#gcui-fontpicker-input-size-" + this._id).attr("disabled", "disabled"),
									$("#gcui-fontpicker-select-size-" + this._id).attr("disabled", "disabled");
									break;
								case "weight":
									$("#gcui-fontpicker-input-weight-" + this._id).attr("disabled", "disabled"),
									$("#gcui-fontpicker-select-weight-" + this._id).attr("disabled", "disabled");
									break;
								case "style":
									$("#gcui-fontpicker-input-style-" + this._id).attr("disabled", "disabled"),
									$("#gcui-fontpicker-select-style-" + this._id).attr("disabled", "disabled");
									break
								}
					}
				},
				i.prototype._createPicker = function (n, t, r) {
					var f = this,
					h = $("<div></div>").addClass("gcui-fontpicker-group").addClass("gcui-fontpicker-picker-group").addClass("gcui-fontpicker-group-" + n),
					l = "gcui-fontpicker-input-" + n + "-" + this._id,
					e,
					a,
					u,
					s,
					c,
					o;
					$("<lable></lable>").attr("for", l).addClass("gcui-fontpicker-group-label").text(r).appendTo(h),
					e = $("<input>").attr({
							id : l,
							name : n,
							type : "text"
						}).addClass("ui-widget ui-widget-content").addClass("gcui-fontpicker-input-" + n),
					h.append(e),
					a = "gcui-fontpicker-select-" + n + "-" + this._id,
					u = $("<select></select>").attr({
							id : a,
							name : n + "-list",
							size : 6
						}).addClass("ui-widget ui-widget-content").addClass("gcui-fontpicker-select-" + n),
					n === "weight" && u.attr("size", 8);
					if (Array.isArray(t))
						for (s = 0; s < t.length; s++)
							u.append($("<option></option>").val(t[s]).text(t[s]));
					else
						for (c in t)
							u.append($("<option></option>").val(c).text(t[c]));
					o = "_" + n;
					u.on("change.gcui-fontpicker", function (r) {
						var s = u.val();
						e.val(i._valueToText(t, s)),
						f[o] !== s && (f[o] = s, f._onChanged(r, n, s))
					});
					e.on("keyup.gcui-fontpicker", function (r) {
						var s = i._textToValue(t, e.val());
						s !== undefined && (u.val(s), f[o] !== s && (f[o] = s, f._onChanged(r, n, s)))
					});
					e.on("blur.gcui-fontpicker", function (r) {
						var s = u.val() || "";
						e.val(i._valueToText(t, s)),
						f[o] !== s && (f[o] = s, f._onChanged(r, n, s))
					});
					h.append(u),
					this.element.append(h)
				},
				i.prototype._createColorPicker = function (n) {
					var i = this,
					t = $("<div></div>").addClass("gcui-fontpicker-color"),
					u = $("<span></span>").appendTo(t),
					f = $("<span></span>").addClass("gcui-fontpicker-color-preview").appendTo(u),
					r = $("<div></div>").addClass("gcui-fontpicker-color-popup").appendTo(t);
					this._colorPicker = $("<div></div>").addClass("gcui-fontpicker-color-picker").colorpicker({
							valueChanged : function (n, t) {
								t.color === undefined ? (i._color = undefined, i._onChanged(n, "color", undefined)) : (i._color = t, i._onChanged(n, "color", t))
							},
							choosedColor : function (n, i) {
								t.comboframe("close")
							},
							openColorDialog : function (n, i) {
								t.comboframe("close")
							}
						}).appendTo(r),
					t.comboframe().click(function () {
						t.comboframe("open")
					}),
					n.append(t)
				},
				i.prototype._createNormalFont = function (n) {
					var t = this,
					i = $("<div></div>").addClass("hidden"),
					r = "gcui-fontpicker-normal-font-" + this._id;
					$("<input>").attr("type", "checkbox").attr("id", r).addClass("gcui-fontpicker-normal-font").click(function (n) {
						this.checked && (t._family && (t._family = null, t._onChanged(n, "family", null)), t._style && (t._style = null, t._onChanged(n, "style", null)), t._size && (t._size = null, t._onChanged(n, "size", null)), t._weight && (t._weight = null, t._onChanged(n, "weight", null)), t._color && (t._color = null, t._onChanged(n, "color", null)), t._updateAppearance())
					}).appendTo(i),
					$("<label></label>").attr("for", r).text(this.options.normalFontLabelText).appendTo(i),
					n.append(i)
				},
				i.prototype._createPreview = function (n) {
					var t = $("<fieldset></fieldset>").addClass("ui-widget-content");
					$("<legend></legend>").text(this.options.previewLabelText).appendTo(t),
					$("<div></div>").addClass("gcui-fontpicker-preview-container").append($("<span></span>").text(this.options.previewText).addClass("gcui-fontpicker-preview")).appendTo(t),
					n.append(t)
				},
				i.prototype._createEffects = function (t) {
					var i = this,
					f = "effects-underline",
					e = "effects-strikethrough",
					u = $("<fieldset></fieldset>").addClass("ui-widget-content"),
					r;
					$("<legend></legend>").text(n.res.fontPicker.effects).appendTo(u),
					r = $("<div></div>").addClass("gcui-fontpicker-effects-container").appendTo(u),
					$("<input>").attr({
						id : f,
						type : "checkbox"
					}).addClass("effects-underline").click(function (n) {
						i._underline = i.element.find(".effects-underline").prop("checked"),
						i._onChanged(n, "underline", i._underline)
					}).appendTo(r),
					$("<label>").text(n.res.fontPicker.underline).attr("for", f).appendTo(r),
					$("<input>").attr({
						id : e,
						type : "checkbox"
					}).addClass("effects-strikethrough").click(function (n) {
						i._strikethrough = i.element.find(".effects-strikethrough").prop("checked"),
						i._onChanged(n, "strikethrough", i._strikethrough)
					}).appendTo(r),
					$("<label>").text(n.res.fontPicker.strikethrough).attr("for", e).appendTo(r),
					t.append(u)
				},
				i.prototype._updateAppearance = function () {
					this._updatePreview(),
					this.options.isColorVisible && this._colorPicker.colorpicker("option", "selectedItem", this._color),
					this._updateFamilyPicker(this._family),
					this._updatePicker("style", this.options.styles, this._style),
					this._updatePicker("size", this.options.size, this._size),
					this._updatePicker("weight", this.options.weights, this._weight),
					this._updateEffects("underline", this._underline),
					this._updateEffects("strikethrough", this._strikethrough),
					this._updateNormalFont()
				},
				i.prototype._updateFamilyPicker = function (n) {
					var r,
					i,
					u,
					t;
					n.match(/^["'].*["']$/) && (n = n.substring(1, n.length - 1)),
					u = new RegExp("^(.*,s*)?[\"']?" + n + "[\"']?s*(,.*)?$");
					for (t in this.options.families)
						if (u.test(t)) {
							r = this.options.families[t],
							i = t;
							break
						}
					r && i ? (this.element.find(".gcui-fontpicker-input-family").val(r), this.element.find(".gcui-fontpicker-select-family").val(i)) : (this.element.find(".gcui-fontpicker-input-family").val(""), this.element.find(".gcui-fontpicker-select-family").get(0).selectedIndex = -1)
				},
				i.prototype._updateEffects = function (n, t) {
					this.element.find(".effects-" + n).prop("checked", t)
				},
				i.prototype._updatePicker = function (n, t, r) {
					var u = i._valueToText(t, r);
					this.element.find(".gcui-fontpicker-input-" + n).val(u),
					this.element.find(".gcui-fontpicker-select-" + n).val(r)
				},
				i.prototype._updateNormalFont = function () {
					this._family || this._style || this._size || this._weight || this._color ? this.element.find(".gcui-fontpicker-normal-font").prop("checked", !1) : this.element.find(".gcui-fontpicker-normal-font").prop("checked", !0)
				},
				i.prototype._updatePreview = function () {
					var t = this.element.find(".gcui-fontpicker-preview"),
					i,
					n;
					this._color ? (this.element.find(".gcui-fontpicker-color-preview").css("background-color", this._color.color), t.css("color", this._color.color)) : (this.element.find(".gcui-fontpicker-color-preview").css("background-color", "transparent"), t.css("color", "black")),
					i = "",
					this._underline && (i += "underline "),
					this._strikethrough && (i += "line-through"),
					t.css("text-decoration", i),
					n = "",
					this._style && (n += this._style + " "),
					this._weight && (n += this._weight + " "),
					n += this._size ? this._size + "pt " : this.options.defaultSize + "pt ",
					n += this._family ? this._family + "," + this.options.alternativeFonts : this.options.alternativeFonts,
					t.css("font", n)
				},
				i._valueToText = function (n, t) {
					return Array.isArray(n) ? t : n[t]
				},
				i._textToValue = function (n, t) {
					var u,
					i,
					r,
					f;
					if (Array.isArray(n))
						return t;
					if (t === "")
						return t;
					for (t = t.toLocaleLowerCase(), u = Object.getOwnPropertyNames(n), i = 0; i < u.length; i++) {
						r = u[i],
						f = n[r].toLocaleLowerCase();
						if (f.indexOf(t) === 0)
							return r
					}
					return undefined
				},
				i.prototype._onChanged = function (n, t, i) {
					this._updatePreview(),
					(this._family || this._style || this._size || this._weight || this._color || this._underline || this._strikethrough) && this.element.find(".gcui-fontpicker-normal-font").prop("checked", !1),
					this._trigger("changed", n, {
						name : t,
						value : i
					})
				},
				i.widgetName = "fontpicker",
				i.defaultOptions = {
					familyLabelText : n.res.fontPicker.familyLabelText,
					styleLabelText : n.res.fontPicker.styleLabelText,
					sizeLabelText : n.res.fontPicker.sizeLabelText,
					weightLabelText : n.res.fontPicker.weightLabelText,
					colorLabelText : n.res.fontPicker.colorLabelText,
					normalFontLabelText : n.res.fontPicker.normalFontLabelText,
					previewLabelText : n.res.fontPicker.previewLabelText,
					previewText : n.res.fontPicker.previewText,
					families : n.res.fontPicker.fontFamilies,
					styles : n.res.fontPicker.fontStyles,
					size : [8, 9, 10, 11, 12, 14, 16, 18, 20, 24, 26, 28, 36, 48, 72],
					weights : n.res.fontPicker.fontWeights,
					alternativeFonts : n.res.fontPicker.alternativeFonts,
					defaultSize : n.res.fontPicker.defaultSize,
					isColorVisible : !0,
					customFontStyle : {
						family : !0,
						style : !0,
						size : !0,
						weight : !0
					}
				},
				i._currentId = 0,
				i
			}
			(gcui.gcuiWidget);
			n.FontPicker = t,
			t.prototype.options = $.extend(!0, {}, gcui.gcuiWidget.prototype.options, t.defaultOptions),
			$.gcui.registerWidget(t.widgetName, t.prototype)
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.Sheets || (n.Sheets = {}));
	var t = n.Sheets
})(GcSpread || (GcSpread = {}))
