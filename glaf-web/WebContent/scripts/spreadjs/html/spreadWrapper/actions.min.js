var GcSpread;
(function (n) {
	(function (n) {
		(function (t) {
			(function (i) {
				"use strict";
				function bt() {
					return app !== undefined && typeof app == "object"
				}
				function st(n) {
					for (var i = n.split("-"), r, t = 1; t < i.length; t++)
						r = i[t], i[t] = r[0].toUpperCase() + r.slice(1);
					return i.join("")
				}
				function ht(n, i, r) {
					var e = i.isPaintSuspended(),
					u,
					f;
					i.isPaintSuspended(!0);
					try {
						t.util.assert(typeof n == "string" && n !== "doAction", "actionName invalid"),
						n = st(n),
						u = this[n],
						u === undefined && (u = t.spreadActions[n]),
						t.util.assert(u !== undefined, 'cannot found the action "' + n + '".'),
						typeof r == "array" ? (f = r.slice(0), f.unshift(i)) : f = [i, r],
						u.apply(null, f)
					} catch (o) {
						i.isPaintSuspended(e);
						throw o;
					}
					i.isPaintSuspended(e),
					i.focus(!0)
				}
				function b(n) {
					return n.substring(n.lastIndexOf(".") + 1).toLowerCase()
				}
				function f(n, t, r) {
					i.currentFilePath ? v(n, i.currentFilePath, null, t, !1, r) : w(n, null, null, t)
				}
				function w(n, i, r, u) {
					var f = i,
					o,
					e;
					f || (f = {
							title : t.res.openFileDialogTitle,
							nameFilters : [t.res.spreadFileFilter, t.res.ssJSONToJSFilter, t.res.excelFileFilter, t.res.excelFileFilter2, t.res.csvFileFilter, t.res.allFileFilter]
						}),
					o = r === null || r === undefined ? null : JSON.stringify(r),
					e = function (t) {
						if (t.status === "cancelled")
							return;
						v(n, t.fileName, o, u)
					},
					app.showSaveDialog(f, e)
				}
				function v(n, t, i, r, u, f) {
					var e = b(t);
					switch (e) {
					case "ssjson":
						p(n, t, r, u, f, !1);
						break;
					case "js":
						p(n, t, r, u, f, !0);
						break;
					case "csv":
					case "pdf":
						y(n, t, i, r, u, f);
						break;
					case "xls":
					case "xlsx":
						i === null && (i = {
								saveFlags : 8
							}),
						y(n, t, i, r, u, f);
						break
					}
				}
				function e(n) {
					return n.toJSON({
						includeBindingSource : !0
					})
				}
				function p(n, u, f, o, s, h) {
					ct(n);
					var c = e(n);
					n.designerBindingPathSchema && (c.designerBindingPathSchema = n.designerBindingPathSchema),
					app.save(u, JSON.stringify(c), function (n) {
						n.status === "failed" ? t.MessageBox.show(n.message, t.res.title, 3) : (o || (i.currentFilePath = u.replace(/\//g, "\\"), i.isFileModified = !1, r(), t.fileMenu.updateRecentList(u)), t.fileMenu.closeFileScreen(), f && app.exit()),
						s && s.call(null)
					}, h)
				}
				function ct(n) {
					var f = $.fn.zTree.getZTreeObj("ztree-container"),
					u = null,
					i,
					r;
					f && (i = [], u = f.getNodes()[0], t.ribbon.treeNodeToArray(u.children, i), r = t.util.saveJSONSchema(i), $.isEmptyObject(r) || (n.designerBindingPathSchema = r))
				}
				function ft(n) {
					app.config("excelService.url", n)
				}
				function y(n, u, f, o, s, h) {
					$(".loading-placeholder").removeClass("hidden");
					var l = b(u),
					c;
					if (f)
						switch (l) {
						case "xls":
						case "xlsx":
							c = {
								spread : e(n),
								exportFileType : l,
								excel : f
							};
							break;
						case "csv":
							c = {
								spread : e(n),
								exportFileType : l,
								csv : f
							};
							break;
						case "pdf":
							c = {
								spread : e(n),
								exportFileType : l,
								pdf : f
							};
							break
						}
					else
						c = {
							spread : e(n),
							exportFileType : l
						};
					app.exportFile(u, JSON.stringify(c), function (n) {
						try {
							n.status !== "success" ? t.MessageBox.show(n.message, t.res.title, 3) : (s || (i.currentFilePath = u.replace(/\//g, "\\"), i.isFileModified = !1, r(), t.fileMenu.updateRecentList(u)), t.fileMenu.closeFileScreen(), o && app.exit()),
							h && h.call(null)
						} catch (f) {
							t.fileMenu.closeFileScreen(),
							$(".loading-placeholder").addClass("hidden")
						}
						$(".loading-placeholder").addClass("hidden")
					})
				}
				function u(n, i, r) {
					var u = i,
					f;
					u || (u = {
							title : t.res.openFileDialogTitle,
							nameFilters : [t.res.spreadFileFilter, t.res.ssJSONToJSFilter, t.res.excelFileFilter, t.res.excelFileFilter2, t.res.csvFileFilter, t.res.allFileFilter]
						}),
					f = function (t) {
						if (t.status === "cancelled")
							return;
						v(n, t.fileName, r, !1, !0)
					},
					app.showSaveDialog(u, f)
				}
				function et(n, i) {
					var r = {
						title : t.res.exportFileDialogTitle,
						nameFilters : [t.res.spreadFileFilter]
					};
					u(n, r, i)
				}
				function ot(n, i) {
					var r = {
						title : t.res.exportFileDialogTitle,
						nameFilters : [t.res.ssJSONToJSFilter]
					};
					u(n, r, i)
				}
				function yt(n, i) {
					var r = {
						title : t.res.exportFileDialogTitle,
						nameFilters : [t.res.excelFileFilter]
					};
					u(n, r, i)
				}
				function pt(n, i) {
					var r = {
						title : t.res.exportFileDialogTitle,
						nameFilters : [t.res.excelFileFilter2]
					};
					u(n, r, i)
				}
				function wt(n, i) {
					var r = {
						title : t.res.exportFileDialogTitle,
						nameFilters : [t.res.csvFileFilter]
					};
					u(n, r, i)
				}
				function lt(n, i) {
					var r = {
						title : t.res.exportFileDialogTitle,
						nameFilters : [t.res.pdfFileFilter]
					};
					u(n, r, i)
				}
				function at(n, i) {
					var r = i,
					u;
					r || (r = {
							title : t.res.openFileDialogTitle,
							nameFilters : [t.res.allSpreadFileFilter, t.res.spreadFileFilter, t.res.excelFileFilter, t.res.excelFileFilter2, t.res.csvFileFilter, t.res.allFileFilter]
						}),
					u = function (t) {
						if (t.status === "cancelled")
							return;
						var i = t.fileName.substring(t.fileName.lastIndexOf(".") + 1);
						switch (i.toLowerCase()) {
						case "ssjson":
							a(n, t.fileName);
							break;
						case "xls":
						case "xlsx":
						case "csv":
							c(n, t.fileName);
							break
						}
					},
					app.showOpenDialog(r, u)
				}
				function o(n, i, r) {
					var u = i,
					f;
					u || (u = {
							title : t.res.openFileDialogTitle,
							nameFilters : [t.res.spreadFileFilter, t.res.excelFileFilter, t.res.excelFileFilter2, t.res.csvFileFilter, t.res.allFileFilter]
						}),
					f = function (t) {
						if (t.status === "cancelled")
							return;
						var i = t.fileName.substring(t.fileName.lastIndexOf(".") + 1);
						switch (i.toLowerCase()) {
						case "ssjson":
							a(n, t.fileName, !0);
							break;
						case "xls":
						case "xlsx":
						case "csv":
							c(n, t.fileName, r, !0);
							break
						}
					},
					app.showOpenDialog(u, f)
				}
				function h(n) {
					t.MessageBox.show(t.res.unsavedWarning, t.res.title, 2, 2, n)
				}
				function vt(u, e) {
					if (e === "Blank") {
						if (app.getLicenseStatus() !== LicenseStatus.Valid && app.getLicenseStatus() !== LicenseStatus.Trial)
							return;
						i.reset(),
						t.fileMenu.closeFileScreen();
						return
					}
					var o = function (u, f) {
						$.ajax({
							url : "../resources/templates/" + f + ".ssjson",
							type : "GET",
							dataType : "json",
							success : function (n) {
								try {
									t.wrapper.reset(),
									t.wrapper.spread.fromJSON(n),
									i.currentFilePath = "",
									i.isFileModified = !1,
									r(),
									t.ribbon.updateRibbonBarStyle(),
									t.wrapper.spreadElement.trigger("FileOpened"),
									t.fileMenu.closeFileScreen()
								} catch (u) {
									t.fileMenu.closeFileScreen()
								}
							},
							error : function () {
								return t.MessageBox.show(t.res.requestTempalteFail, n.designer.res.title, 3)
							}
						})
					};
					i.isFileModified && (app.getLicenseStatus() === LicenseStatus.Valid || app.getLicenseStatus() === LicenseStatus.Trial) ? h(function (n, t) {
						switch (t) {
						case 2:
							f(u),
							o(u, e);
							break;
						case 3:
							o(u, e);
							break;
						case 4:
							return
						}
					}) : o(u, e)
				}
				function s(n) {
					var t,
					r,
					i;
					if (!n.getActiveSheet())
						if (n.getSheetCount() > 0)
							n.setActiveSheetIndex(0);
						else
							throw "no sheet";
					for (t = 0; t < n.getSheetCount(); t++)
						r = n.getSheet(t).getActiveColumnIndex(), i = n.getSheet(t).getActiveRowIndex(), r !== undefined && i !== undefined ? n.getSheet(t).setActiveCell(i, r) : n.getSheet(t).setActiveCell(0, 0)
				}
				function a(n, u, e) {
					var o = function (n, u) {
						app.open(u, function (f) {
							var o;
							if (f.status === "failed")
								t.MessageBox.show(f.message, t.res.title, 3);
							else
								try {
									e ? (o = JSON.parse(f.data), n.fromJSON(o), o.designerBindingPathSchema && (t.wrapper.spread.designerBindingPathSchema = o.designerBindingPathSchema), s(n), i.isFileModified = !0) : (t.wrapper.reset(), o = JSON.parse(f.data), t.wrapper.spread.fromJSON(o), o.designerBindingPathSchema && (t.wrapper.spread.designerBindingPathSchema = o.designerBindingPathSchema), s(t.wrapper.spread), i.currentFilePath = f.fileName.replace(/\//g, "\\"), i.isFileModified = !1, t.fileMenu.updateRecentList(u)),
									t.fileMenu.closeFileScreen(),
									r(),
									t.ribbon.updateRibbonBarStyle(),
									t.wrapper.spreadElement.trigger("FileOpened")
								} catch (h) {
									h === "no sheet" && (t.wrapper.reset(), t.MessageBox.show(t.res.openFileFormatError, t.res.title, 3))
								}
						})
					};
					i.isFileModified ? h(function (t, i) {
						switch (i) {
						case 2:
							f(n),
							o(n, u);
							break;
						case 3:
							o(n, u);
							break;
						case 4:
							return
						}
					}) : o(n, u)
				}
				function c(n, u, e, o) {
					var c = function (n, u) {
						$(".loading-placeholder").removeClass("hidden"),
						setTimeout(function () {
							app.importFile(u, JSON.stringify(e), function (f) {
								if (f.status === "success") {
									var e;
									try {
										e = JSON.parse(f.data)
									} catch (c) {
										t.fileMenu.closeFileScreen(),
										t.MessageBox.show("Parse file data error.", t.res.title, 3),
										$(".loading-placeholder").addClass("hidden")
									}
									if (e.spread)
										try {
											o ? (n.fromJSON(e.spread), s(n), i.isFileModified = !0) : (t.wrapper.reset(), t.wrapper.spread.fromJSON(e.spread), s(t.wrapper.spread), i.currentFilePath = u.replace(/\//g, "\\"), i.isFileModified = !1, t.fileMenu.updateRecentList(u)),
											t.fileMenu.closeFileScreen(),
											r(),
											t.ribbon.updateRibbonBarStyle(),
											t.wrapper.spreadElement.trigger("FileOpened")
										} catch (h) {
											h === "no sheet" && (t.wrapper.reset(), t.MessageBox.show(t.res.openFileFormatError, t.res.title, 3))
										}
									else
										t.MessageBox.show(e.error, t.res.title, 3)
								} else
									t.MessageBox.show(f.message, t.res.title, 3);
								$(".loading-placeholder").addClass("hidden")
							})
						}, 400)
					};
					i.isFileModified ? h(function (t, i) {
						switch (i) {
						case 2:
							f(n),
							c(n, u);
							break;
						case 3:
							c(n, u);
							break;
						case 4:
							return
						}
					}) : c(n, u)
				}
				function g(n, i) {
					var r = {
						title : t.res.importFileDialogTitle,
						nameFilters : [t.res.spreadFileFilter]
					};
					o(n, r, i)
				}
				function rt(n, i) {
					var r = {
						title : t.res.importFileDialogTitle,
						nameFilters : [t.res.allExcelFilter, t.res.excelFileFilter, t.res.excelFileFilter2]
					};
					o(n, r, i)
				}
				function ut(n, i) {
					var r = {
						title : t.res.importFileDialogTitle,
						nameFilters : [t.res.csvFileFilter]
					};
					o(n, r, i)
				}
				function it() {
					var n = function () {
						t.wrapper.reset(),
						t.ribbon.updateRibbonBarStyle(),
						i.currentFilePath = "",
						i.isFileModified = !1,
						r()
					};
					i.isFileModified ? h(function (i, r) {
						switch (r) {
						case 2:
							f(t.wrapper.spread, !1, n);
							break;
						case 3:
							n();
							break;
						case 4:
							return
						}
					}) : n()
				}
				function nt(n) {
					n.undoManager().undo()
				}
				function d(n) {
					n.undoManager().redo()
				}
				function tt() {
					var u = t.wrapper.spread.getActiveSheet(),
					c = u.getViewportWidth(1),
					h = u.getViewportHeight(1),
					r = u.getSelections(),
					n,
					f,
					e;
					if (!r || r.length === 0)
						return null;
					var i = r[0],
					s = 0,
					o = 0;
					if (r.length > 1)
						for (n = 1; n < r.length; n++)
							i = i.union(r[n]);
					for (n = 0; n < i.rowCount; n++)
						o += u.getRowHeight(i.row + n);
					for (f = 0; f < i.colCount; f++)
						s += u.getColumnWidth(i.col + f);
					return e = Math.min(c / s, h / o), {
						zoom : e,
						topRow : i.row,
						leftCol : i.col
					}
				}
				function r() {
					var n;
					i.isFileModified === !0 ? i.currentFilePath !== "" && $("title").text() !== l && (n = i.currentFilePath.substring(i.currentFilePath.lastIndexOf("\\") + 1), l = "* " + n + " - " + t.res.title, $("title").text(l)) : i.currentFilePath !== "" ? (n = i.currentFilePath.substring(i.currentFilePath.lastIndexOf("\\") + 1), $("title").text(n + " - " + t.res.title), t.wrapper.shouldModifiedHandlerExecute = !0) : $("title").text(t.res.title)
				}
				function k() {
					var n = app.active();
					n !== 0 && t.MessageBox.show(t.res.activateToolNotFound, t.res.title, 2)
				}
				i.currentFilePath = "",
				i.doAction = ht,
				i.save = f,
				i.saveAs = w,
				i.setServiceUrl = ft,
				i.exportJson = et,
				i.exportJS = ot,
				i.exportExcel = yt,
				i.exportExcel97 = pt,
				i.exportCsv = wt,
				i.exportPdf = lt,
				i.open = at,
				i._import = o,
				i.openTemplate = vt,
				i.openJson = a,
				i.openOtherFormat = c,
				i.importJson = g,
				i.importExcel = rt,
				i.importCsv = ut,
				i.reset = it,
				i.undo = nt,
				i.redo = d,
				i._getPreferredZoomInfo = tt,
				i.isFileModified = !1;
				var l;
				i.updateWindowTitle = r,
				i.active = k
			})(t.actions || (t.actions = {}));
			var i = t.actions
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.Sheets || (n.Sheets = {}));
	var t = n.Sheets
})(GcSpread || (GcSpread = {}))
