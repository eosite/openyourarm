var GcSpread;
(function (n) {
	(function (n) {
		(function (n) {
			"use strict";
			var i = function () {
				function i() {
					this.recentFiles = [],
					this.currentFolder = null,
					this.recentFolders = [],
					this.mainMenu = new t($(".menu-panel ul")),
					this.openMenu = new t($("#open-page .left-view ul")),
					this.importMenu = new t($("#import-page .left-view ul")),
					this.exportMenu = new t($("#export-page .left-view ul")),
					app.config("recentFiles") !== undefined && (this.recentFiles = app.config("recentFiles")),
					app.config("currentFolder") !== undefined && (this.currentFolder = app.config("currentFolder")),
					app.config("recentFolders") !== undefined && (this.recentFolders = app.config("recentFolders"))
				}
				return i.prototype._updateRecentFileList = function (n) {
					var r = n.replace(/\//g, "\\"),
					s = r.substring(r.lastIndexOf(".") + 1),
					h = r.substring(r.lastIndexOf("\\") + 1),
					o = r.substring(0, r.lastIndexOf("\\")),
					e = !1,
					u,
					t = "",
					i,
					f;
					switch (s.toLowerCase()) {
					case "ssjson":
						t = "ssjson-icon";
						break;
					case "js":
						t = "ssjson-icon";
						break;
					case "xls":
						t = "xls-icon";
						break;
					case "xlsx":
						t = "xlsx-icon";
						break;
					case "csv":
						t = "csv-icon";
						break;
					case "pdf":
						t = "pdf-icon";
						break
					}
					for (i = 0; i < this.recentFiles.length; i++)
						if (r === this.recentFiles[i].path + "\\" + this.recentFiles[i].name) {
							u = this.recentFiles[i],
							this.recentFiles.splice(i, 1),
							e = !0;
							break
						}
					e || (u = {
							iconClass : t,
							path : o,
							name : h
						}),
					f = this.recentFiles.unshift(u),
					f > 20 && this.recentFiles.splice(20, f - 20),
					app.config("recentFiles", this.recentFiles)
				},
				i.prototype._updateRecentFolderList = function (n) {
					for (var e = n.replace(/\//g, "\\"), i = e.substring(0, e.lastIndexOf("\\")), f = i.substring(i.lastIndexOf("\\") + 1), o = !1, r, u, t = 0; t < this.recentFolders.length; t++)
						if (i === this.recentFolders[t].path) {
							r = this.recentFolders[t],
							this.recentFolders.splice(t, 1),
							o = !0;
							break
						}
					o || (r = {
							path : i,
							name : f
						}),
					this.currentFolder = {
						path : i,
						name : f
					},
					u = this.recentFolders.unshift(r),
					u > 20 && this.recentFolders.splice(20, u - 20),
					app.config("currentFolder", this.currentFolder),
					app.config("recentFolders", this.recentFolders)
				},
				i.prototype.updateRecentList = function (n) {
					this._updateRecentFileList(n),
					this._updateRecentFolderList(n),
					this._fillRecentWorkbooksPage(this.recentFiles),
					this._fillCurrentFolderList(this.currentFolder),
					this._fillRecentFoldersList(this.recentFolders)
				},
				i.prototype._initPDFExportSheetSelect = function () {
					var f = "",
					u = n.wrapper.spread.sheets,
					r = u.length,
					t,
					i;
					if (r <= 0)
						return null;
					t = $(".export-sheet-select");
					if (!t)
						return;
					for (t.children().length > 0 && t.empty(), $("<option>").text(n.res.fileMenu.allSheet).appendTo(t), i = 0; i < r; i++)
						$("<option>").text(u[i].getName()).appendTo(t)
				},
				i.prototype.showFileScreen = function () {
					$(".file-menu").hasClass("hidden") && $(".file-menu").removeClass("hidden")
				},
				i.prototype.closeFileScreen = function () {
					$(".file-menu").hasClass("hidden") || $(".file-menu").addClass("hidden")
				},
				i.prototype.clickOnMainMenuTab = function (n) {
					if (n.target.getAttribute("href") === "#")
						return;
					$(".menu-title span").text(n.target.textContent)
				},
				i.prototype.bindNavigatorHandlers = function () {
					var n = this;
					$("#file-menu-goback").on("click", function () {
						return n.closeFileScreen()
					});
					this.mainMenu.onSelectItem = this.clickOnMainMenuTab
				},
				i.prototype.initPage = function () {
					this._initAllPages(),
					$(".menu-title span").text(n.res.fileMenu._new),
					this.mainMenu.showTab("#new-page"),
					this.bindNavigatorHandlers();
					$("#filemenu-save").on("click", function (t) {
						n.actions.save(n.wrapper.spread)
					});
					$("#filemenu-exit").on("click", function (n) {
						app.closeAllWindows()
					});
					$(window).on("keypress.licensed-feature", function (t) {
						return !(t.which === 115 && t.ctrlKey) && !(t.which === 19) ? !0 : (n.actions.save(n.wrapper.spread), t.preventDefault(), !1)
					})
				},
				i.prototype._initAllPages = function () {
					this._initNewPage(),
					this._initOpenPage(),
					this._initSaveAsPage(),
					this._initImportPage(),
					this._initExportPage()
				},
				i.prototype._initNewPage = function () {
					var t = this;
					$.ajax({
						url : "../resources/templates/templatesconfig.js",
						type : "GET",
						dataType : "json",
						success : function (n) {
							return t._fillAllTemplates(n)
						},
						error : function () {
							return n.MessageBox.show(n.res.requestTemplateConfigFail, n.res.title, 3)
						}
					})
				},
				i.prototype._createTemplateItem = function (n) {
					var u = this,
					t = $("<div>"),
					r,
					i;
					t.addClass("template-item"),
					r = $("<div>"),
					r.addClass("template-item-thumb").addClass(n.thumbClass),
					r.appendTo(t),
					i = $("<span>"),
					i.text(n.name),
					i.appendTo(t);
					t.on("click", function () {
						return u._onClickTemplateItem(n.name)
					});
					return t
				},
				i.prototype._onClickTemplateItem = function (t) {
					n.actions.openTemplate(n.wrapper.spread, t)
				},
				i.prototype._fillAllTemplates = function (n) {
					for (var r = $("#new-page"), i, t = 0; t < n.length; t++)
						i = this._createTemplateItem(n[t]), i.appendTo(r)
				},
				i.prototype._initOpenPage = function () {
					this._fillRecentWorkbooksPage(this.recentFiles),
					this._fillComputerPage(this.currentFolder, this.recentFolders)
				},
				i.prototype._createFileItem = function (n) {
					var e = this,
					t = $("<li>"),
					r = $("<div>"),
					i = $("<div>"),
					f = $("<div>"),
					u = $("<div>");
					i.addClass("file-label"),
					t.addClass("list-item"),
					r.addClass("list-item-big-icon").addClass(n.iconClass),
					f.text(n.name).addClass("file-name").appendTo(i),
					u.text(n.path).addClass("file-path").appendTo(i),
					t.append(r).append(i),
					t.addClass("only-for-licensed");
					t.on("click", function () {
						return e._onClickFileListItem(n)
					});
					return t
				},
				i.prototype._onClickFileListItem = function (t) {
					var i = t.name.substring(t.name.lastIndexOf(".") + 1);
					switch (i.toLowerCase()) {
					case "ssjson":
						n.actions.openJson(n.wrapper.spread, t.path + "\\" + t.name);
						break;
					case "xls":
					case "xlsx":
					case "csv":
						n.actions.openOtherFormat(n.wrapper.spread, t.path + "\\" + t.name);
						break
					}
				},
				i.prototype._fillRecentWorkbooksPage = function (t) {
					var u,
					r,
					i,
					e,
					f;
					$("#recent-workbooks-page").find("span").remove(),
					$("#recent-workbooks-page").find("ul").remove();
					if (t.length === 0)
						u = $("<span>"), u.text(n.res.fileMenu.noRecentWorkbooks), u.appendTo($("#recent-workbooks-page"));
					else
						for (r = $("<ul>"), r.appendTo($("#recent-workbooks-page")), i = 0; i < t.length; i++)
							e = t[i], f = this._createFileItem(e), f.appendTo(r)
				},
				i.prototype._createFolderItem = function (n) {
					var e = this,
					t = $("<li>"),
					r = $("<div>"),
					i = $("<div>"),
					f = $("<div>"),
					u = $("<div>");
					i.addClass("file-label"),
					t.addClass("list-item"),
					r.addClass("directory-icon"),
					f.text(n.name).addClass("file-name").appendTo(i),
					u.text(n.path).addClass("file-path").appendTo(i),
					t.append(r).append(i),
					t.addClass("only-for-licensed");
					t.on("click", function (t) {
						return e._onClickFolderListItem(t, n)
					});
					return t
				},
				i.prototype._onClickFolderListItem = function (t, i) {
					var u = t.target,
					r;
					$.contains($("#open-page")[0], u) ? (r = {
							title : n.res.openFileDialogTitle,
							nameFilters : [n.res.allSpreadFileFilter, n.res.spreadFileFilter, n.res.excelFileFilter, n.res.excelFileFilter2, n.res.csvFileFilter, n.res.allFileFilter],
							dirName : i.path
						}, n.actions.open(n.wrapper.spread, r)) : (r = {
							title : n.res.saveFileDialogTitle,
							nameFilters : [n.res.spreadFileFilter, n.res.excelFileFilter, n.res.excelFileFilter2, n.res.csvFileFilter, n.res.allFileFilter],
							dirName : i.path
						}, n.actions.saveAs(n.wrapper.spread, r))
				},
				i.prototype._fillCurrentFolderList = function (n) {
					$(".current-folder").find("ul").remove();
					if (n === null)
						$(".current-folder").prev().hide(), $(".current-folder").hide();
					else {
						$(".current-folder").prev().show(),
						$(".current-folder").show();
						var t = $("<ul>"),
						i = this._createFolderItem(n);
						i.appendTo(t),
						$(".current-folder").append(t)
					}
				},
				i.prototype._fillRecentFoldersList = function (t) {
					var u,
					r,
					i,
					f;
					$(".recent-folders").find("span").remove(),
					$(".recent-folders").find("ul").remove();
					if (t.length === 0)
						u = $("<span>"), u.text(n.res.fileMenu.noRecentFolders), u.appendTo($(".recent-folders"));
					else {
						for (r = $("<ul>"), i = 0; i < t.length; i++)
							f = this._createFolderItem(t[i]), f.appendTo(r);
						$(".recent-folders").append(r)
					}
				},
				i.prototype._fillComputerPage = function (n, t) {
					this._fillCurrentFolderList(n),
					this._fillRecentFoldersList(t),
					this._addOpenBrowserListener()
				},
				i.prototype._addOpenBrowserListener = function () {
					var t = this;
					$("#open-browser").on("click", function (t) {
						var i = $(t.currentTarget),
						u = i.data("action"),
						r = i.data("actionArgs");
						n.actions.doAction(u, n.wrapper.spread, r)
					})
				},
				i.prototype._initSaveAsPage = function () {
					this._addSaveBrowserListener()
				},
				i.prototype._addSaveBrowserListener = function () {
					$("#save-browser").on("click", function (t) {
						var i = $(t.currentTarget),
						u = i.data("action"),
						r = i.data("actionArgs");
						n.actions.doAction(u, n.wrapper.spread, r)
					})
				},
				i.prototype._initImportPage = function () {
					this._addImportListeners()
				},
				i.prototype._addImportListeners = function () {
					$("#import-json").on("click", function (t) {
						var i = $(t.currentTarget),
						u = i.data("action"),
						r = i.data("actionArgs");
						n.actions.doAction(u, n.wrapper.spread, r)
					});
					$("#import_excel_rowAndColumnHeaders").on("click", function (n) {
						var t = $(n.currentTarget).prop("checked");
						$("#import_excel_rowHeaders").prop("checked", t),
						$("#import_excel_columnHeaders").prop("checked", t)
					});
					$("#import_excel_rowHeaders").on("click", function () {
						var n = $("#import_excel_rowHeaders").prop("checked") && $("#import_excel_columnHeaders").prop("checked");
						$("#import_excel_rowAndColumnHeaders").prop("checked", n)
					});
					$("#import_excel_columnHeaders").on("click", function () {
						var n = $("#import_excel_rowHeaders").prop("checked") && $("#import_excel_columnHeaders").prop("checked");
						$("#import_excel_rowAndColumnHeaders").prop("checked", n)
					});
					$("#import-excel").on("click", function (t) {
						var s = $(t.currentTarget),
						o = s.data("action"),
						c = $("#import_excel_dataOnly").prop("checked") ? 1 : 0,
						h = $("#import_excel_dataAndFormulasOnly").prop("checked") ? 3 : 0,
						e = $("#import_excel_rowHeaders").prop("checked") ? 4 : 0,
						r = $("#import_excel_columnHeaders").prop("checked") ? 8 : 0,
						i = $("#import_excel_rowAndColumnHeaders").prop("checked") ? 12 : 0,
						f = $("#import_excel_doNotRecalculateAfterLoad").prop("checked") ? 1024 : 0,
						u = {
							excelOpenFlags : (c | h | e | r | i | f).toString(),
							password : $("#import_excel_password").val()
						};
						n.actions.doAction(o, n.wrapper.spread, u)
					});
					$("#import-csv").on("click", function (t) {
						var o = $(t.currentTarget),
						s = o.data("action"),
						h = $("#import_csv_includeRowHeader").prop("checked") ? 1 : 0,
						e = $("#import_csv_includeColumnHeader").prop("checked") ? 2 : 0,
						r = $("#import_csv_unformatted").prop("checked") ? 8 : 0,
						u = $("#import_csv_importFormula").prop("checked") ? 16 : 0,
						f = {
							textFileOpenFlags : (h | e | r | u).toString(),
							rowDelimiter : i._delimiterParser($("#import_csv_rowDelimiter").val()),
							columnDelimiter : i._delimiterParser($("#import_csv_columnDelimiter").val()),
							cellDelimiter : i._delimiterParser($("#import_csv_cellDelimiter").val()),
							encoding : $("#import_csv_encoding").val()
						};
						n.actions.doAction(s, n.wrapper.spread, f)
					})
				},
				i.prototype._initExportPage = function () {
					this._addExportListeners()
				},
				i.prototype._getExportSheetIndexArr = function () {
					var t = $(".export-setting-input").get(0).selectedIndex,
					n;
					return t === 0 ? null : (n = [], n.push(t - 1), n)
				},
				i.prototype._addExportListeners = function () {
					$("#export-json").on("click", function (t) {
						var i = $(t.currentTarget),
						u = i.data("action"),
						r = i.data("actionArgs");
						n.actions.doAction(u, n.wrapper.spread, r)
					});
					$("#export-js").on("click", function (t) {
						var i = $(t.currentTarget),
						u = i.data("action"),
						r = i.data("actionArgs");
						n.actions.doAction(u, n.wrapper.spread, r)
					});
					$("#export_excel_saveBothCustomRowAndColumnHeaders").on("click", function (n) {
						var t = $(n.currentTarget).prop("checked");
						$("#export_excel_saveCustomRowHeaders").prop("checked", t),
						$("#export_excel_saveCustomColumnHeaders").prop("checked", t)
					});
					$("#export_excel_saveCustomRowHeaders").on("click", function () {
						var n = $("#export_excel_saveCustomRowHeaders").prop("checked") && $("#export_excel_saveCustomColumnHeaders").prop("checked");
						$("#export_excel_saveBothCustomRowAndColumnHeaders").prop("checked", n)
					});
					$("#export_excel_saveCustomColumnHeaders").on("click", function () {
						var n = $("#export_excel_saveCustomRowHeaders").prop("checked") && $("#export_excel_saveCustomColumnHeaders").prop("checked");
						$("#export_excel_saveBothCustomRowAndColumnHeaders").prop("checked", n)
					});
					$("#export-excel").on("click", function (t) {
						var h = $(t.currentTarget),
						s = h.data("action"),
						c = $("#export_excel_dataOnly").prop("checked") ? 32 : 0,
						a = $("#export_excel_noFormulas").prop("checked") ? 1 : 0,
						l = $("#export_excel_autoRowHeight").prop("checked") ? 4096 : 0,
						o = $("#export_excel_saveAsFiltered").prop("checked") ? 8 : 0,
						r = $("#export_excel_saveAsViewed").prop("checked") ? 136 : 0,
						i = $("#export_excel_saveBothCustomRowAndColumnHeaders").prop("checked") ? 6 : 0,
						u = $("#export_excel_saveCustomRowHeaders").prop("checked") ? 2 : 0,
						e = $("#export_excel_saveCustomColumnHeaders").prop("checked") ? 4 : 0,
						f = {
							saveFlags : c | a | l | o | r | i | u | e,
							password : $("#export_excel_password").val()
						};
						n.actions.doAction(s, n.wrapper.spread, f)
					});
					$("#export-excel-97").on("click", function (t) {
						var h = $(t.currentTarget),
						s = h.data("action"),
						c = $("#export_excel_dataOnly").prop("checked") ? 32 : 0,
						a = $("#export_excel_noFormulas").prop("checked") ? 1 : 0,
						l = $("#export_excel_autoRowHeight").prop("checked") ? 4096 : 0,
						o = $("#export_excel_saveAsFiltered").prop("checked") ? 8 : 0,
						r = $("#export_excel_saveAsViewed").prop("checked") ? 136 : 0,
						i = $("#export_excel_saveBothCustomRowAndColumnHeaders").prop("checked") ? 12 : 0,
						u = $("#export_excel_saveCustomRowHeaders").prop("checked") ? 2 : 0,
						e = $("#export_excel_saveCustomColumnHeaders").prop("checked") ? 4 : 0,
						f = {
							saveFlags : c | a | l | o | r | i | u | e,
							password : $("#export_excel_password").val()
						};
						n.actions.doAction(s, n.wrapper.spread, f)
					});
					$("#export-csv").on("click", function (t) {
						var s = $(t.currentTarget),
						o = s.data("action"),
						c = $("#export_csv_includeRowHeader").prop("checked") ? 1 : 0,
						h = $("#export_csv_includeColumnHeader").prop("checked") ? 2 : 0,
						u = $("#export_csv_unFormatted").prop("checked") ? 8 : 0,
						r = $("#export_csv_exportFormula").prop("checked") ? 16 : 0,
						e = $("#export_csv_asViewed").prop("checked") ? 32 : 0,
						f = {
							saveFlags : c | h | u | r | e,
							sheetIndex : i._intParser($("#export_csv_sheetIndex").val()),
							encoding : $("#export_csv_encoding").val(),
							row : i._intParser($("#export_csv_row").val()),
							column : i._intParser($("#export_csv_column").val()),
							rowCount : i._intParser($("#export_csv_rowCount").val()),
							columnCount : i._intParser($("#export_csv_columnCount").val()),
							rowDelimiter : i._delimiterParser($("#export_csv_rowDelimiter").val()),
							columnDelimiter : i._delimiterParser($("#export_csv_columnDelimiter").val()),
							cellDelimiter : i._delimiterParser($("#export_csv_cellDelimiter").val())
						};
						n.actions.doAction(o, n.wrapper.spread, f)
					});
					var t = this;
					$("#export-pdf").on("click", function (r) {
						var e = $(r.currentTarget),
						o = e.data("action"),
						u = {
							title : $(".pdf-title").val(),
							author : $(".pdf-author").val(),
							subject : $(".pdf-subject").val(),
							creator : $(".pdf-application").val(),
							keywords : $(".pdf-keywords").val(),
							centerWindow : $(".center-window").prop("checked"),
							displayDocTitle : $(".show-title").prop("checked"),
							hideToolbar : !$(".show-toolbar").prop("checked"),
							fitWindow : $(".fit-window").prop("checked"),
							hideMenubar : !$(".show-menu-bar").prop("checked"),
							hideWindowUI : !$(".show-window-ui").prop("checked"),
							destinationType : $(".destination-type").get(0).selectedIndex,
							openType : $(".open-type").get(0).selectedIndex,
							openPageNumber : i._intParser($(".open-page-number").val()),
							pageDuration : i._intParser($(".page-duration").val()),
							pageLayout : $(".pdf-page-layout").get(0).selectedIndex,
							pageTransition : $(".pdf-page-transition").get(0).selectedIndex,
							printPreset : n.PDFPrinterDialog.printerSettings
						},
						f = {
							sheetIndexes : t._getExportSheetIndexArr(),
							setting : u
						};
						n.actions.doAction(o, n.wrapper.spread, f)
					});
					$(".export-pdf-printer").on("click", function (i) {
						t._exportPDFPrinter === undefined && (t._exportPDFPrinter = new n.PDFPrinterDialog),
						t._exportPDFPrinter.open()
					})
				},
				i.prototype.restrictFeatures = function () {
					$(".only-for-licensed").prop("disabled", "disabled"),
					$(".only-for-licensed").css("-webkit-filter", "grayscale(100%)"),
					$(".only-for-licensed").off("click"),
					$(window).off("keypress.licensed-feature")
				},
				i._intParser = function (n) {
					return n = parseInt(n),
					isNaN(n) ? null : n
				},
				i._delimiterParser = function (n) {
					return n.replace(/\\r/g, "\r").replace(/\\n/g, "\n")
				},
				i
			}
			(),
			t;
			n.FileMenu = i,
			t = function () {
				function n(n) {
					this.rootElem = n,
					this.selectedTab = null,
					this.onSelectItem = null,
					this._bindClickHandler(),
					this.selectedTab = n.find("a:first").closest("li"),
					this.showTab(this.selectedTab.children("a").attr("href"))
				}
				return n.prototype.showTab = function (n) {
					if (this.selectedTab) {
						var t = $(this.selectedTab.children(":first").attr("href"));
						t.hide(),
						this.selectedTab.removeClass("menu-item-selected")
					}
					this.selectedTab = $("li > a[href=" + n + "]").parent(),
					this.selectedTab.addClass("menu-item-selected"),
					this.hideUnselectedViews(),
					$(n).show("fast")
				},
				n.prototype.hideUnselectedViews = function () {
					var n = this.rootElem.children("li:not(.selected)");
					n.each(function (n, t) {
						var i = $(t).children("a").attr("href");
						$(i).hide()
					})
				},
				n.prototype._bindClickHandler = function () {
					var n = this;
					this.rootElem.find("a").on("click", function (t) {
						return n._onClickItem(t),
						!1
					})
				},
				n.prototype._onClickItem = function (n) {
					var t = $(n.target).attr("href");
					$(t).length !== 0 && this.showTab(t),
					this.onSelectItem && this.onSelectItem.call(null, n)
				},
				n
			}
			(),
			n.Menu = t,
			n.fileMenu,
			n.loader.ready(function () {
				n.fileMenu = new i;
				$("#file-menu-tab").on("click", function () {
					n.fileMenu.showFileScreen(),
					n.fileMenu._initPDFExportSheetSelect()
				});
				n.fileMenu.initPage(),
				app.isNative && app.getLicenseStatus() !== LicenseStatus.Valid && app.getLicenseStatus() !== LicenseStatus.Trial && n.fileMenu.restrictFeatures()
			})
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.Sheets || (n.Sheets = {}));
	var t = n.Sheets
})(GcSpread || (GcSpread = {}))
