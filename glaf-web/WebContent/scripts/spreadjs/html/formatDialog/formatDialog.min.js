var __extends = this.__extends || function (n, t) {
	function r() {
		this.constructor = n
	}
	for (var i in t)
		t.hasOwnProperty(i) && (n[i] = t[i]);
	r.prototype = t.prototype,
	n.prototype = new r
}, GcSpread;
(function (n) {
	(function (n) {
		(function (t) {
			var i = function (i) {
				function r() {
					var n = this,
					u = {
						width : "auto",
						modal : !0,
						title : t.res.formatDialog.title,
						buttons : [{
								text : t.res.ok,
								click : function () {
									var i,
									t;
									n._setFormatDirectly || n._setFormatDirectly === undefined ? n.ok() : n._defaultBorderType ? (i = n._cacheStyle.result(), n._okClicked(event, i)) : (t = n._returnFormat(), n._okClicked(event, t)),
									n.close(),
									n._refreshSlicerData()
								}
							}, {
								text : t.res.cancel,
								click : function () {
									n.cancel(),
									n.close()
								}
							}
						]
					};
					r._currentID++,
					i.call(this, "../formatDialog/formatDialog.html", ".format-dialog", u)
				}
				return __extends(r, i),
				r.prototype._okClicked = function (n, t) {
					$(this).trigger("okClicked", t)
				},
				r.prototype._beforeOpen = function (n) {
					var o = 0,
					e,
					f,
					u,
					i;
					n !== undefined && n.length > 0 && (t.util.assert(typeof n[0] == "string"), o = r.getTabIndexById(n[0])),
					n[1] !== undefined && this._element.find(".font-picker").fontpicker("option", "customFontStyle", n[1]),
					this._cacheStyle = n[2] !== undefined ? new t.StyleShadowObject(n[2]) : new t.SpreadStyleShadowObject(t.wrapper.spread),
					n[3] ? (this._fillBorderPanel(!0), e = {
							borderTop : this._cacheStyle.borderTop(),
							borderBottom : this._cacheStyle.borderBottom(),
							borderRight : this._cacheStyle.borderRight(),
							borderLeft : this._cacheStyle.borderLeft()
						}, this._updateBorderPanel(e), this._defaultBorderType = !0) : (this._fillBorderPanel(!1), f = this._getSelectionsBorderType(), f && this._updateBorderPanel(f), this._defaultBorderType = !1),
					this._element.find(".main-tab").tabs("option", "active", o),
					this._updateComboBoxValue(".input-horizontal-align", this._cacheStyle.hAlign()),
					this._updateComboBoxValue(".input-vertical-align", this._cacheStyle.vAlign()),
					this._cacheStyle.textIndent() !== t.BaseMetaObject.indeterminateValue ? this._element.find(".input-indent").spinner("value", this._cacheStyle.textIndent()) : this._element.find(".input-indent").spinner("value", ""),
					this._updateCheckBoxValue(".input-wrap", this._cacheStyle.wordWrap()),
					this._updateCheckBoxValue(".input-shrink", this._cacheStyle.shrinkToFit()),
					this._merged = this._getMerged(),
					this._updateCheckBoxValue(".input-merge", this._merged),
					this._updateFontPickerValue(this._cacheStyle.font(), this._cacheStyle.foreColor(), this._cacheStyle.textDecoration()),
					this._updateCheckBoxValue(".cell-protection", this._cacheStyle.locked()),
					this._updateColorSpan(".show-color-span", this._cacheStyle.backColor()),
					n[2] !== undefined ? this._updateNumberPanel(this._cacheStyle.formatter()) : this._updateNumberPanelSpreadObject(this._cacheStyle.formatter(), t.wrapper.spread),
					this.selectTabOptions !== undefined && this.selectTab(this.selectTabOptions),
					u = this._cacheStyle.font(),
					u && typeof u == "string" && (i = t.util.parseFont(u), this._fontFamily = i.fontFamily, this._fontSize = i.fontSize.replace(/(pt|px)$/, ""), this._fontStyle = i.fontStyle, this._fontWeight = i.fontWeight)
				},
				r.prototype._init = function () {
					var i = this,
					r = t.wrapper.spread;
					this._formatNumberSpread = new n.Spread(this._element.find(".sample-spread")[0]),
					this._defaultBorderType = !1,
					this._addFormats = [],
					this._defaultTime = "3/14/2001 13:30:00",
					this._borderColor = "Text 1",
					this._lineStyle = 1,
					this._moreColorDialog = new t.ColorDailog,
					this._moreColorDialog._create(),
					this._genBorderButtonID(),
					this._element.find("button").button(),
					this._element.find(".tabs").tabs(),
					this._element.find(".small-border-icon").button(),
					this._element.find(".big-border-icon").button(),
					this._element.find(".input-indent").spinner({
						min : 0,
						max : 1e4,
						change : function () {
							i._cacheStyle.textIndent($(this).spinner("value"))
						},
						spin : function () {}

					}),
					this._element.find(".font-picker").fontpicker({
						changed : function (n, t) {
							var r,
							u,
							s,
							h,
							o,
							f,
							e;
							switch (t.name) {
							case "family":
								i._fontFamily = t.value;
								break;
							case "style":
								i._fontStyle = t.value;
								break;
							case "size":
								i._fontSize = t.value;
								break;
							case "weight":
								i._fontWeight = t.value;
								break;
							case "color":
								r = t.value,
								r ? r.name ? i._cacheStyle.foreColor(r.name) : i._cacheStyle.foreColor(r.color) : i._cacheStyle.foreColor(r);
								break;
							case "underline":
								i._underline = t.value;
								break;
							case "strikethrough":
								i._strikethrough = t.value;
								break
							}
							u = 0,
							i._underline && (u |= 1),
							i._strikethrough && (u |= 2),
							i._cacheStyle.textDecoration(u),
							i._fontFamily || i._fontStyle || i._fontSize || i._fontWeight ? (s = i._fontFamily ? i._fontFamily : "Arial", h = i._fontStyle ? i._fontStyle : "normal", o = i._fontSize ? i._fontSize + "pt" : "10pt", f = i._fontWeight ? i._fontWeight : "normal", e = h + " " + f + " " + o + " " + s, i._cacheStyle.font(e)) : i._cacheStyle.font("")
						}
					}),
					this._element.find(".format-tab-li").click(function () {
						$("button[dialogtobefocused='true']").focus()
					}),
					this._element.find(".input-horizontal-align").change(function () {
						var n = i._element.find(".input-horizontal-align").val();
						i._cacheStyle.hAlign(n)
					}),
					this._element.find(".input-vertical-align").change(function () {
						var n = i._element.find(".input-vertical-align").val();
						i._cacheStyle.vAlign(n)
					}),
					this._element.find(".input-indent").change(function () {
						var n = i._element.find(".input-indent").val();
						i._cacheStyle.textIndent(n)
					}),
					this._element.find(".input-wrap").change(function () {
						var n = i._element.find(".input-wrap").prop("checked");
						i._cacheStyle.wordWrap(n)
					}),
					this._element.find(".input-shrink").change(function () {
						var n = i._element.find(".input-shrink").prop("checked");
						i._cacheStyle.shrinkToFit(n)
					}),
					this._element.find(".input-merge").click(function () {
						i._merged = i._merged === !0 ? !1 : i._merged === !1 ? t.BaseMetaObject.indeterminateValue : !0,
						i._updateCheckBoxValue(".input-merge", i._merged)
					}),
					this._element.find(".cell-protection").change(function () {
						var n = i._element.find(".cell-protection").prop("checked");
						i._cacheStyle.locked(n)
					}),
					this._element.find(".colorPicker").colorpicker({
						valueChanged : function (n, r) {
							if (r.name) {
								var u = t.ColorHelper.parse(r.name, t.wrapper.spread.getActiveSheet().currentTheme().colors());
								i._element.find(".show-color-span").css("background-color", u.color),
								i._cacheStyle.backColor(r.name)
							} else
								i._element.find(".show-color-span").css("background-color", r.color), i._cacheStyle.backColor(r.color)
						}
					}),
					this._element.find(".border-picker").borderpicker({
						colorChanged : function (n, t) {
							i._borderColor = t.name ? t.name : t.color
						},
						lineStyleChanged : function (n, t) {
							i._lineStyle = t
						}
					}),
					this._element.find(".border-picker").borderpicker("option", "colorOptions", {
						showNoFill : !1
					}),
					this._element.find(".more-color-button").click(function () {
						typeof i._moreColorDialog == undefined && (i._moreColorDialog = new t.ColorDailog, i._moreColorDialog._create()),
						i._moreColorDialog.value = i._moreColorItem,
						i._moreColorItem === "" || i._moreColorItem === undefined ? i._moreColorDialog._updateColor(!0, "rgb(0,0,0)") : i._moreColorDialog._updateColor(!0, i._moreColorItem),
						i._moreColorDialog.open()
					});
					$(this._moreColorDialog).on("dialogClose", function (n, t) {
						if (t) {
							var r;
							r = {
								color : this.value
							},
							i._element.find(".colorPicker").colorpicker("option", "selectedItem", this.value),
							i._element.find(".show-color-span").css("background-color", this.value),
							i._cacheStyle.backColor(this.value)
						}
					});
					this._element.find(".no-color-button").click(function () {
						i._element.find(".colorPicker").colorpicker("option", "selectedItem", null),
						i._element.find(".show-color-span").css("background-color", "transparent"),
						i._cacheStyle.backColor(null)
					}),
					this._element.find(".no-border-button").click(function () {
						i._element.find(".small-border-icon").prop("checked", !1).button("refresh"),
						i._setBorderToNone(1, 1),
						i._setBorderToNone(1, 2),
						i._setBorderToNone(2, 1),
						i._setBorderToNone(2, 2)
					}),
					this._element.find(".outside-border-button").click(function () {
						i._element.find(".top-line-input").prop("checked", !0).button("refresh"),
						i._element.find(".top-line-input").trigger("change"),
						i._element.find(".bottom-line-input").prop("checked", !0).button("refresh"),
						i._element.find(".bottom-line-input").trigger("change"),
						i._element.find(".left-line-input").prop("checked", !0).button("refresh"),
						i._element.find(".left-line-input").trigger("change"),
						i._element.find(".right-line-input").prop("checked", !0).button("refresh"),
						i._element.find(".right-line-input").trigger("change")
					}),
					this._element.find(".inside-border-button").click(function () {
						i._element.find(".horizontal-inner-line-input").prop("checked", !0).button("refresh"),
						i._element.find(".horizontal-inner-line-input").trigger("change"),
						i._element.find(".vertical-inner-line-input").prop("checked", !0).button("refresh"),
						i._element.find(".vertical-inner-line-input").trigger("change")
					}),
					this._element.find(".top-line-input").change(function () {
						var e = i._element.find(".top-line-input").prop("checked"),
						r = i._borderSpread.getActiveSheet(),
						u = r.getActualStyle(1, 1),
						f;
						e ? (r.getCell(1, 1).borderTop(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(1, 2).borderTop(new n.LineBorder(i._borderColor, i._lineStyle)), i._cacheStyle.borderTop(new n.LineBorder(i._borderColor, i._lineStyle))) : (f = t.ColorHelper.parse(i._borderColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.color != u.borderTop.color || u.borderTop.style != i._lineStyle ? (r.getCell(1, 1).borderTop(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(1, 2).borderTop(new n.LineBorder(i._borderColor, i._lineStyle)), i._element.find(".top-line-input").prop("checked", !0).button("refresh"), i._cacheStyle.borderTop(new n.LineBorder(i._borderColor, i._lineStyle))) : (r.getCell(1, 1).borderTop(new n.LineBorder(i._borderColor, 0)), r.getCell(1, 2).borderTop(new n.LineBorder(i._borderColor, 0)), i._cacheStyle.borderTop(new n.LineBorder(i._borderColor, 0))))
					}),
					this._element.find(".bottom-line-input").change(function () {
						var e = i._element.find(".bottom-line-input").prop("checked"),
						r = i._borderSpread.getActiveSheet(),
						u = r.getActualStyle(2, 1),
						f;
						e ? (r.getCell(2, 1).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 2).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), i._cacheStyle.borderBottom(new n.LineBorder(i._borderColor, i._lineStyle))) : (f = t.ColorHelper.parse(i._borderColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.color != u.borderBottom.color || u.borderBottom.style != i._lineStyle ? (r.getCell(2, 1).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 2).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), i._element.find(".bottom-line-input").prop("checked", !0).button("refresh"), i._cacheStyle.borderBottom(new n.LineBorder(i._borderColor, i._lineStyle))) : (r.getCell(2, 1).borderBottom(new n.LineBorder(i._borderColor, 0)), r.getCell(2, 2).borderBottom(new n.LineBorder(i._borderColor, 0)), i._cacheStyle.borderBottom(new n.LineBorder(i._borderColor, 0))))
					}),
					this._element.find(".left-line-input").change(function () {
						var e = i._element.find(".left-line-input").prop("checked"),
						r = i._borderSpread.getActiveSheet(),
						u = r.getActualStyle(1, 1),
						f;
						e ? (r.getCell(1, 1).borderLeft(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 1).borderLeft(new n.LineBorder(i._borderColor, i._lineStyle)), i._cacheStyle.borderLeft(new n.LineBorder(i._borderColor, i._lineStyle))) : (f = t.ColorHelper.parse(i._borderColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.color != u.borderLeft.color || u.borderLeft.style != i._lineStyle ? (r.getCell(1, 1).borderLeft(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 1).borderLeft(new n.LineBorder(i._borderColor, i._lineStyle)), i._element.find(".left-line-input").prop("checked", !0).button("refresh"), i._cacheStyle.borderLeft(new n.LineBorder(i._borderColor, i._lineStyle))) : (r.getCell(1, 1).borderLeft(new n.LineBorder(i._borderColor, 0)), r.getCell(2, 1).borderLeft(new n.LineBorder(i._borderColor, 0)), i._cacheStyle.borderLeft(new n.LineBorder(i._borderColor, 0))))
					}),
					this._element.find(".right-line-input").change(function () {
						var e = i._element.find(".right-line-input").prop("checked"),
						r = i._borderSpread.getActiveSheet(),
						u = r.getActualStyle(1, 2),
						f;
						e ? (r.getCell(1, 2).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 2).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), i._cacheStyle.borderRight(new n.LineBorder(i._borderColor, i._lineStyle))) : (f = t.ColorHelper.parse(i._borderColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.color != u.borderRight.color || u.borderRight.style != i._lineStyle ? (r.getCell(1, 2).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 2).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), i._element.find(".right-line-input").prop("checked", !0).button("refresh"), i._cacheStyle.borderRight(new n.LineBorder(i._borderColor, i._lineStyle))) : (r.getCell(1, 2).borderRight(new n.LineBorder(i._borderColor, 0)), r.getCell(2, 2).borderRight(new n.LineBorder(i._borderColor, 0)), i._cacheStyle.borderRight(new n.LineBorder(i._borderColor, 0))))
					}),
					this._element.find(".horizontal-inner-line-input").change(function () {
						var e = i._element.find(".horizontal-inner-line-input").prop("checked"),
						r = i._borderSpread.getActiveSheet(),
						u = r.getActualStyle(1, 1),
						f;
						e ? (r.getCell(1, 1).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(1, 2).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle))) : (f = t.ColorHelper.parse(i._borderColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.color != u.borderBottom.color || u.borderBottom.style != i._lineStyle ? (r.getCell(1, 1).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(1, 2).borderBottom(new n.LineBorder(i._borderColor, i._lineStyle)), i._element.find(".horizontal-inner-line-input").prop("checked", !0).button("refresh")) : (r.getCell(1, 1).borderBottom(new n.LineBorder(i._borderColor, 0)), r.getCell(1, 2).borderBottom(new n.LineBorder(i._borderColor, 0))))
					}),
					this._element.find(".vertical-inner-line-input").change(function () {
						var e = i._element.find(".vertical-inner-line-input").prop("checked"),
						r = i._borderSpread.getActiveSheet(),
						u = r.getActualStyle(1, 1),
						f;
						e ? (r.getCell(1, 1).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 1).borderRight(new n.LineBorder(i._borderColor, i._lineStyle))) : (f = t.ColorHelper.parse(i._borderColor, t.wrapper.spread.getActiveSheet().currentTheme().colors()), f.color != u.borderRight.color || u.borderRight.style != i._lineStyle ? (r.getCell(1, 1).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), r.getCell(2, 1).borderRight(new n.LineBorder(i._borderColor, i._lineStyle)), i._element.find(".vertical-inner-line-input").prop("checked", !0).button("refresh")) : (r.getCell(1, 1).borderRight(new n.LineBorder(i._borderColor, 0)), r.getCell(2, 1).borderRight(new n.LineBorder(i._borderColor, 0))))
					}),
					this._element.find(".border-line-panel").click(function (n) {
						n = n || window.event;
						var c = n.target || n.srcElement,
						o = i._element.find(".corner").width(),
						h = i._element.find(".corner").height(),
						e = $(c).height(),
						u = $(c).width(),
						f = o,
						s = h,
						a = i._borderSpread,
						v = a.getActiveSheet(),
						l = v.getSpans(),
						r = n.offsetX || n.clientX - $(c).offset().left,
						t = t || n.clientY - $(c).offset().top;
						l.length === 0 ? Math.abs(u / 2 - r) < f && t > f && e - t > s ? i._clickBorderFrame(".vertical-inner-line-input") : Math.abs(e / 2 - t) < s && r > f && u - r > f && i._clickBorderFrame(".horizontal-inner-line-input") : l.length === 2 && (l[0].rowCount > 1 ? Math.abs(u / 2 - r) < f && i._clickBorderFrame(".vertical-inner-line-input") : Math.abs(e / 2 - t) < s && i._clickBorderFrame(".horizontal-inner-line-input")),
						r < 0 || r > f || t < h || t > e - h ? u - r < 0 || u - r > f || t < h || t > e - h ? t < 0 || t > s || r < o || r > u - o ? e - t < 0 || e - t > s || r < o || r > u - o || i._clickBorderFrame(".bottom-line-input") : i._clickBorderFrame(".top-line-input") : i._clickBorderFrame(".right-line-input") : i._clickBorderFrame(".left-line-input")
					}),
					this._element.find(".colorPicker").colorpicker("option", "showThemeColorTitle", !1),
					this._element.find(".colorPicker").colorpicker("option", "showStandardColorTitle", !1),
					this._element.find(".colorPicker").colorpicker("option", "showOutline", !1),
					this._element.find(".colorPicker").colorpicker("option", "showNoFill", !1),
					this._element.find(".colorPicker").colorpicker("option", "showMoreColors", !1),
					this._element.find(".colorPicker").colorpicker("option", "themeColors", t.wrapper.getThemeColors()),
					this._element.find(".border-picker").borderpicker("option", "colorOptions", {
						themeColors : t.wrapper.getThemeColors()
					}),
					this._initNumberPicker(),
					this._element.find(".tab-border-li").click(function () {
						setTimeout(function () {
							i._borderSpread.refresh()
						}, 0)
					})
				},
				r.prototype._refreshSlicerData = function () {
					var u = t.wrapper.spread,
					n = u.getActiveSheet(),
					f = n.getActiveRowIndex(),
					e = n.getActiveColumnIndex(),
					r = n.findTable(f, e),
					i;
					r && (i = r.getSlicerData(), i && i.refresh())
				},
				r.prototype._genBorderButtonID = function () {
					this._element.find(".top-line-input").attr("id", "top-line-border-" + r._currentID),
					this._element.find(".top-line").attr("for", "top-line-border-" + r._currentID),
					this._element.find(".horizontal-inner-line-input").attr("id", "horizontal-inner-line-border-" + r._currentID),
					this._element.find(".horizontal-inner-line").attr("for", "horizontal-inner-line-border-" + r._currentID),
					this._element.find(".bottom-line-input").attr("id", "bottom-line-border-" + r._currentID),
					this._element.find(".bottom-line").attr("for", "bottom-line-border-" + r._currentID),
					this._element.find(".left-line-input").attr("id", "left-line-border-" + r._currentID),
					this._element.find(".left-line").attr("for", "left-line-border-" + r._currentID),
					this._element.find(".vertical-inner-line-input").attr("id", "vertical-inner-line-border-" + r._currentID),
					this._element.find(".vertical-inner-line").attr("for", "vertical-inner-line-border-" + r._currentID),
					this._element.find(".right-line-input").attr("id", "right-line-border-" + r._currentID),
					this._element.find(".right-line").attr("for", "right-line-border-" + r._currentID)
				},
				r.getTabIndexById = function (n) {
					switch (n) {
					case "number":
						return 0;
					case "alignment":
						return 1;
					case "font":
						return 2;
					case "border":
						return 3;
					case "fill":
						return 4;
					case "protected":
						return 5
					}
					return 0
				},
				r.prototype.ok = function () {
					var n = this._cacheStyle.result(),
					e,
					f,
					i,
					u,
					r;
					n.font = undefined,
					n.foreColor || (n.foreColor = undefined),
					e = $.extend(!0, {}, n),
					n.borderTop && (n.borderTop = undefined),
					n.borderLeft && (n.borderLeft = undefined),
					n.borderBottom && (n.borderBottom = undefined),
					n.borderRight && (n.borderRight = undefined),
					t.actions.doAction("setStyle", t.wrapper.spread, n),
					n = $.extend(!0, {}, e),
					this._fontFamily !== undefined && t.actions.doAction("setFontFamily", t.wrapper.spread, this._fontFamily),
					this._fontSize !== undefined && t.actions.doAction("setFontSize", t.wrapper.spread, this._fontSize + "pt"),
					this._fontStyle !== undefined && t.actions.doAction("setFontStyle", t.wrapper.spread, this._fontStyle),
					this._fontWeight !== undefined && t.actions.doAction("setFontWeight", t.wrapper.spread, this._fontWeight),
					(this._borderColor !== undefined || this._lineStyle !== undefined) && this._setBorder();
					if (this._merged && this._merged !== t.BaseMetaObject.indeterminateValue) {
						for (f = t.wrapper.spread.getActiveSheet(), i = f.getSelections(), u = 0; u < i.length; u++)
							for (r = u + 1; r < i.length; r++)
								if (i[u].intersect(i[r].row, i[r].col, i[r].rowCount, i[r].colCount)) {
									alert(t.res.formatDialog.cantMergeMessage);
									return
								}
						t.actions.doAction("mergeCells", t.wrapper.spread)
					}
					t.wrapper.spread.repaint(),
					this._updateCustomFormatter(),
					this._updateRibbonFormat()
				},
				r.prototype.cancel = function () {},
				r.prototype._returnFormat = function () {
					var n = this._cacheStyle.result(),
					t = this._getBorderType();
					return {
						formatter : n.formatter,
						backColor : n.backColor,
						foreColor : n.foreColor,
						hAlign : n.hAlign,
						vAlign : n.vAlign,
						textIndent : n.textIndent,
						wordWrap : n.wordWrap,
						shrinkToFit : n.shrinkToFit,
						font : n.font,
						locked : n.locked,
						borderTop : t.topLineBorder,
						borderBottom : t.bottomLineBorder,
						borderLeft : t.leftLineBorder,
						borderRight : t.rightLineBorder,
						borderInnerVertical : t.innerVerticalLineBorder,
						borderInnerHorizontal : t.innerHorizontalLineBorder,
						textDecoration : n.textDecoration
					}
				},
				r.prototype._updateCheckBoxValue = function (n, t) {
					var i = this._element.find(n);
					t === !0 ? (i.prop("indeterminate", !1), i.prop("checked", !0)) : t === !1 ? (i.prop("indeterminate", !1), i.prop("checked", !1)) : (i.prop("indeterminate", !0), i.prop("checked", !1))
				},
				r.prototype._updateComboBoxValue = function (n, i) {
					var r = this._element.find(n);
					i !== t.BaseMetaObject.indeterminateValue ? r.val(i) : r.val(null)
				},
				r.prototype._updateFontPickerValue = function (n, i, r) {
					var u = this._element.find(".font-picker"),
					f,
					o,
					e;
					n && n !== t.BaseMetaObject.indeterminateValue && n !== t.BaseMetaObject.undefinedValue ? (f = t.util.parseFont(n), o = f.fontFamily.split(","), o.length > 1 ? u.fontpicker("family", o[0]) : u.fontpicker("family", f.fontFamily), u.fontpicker("style", f.fontStyle), f.fontSize.indexOf("pt") !== -1 ? u.fontpicker("size", f.fontSize.substring(0, f.fontSize.length - 2)) : f.fontSize.indexOf("px") !== -1 ? (e = this._element.find(".gcui-fontpicker-preview").get(0).style.fontSize, u.fontpicker("size", e.substring(0, e.length - 2))) : u.fontpicker("size", f.fontSize), u.fontpicker("weight", f.fontWeight)) : (u.fontpicker("family", ""), u.fontpicker("style", ""), u.fontpicker("size", ""), u.fontpicker("weight", "")),
					this._fontFamily = undefined,
					this._fontStyle = undefined,
					this._fontSize = undefined,
					this._fontWeight = undefined,
					i !== t.BaseMetaObject.indeterminateValue && i !== t.BaseMetaObject.undefinedValue ? u.fontpicker("color", t.ColorHelper.parse(i, t.wrapper.spread.getActiveSheet().currentTheme().colors())) : u.fontpicker("color", null),
					u.fontpicker("colorOption", "themeColors", t.wrapper.getThemeColors()),
					r & 1 ? (u.fontpicker("underline", !0), this._underline = !0) : (u.fontpicker("underline", !1), this._underline = !1),
					r & 2 ? (u.fontpicker("strikethrough", !0), this._strikethrough = !0) : (u.fontpicker("strikethrough", !1), this._strikethrough = !1)
				},
				r.prototype._updateColorSpan = function (n, i) {
					var u = this._element.find(n),
					r;
					i === t.BaseMetaObject.indeterminateValue || i === t.BaseMetaObject.undefinedValue || i === undefined || i === null ? (u.css("background-color", ""), this._element.find(".colorPicker").colorpicker("option", "selectedItem", null), this._moreColorItem = "rgb(0,0,0)") : (r = t.ColorHelper.parse(i, t.wrapper.spread.getActiveSheet().currentTheme().colors()), this._element.find(".colorPicker").colorpicker("option", "selectedItem", r), u.css("background-color", r.color), this._moreColorItem = r.color)
				},
				r.prototype._createBorderFrame = function (i) {
					var h = this,
					o = !1,
					s = !1,
					r,
					f,
					e,
					u;
					for (this._borderSpread = new n.Spread(this._element.find(".border-sheet")[0]), this._borderSpread.showHorizontalScrollbar(!1), this._borderSpread.showVerticalScrollbar(!1), this._borderSpread.tabStripVisible(!1), this._borderSpread.allowUserResize(!1), r = this._borderSpread.getActiveSheet(), $(t.util.getCanvas(this._borderSpread)).unbind("gcmousewheel.gcSheet"), r.currentTheme(t.wrapper.spread.getActiveSheet().currentTheme()), r.setGridlineOptions({
							showVerticalGridline : !1,
							showHorizontalGridline : !1
						}), r.setColumnHeaderVisible(!1), r.setRowHeaderVisible(!1), r.canUserDragDrop(!1), r.canUserDragFill(!1), r.selectionBackColor("transparent"), r.selectionBorderColor("transparent"), r.setIsProtected(!0), r.setColumnCount(4), r.setRowCount(4), r.setValue(1, 1, t.res.formatDialog.sampleText), r.setValue(1, 2, t.res.formatDialog.sampleText), r.setValue(2, 1, t.res.formatDialog.sampleText), r.setValue(2, 2, t.res.formatDialog.sampleText), u = 1; u < 3; u++)
						for (f = 1; f < 3; f++)
							r.getCell(u, f).vAlign(1), r.getCell(u, f).hAlign(1);
					r.setRowHeight(0, 2),
					r.setRowHeight(1, 33),
					r.setRowHeight(2, 34),
					r.setRowHeight(3, 1),
					r.setColumnWidth(0, 2),
					r.setColumnWidth(1, 77),
					r.setColumnWidth(2, 78),
					r.setColumnWidth(3, 1);
					if (i)
						r.addSpan(1, 1, 2, 2), this._element.find(".horizontal-middle").hide(), this._element.find(".vertical-middle").hide(), this._element.find(".vertical-inner-line-input").button("disable"), this._element.find(".horizontal-inner-line-input").button("disable"), this._element.find(".inside-border-button").button("disable");
					else {
						for (e = t.wrapper.spread.getActiveSheet().getSelections(), u = 0; u < e.length; u++)
							e[u].rowCount > 1 && (s = !0), e[u].colCount > 1 && (o = !0);
						!o && s ? (r.addSpan(1, 1, 1, 2), r.addSpan(2, 1, 1, 2), this._element.find(".vertical-middle").hide(), this._element.find(".horizontal-middle").show(), this._element.find(".vertical-inner-line-input").button("disable"), this._element.find(".horizontal-inner-line-input").button("enable"), this._element.find(".inside-border-button").button("enable")) : o && !s ? (r.addSpan(1, 1, 2, 1), r.addSpan(1, 2, 2, 1), this._element.find(".vertical-middle").show(), this._element.find(".horizontal-middle").hide(), this._element.find(".horizontal-inner-line-input").button("disable"), this._element.find(".vertical-inner-line-input").button("enable"), this._element.find(".inside-border-button").button("enable")) : o || s ? (this._element.find(".horizontal-middle").show(), this._element.find(".vertical-middle").show(), this._element.find(".vertical-inner-line-input").button("enable"), this._element.find(".horizontal-inner-line-input").button("enable"), this._element.find(".inside-border-button").button("enable")) : (r.addSpan(1, 1, 2, 2), this._element.find(".horizontal-middle").hide(), this._element.find(".vertical-middle").hide(), this._element.find(".vertical-inner-line-input").button("disable"), this._element.find(".horizontal-inner-line-input").button("disable"), this._element.find(".inside-border-button").button("disable"))
					}
					setTimeout(function () {
						h._borderSpread.refresh()
					}, 0)
				},
				r.prototype._destorySheet = function () {
					var n = this._element.find(".border-sheet");
					n.attr("gcuielement") === "gcSpread" && (this._borderSpread.destroy(), this._element.find(".border-sheet").html(""))
				},
				r.prototype._fillBorderPanel = function (n) {
					typeof this._borderSpread != "undefined" && this._destorySheet(),
					this._createBorderFrame(n)
				},
				r.prototype._getBorderType = function () {
					var l = this._element.find(".top-line-input").prop("checked"),
					c = this._element.find(".right-line-input").prop("checked"),
					h = this._element.find(".bottom-line-input").prop("checked"),
					y = this._element.find(".left-line-input").prop("checked"),
					v = this._element.find(".horizontal-inner-line-input").prop("checked"),
					a = this._element.find(".vertical-inner-line-input").prop("checked"),
					t = this._borderSpread.getActiveSheet().getStyle(1, 1),
					i = this._borderSpread.getActiveSheet().getStyle(2, 2),
					r,
					f,
					u,
					e,
					o,
					s;
					return l && (r = new n.LineBorder(t.borderTop.color, t.borderTop.style)),
					h && (f = new n.LineBorder(i.borderBottom.color, i.borderBottom.style)),
					c && (u = new n.LineBorder(i.borderRight.color, i.borderRight.style)),
					y && (e = new n.LineBorder(t.borderLeft.color, t.borderLeft.style)),
					v && (o = new n.LineBorder(t.borderBottom.color, t.borderBottom.style)),
					a && (s = new n.LineBorder(t.borderRight.color, t.borderRight.style)), {
						topLineBorder : r,
						bottomLineBorder : f,
						rightLineBorder : u,
						leftLineBorder : e,
						innerHorizontalLineBorder : o,
						innerVerticalLineBorder : s
					}
				},
				r.prototype._setBorder = function () {
					var n = this._getBorderType();
					n.topLineBorder && t.actions.doAction("setBorder", t.wrapper.spread, {
						lineborder : n.topLineBorder,
						options : {
							top : !0
						}
					}),
					n.bottomLineBorder && t.actions.doAction("setBorder", t.wrapper.spread, {
						lineborder : n.bottomLineBorder,
						options : {
							bottom : !0
						}
					}),
					n.rightLineBorder && t.actions.doAction("setBorder", t.wrapper.spread, {
						lineborder : n.rightLineBorder,
						options : {
							right : !0
						}
					}),
					n.leftLineBorder && t.actions.doAction("setBorder", t.wrapper.spread, {
						lineborder : n.leftLineBorder,
						options : {
							left : !0
						}
					}),
					n.innerHorizontalLineBorder && t.actions.doAction("setBorder", t.wrapper.spread, {
						lineborder : n.innerHorizontalLineBorder,
						options : {
							innerHorizontal : !0
						}
					}),
					n.innerVerticalLineBorder && t.actions.doAction("setBorder", t.wrapper.spread, {
						lineborder : n.innerVerticalLineBorder,
						options : {
							innerVertical : !0
						}
					})
				},
				r.prototype._clickBorderFrame = function (n) {
					var i = this._element.find(n),
					t = i.prop("checked");
					t = !t,
					i.prop("checked", t).button("refresh"),
					i.trigger("change")
				},
				r.prototype._setBorderToNone = function (t, i) {
					var r = this._borderSpread.getActiveSheet();
					r.getCell(t, i).borderTop(new n.LineBorder(this._borderColor, 0)),
					r.getCell(t, i).borderBottom(new n.LineBorder(this._borderColor, 0)),
					r.getCell(t, i).borderLeft(new n.LineBorder(this._borderColor, 0)),
					r.getCell(t, i).borderRight(new n.LineBorder(this._borderColor, 0)),
					this._cacheStyle.borderTop(undefined),
					this._cacheStyle.borderLeft(undefined),
					this._cacheStyle.borderRight(undefined),
					this._cacheStyle.borderBottom(undefined)
				},
				r.prototype._getSelectionsBorderType = function () {
					var g = t.wrapper.spread,
					o = g.getActiveSheet(),
					i = o.getSelections(),
					d = i.length,
					r,
					u,
					f;
					if (d === 0)
						return null;
					var s = i[0].row === -1 ? 0 : i[0].row,
					e = i[0].col === -1 ? 0 : i[0].col,
					w = o.getStyle(s, e),
					nt = s + i[0].rowCount - 1,
					tt = e + i[0].colCount - 1,
					k = o.getStyle(nt, tt),
					v,
					y,
					c,
					h,
					a,
					l,
					b = !1,
					p = !1,
					n;
					for (w && (v = w.borderTop, c = w.borderLeft), k && (y = k.borderBottom, h = k.borderRight), r = 0; r < d; r++) {
						for (s = i[r].row === -1 ? 0 : i[r].row, e = i[r].col === -1 ? 0 : i[r].col, i[r].rowCount > 1 && !b && (n = o.getStyle(s, e), n && (a = n.borderBottom), b = !0), i[r].colCount > 1 && !p && (n = o.getStyle(s, e), n && (l = n.borderRight), p = !0), f = 0; f < i[r].colCount; f++) {
							n = o.getStyle(s, e + f);
							if (n && v)
								(n.borderTop === undefined || n.borderTop.color != v.color || n.borderTop.style != v.style) && (v = undefined);
							else {
								v = undefined;
								break
							}
						}
						for (u = 0; u < i[r].rowCount; u++) {
							n = o.getStyle(s + u, e);
							if (n && c)
								(n.borderLeft === undefined || n.borderLeft.color != c.color || n.borderLeft.style != c.style) && (c = undefined);
							else {
								c = undefined;
								break
							}
						}
						for (f = 0; f < i[r].colCount; f++) {
							n = o.getStyle(s + i[r].rowCount - 1, e + f);
							if (n && y)
								(n.borderBottom === undefined || n.borderBottom.color != y.color || n.borderBottom.style != y.style) && (y = undefined);
							else {
								y = undefined;
								break
							}
						}
						for (u = 0; u < i[r].rowCount; u++) {
							n = o.getStyle(s + u, e + i[r].colCount - 1);
							if (n && h)
								(n.borderRight === undefined || n.borderRight.color != h.color || n.borderRight.style != h.style) && (h = undefined);
							else {
								h = undefined;
								break
							}
						}
						if (b)
							for (u = 0; u < i[r].rowCount - 1; u++)
								for (f = 0; f < i[r].colCount; f++) {
									n = o.getStyle(s + u, e + f);
									if (n && a)
										(n.borderBottom === undefined || n.borderBottom.color != a.color || n.borderBottom.style != a.style) && (a = undefined);
									else {
										a = undefined;
										break
									}
								}
						if (p)
							for (u = 0; u < i[r].rowCount; u++)
								for (f = 0; f < i[r].colCount - 1; f++) {
									n = o.getStyle(s + u, e + f);
									if (n && l)
										(n.borderRight === undefined || n.borderRight.color != l.color || n.borderRight.style != l.style) && (l = undefined);
									else {
										l = undefined;
										break
									}
								}
					}
					return {
						borderTop : v,
						borderBottom : y,
						borderLeft : c,
						borderRight : h,
						borderVertical : l,
						borderHorizontal : a
					}
				},
				r.prototype._updateBorderPanel = function (i) {
					var s = this,
					o = !1,
					e = !1,
					u,
					r,
					f;
					i.borderTop ? (this._borderColor = i.borderTop.color, this._lineStyle = i.borderTop.style, this._element.find(".top-line-input").prop("checked", !0).button("refresh"), this._element.find(".top-line-input").trigger("change")) : this._element.find(".top-line-input").prop("checked", !1).button("refresh"),
					i.borderBottom ? (this._borderColor = i.borderBottom.color, this._lineStyle = i.borderBottom.style, this._element.find(".bottom-line-input").prop("checked", !0).button("refresh"), this._element.find(".bottom-line-input").trigger("change")) : this._element.find(".bottom-line-input").prop("checked", !1).button("refresh"),
					i.borderLeft ? (this._borderColor = i.borderLeft.color, this._lineStyle = i.borderLeft.style, this._element.find(".left-line-input").prop("checked", !0).button("refresh"), this._element.find(".left-line-input").trigger("change")) : this._element.find(".left-line-input").prop("checked", !1).button("refresh"),
					i.borderRight ? (this._borderColor = i.borderRight.color, this._lineStyle = i.borderRight.style, this._element.find(".right-line-input").prop("checked", !0).button("refresh"), this._element.find(".right-line-input").trigger("change")) : this._element.find(".right-line-input").prop("checked", !1).button("refresh"),
					i.borderHorizontal ? (o = !0, this._borderColor = i.borderHorizontal.color, this._lineStyle = i.borderHorizontal.style, this._element.find(".horizontal-inner-line-input").prop("checked", !0).button("refresh"), this._element.find(".horizontal-inner-line-input").trigger("change")) : this._element.find(".horizontal-inner-line-input").prop("checked", !1).button("refresh"),
					i.borderVertical ? (e = !0, this._borderColor = i.borderVertical.color, this._lineStyle = i.borderVertical.style, this._element.find(".vertical-inner-line-input").prop("checked", !0).button("refresh"), this._element.find(".vertical-inner-line-input").trigger("change")) : this._element.find(".vertical-inner-line-input").prop("checked", !1).button("refresh"),
					i.borderTop === undefined || i.borderBottom === undefined || i.borderLeft === undefined || i.borderRight === undefined || o && i.borderHorizontal === undefined || e && i.borderVertical === undefined ? (this._lineStyle = n.LineStyle.thin, this._borderColor = "Text 1", f = t.ColorHelper.parse("Text 1", t.wrapper.spread.getActiveSheet().currentTheme().colors()), this._element.find(".border-picker").borderpicker("option", "borderColor", f), this._element.find(".border-picker").borderpicker("option", "lineStyle", 1)) : (u = i.borderTop.color, r = i.borderTop.style, u === i.borderBottom.color && (e ? u === i.borderVertical.color : !0) && (o ? u === i.borderHorizontal.color : !0) && u === i.borderLeft.color && u === i.borderRight.color ? (f = t.ColorHelper.parse(u, t.wrapper.spread.getActiveSheet().currentTheme().colors()), this._element.find(".border-picker").borderpicker("option", "borderColor", f), this._borderColor = u) : (this._borderColor = "Text 1", f = t.ColorHelper.parse("Text 1", t.wrapper.spread.getActiveSheet().currentTheme().colors()), this._element.find(".border-picker").borderpicker("option", "borderColor", f)), r === i.borderBottom.style && (e ? r === i.borderVertical.style : !0) && (o ? r === i.borderHorizontal.style : !0) && r === i.borderLeft.style && r === i.borderRight.style ? (this._element.find(".border-picker").borderpicker("option", "lineStyle", r), this._lineStyle = r) : (this._lineStyle = n.LineStyle.thin, this._element.find(".border-picker").borderpicker("option", "lineStyle", 1))),
					setTimeout(function () {
						s._borderSpread.refresh()
					}, 0)
				},
				r.prototype._getMerged = function () {
					var u = t.wrapper.spread.getActiveSheet(),
					i = u.getSelections(),
					r,
					n;
					if (i.length === 1)
						return n = u.getSpans(i[0]), n.length === 1 && n[0].row === i[0].row && n[0].rowCount === i[0].rowCount && n[0].col === i[0].col && n[0].colCount === i[0].colCount ? !0 : n.length > 0 ? t.BaseMetaObject.indeterminateValue : !1;
					for (r = 0; r < i.length; r++) {
						n = u.getSpans(i[r]);
						if (n.length > 0)
							return t.BaseMetaObject.indeterminateValue
					}
					return !1
				},
				r.prototype.setFormatDirectly = function (n) {
					this._setFormatDirectly = n
				},
				r.prototype._getDecimalInput = function (n, i, r) {
					var u = $("<div></div>").addClass("gcui-numberpicker hidden " + r),
					f;
					return $("<label></label>").attr("for", i).css({
						"vertical-align" : "middle",
						"margin-right" : "5px"
					}).text(t.res.formatNumberPickerSetting.decimalPlaces).appendTo(u),
					f = $("<input>").attr({
							id : i,
							value : "2"
						}).addClass(n + " format-decimal-input").appendTo(u),
					u
				},
				r.prototype._getSeparatorCheckbox = function (n, i, r) {
					var u = $("<div></div>").addClass("gcui-numberpicker hidden " + r),
					f = $("<input>").attr({
							id : i,
							type : "checkbox"
						}).addClass(n).appendTo(u);
					return $("<label></label>").attr("for", i).text(t.res.formatNumberPickerSetting.separator).appendTo(u),
					u
				},
				r.prototype._getSymbolSelect = function (n, i, r) {
					var f = $("<div></div>").addClass("gcui-numberpicker hidden " + r),
					e,
					u;
					for ($("<label><label>").css({
							"margin-right" : "5px"
						}).text(t.res.formatNumberPickerSetting.symbol).appendTo(f), e = $("<select></select>").attr("size", 1).addClass(i), u = 0; u < n.length; u++)
						e.append($("<option></option>").text(n[u][0]));
					return f.append(e),
					f
				},
				r.prototype._getTypeSelect = function (n, t, i, r) {
					var l = i + "-container",
					s = $("<div></div>").addClass("gcui-numberpicker hidden " + r + " " + l),
					c = "format-number-label",
					o = $("<div></div>").addClass(c),
					u,
					e,
					f,
					h;
					$("<label></label>").text(t).appendTo(o),
					u = $("<select></select>").attr({
							name : i + "-list",
							size : 6
						}).addClass(i + "-select");
					if (Array.isArray(n))
						for (e = 0; e < n.length; e++)
							u.append($("<option></option>").val(n[e]).text(n[e]));
					else
						for (f in n)
							f.indexOf("red") !== -1 ? u.append($("<option></option>").css("color", "red").val(f).text(n[f])) : u.append($("<option></option>").val(f).text(n[f]));
					return u.get(0).selectedIndex = 0,
					i === "custom-type" ? (h = $("<input></input>").addClass("custom-type-input"), s.append(o).append(h).append(u)) : s.append(o).append(u),
					s
				},
				r.prototype._getParagraph = function (n, t) {
					var i = "spread-format-" + t;
					return $("<p></p>").text(n).addClass("gcui-numberpicker hidden " + i)
				},
				r.prototype._getCultureSelect = function (n, t, i, r, u) {
					var h = i + "-container",
					s = $("<div></div>").addClass("gcui-numberpicker hidden " + r + " " + h),
					c = "format-number-label",
					o = $("<div></div>").addClass(c),
					f,
					e;
					$("<label></label>").text(t).appendTo(o),
					f = $("<select></select>").addClass(i + "-select " + u);
					for (e in n)
						f.append($("<option></option>").val(e).text(n[e]));
					return f.get(0).selectedIndex = 0,
					s.append(o).append(f),
					s
				},
				r.prototype._initNumberPicker = function () {
					this._createGeneralSetting(),
					this._createNumberSetting(),
					this._createAccountingSetting(),
					this._createCurrencySetting(),
					this._createDateSetting(),
					this._createTimeSetting(),
					this._createPercentageSetting(),
					this._createFractionSetting(),
					this._createScientificSetting(),
					this._createTextSetting(),
					this._createSpecialSetting(),
					this._createCustomSetting();
					var n = this,
					t = this._element.find(".category-select");
					t.find("option").bind("click", function (t) {
						n._element.find(".gcui-numberpicker").addClass("hidden");
						var i = n._element.find(".category-select option:selected").val(),
						r = "spread-format-" + i;
						n._element.find(".gcui-numberpicker").each(function (n, t) {
							$(t).hasClass(r) && $(t).removeClass("hidden")
						}),
						n._numberCategoryChanged(t, i)
					}),
					t.bind("mousemove", function (n) {
						return !1
					})
				},
				r.prototype._numberCategoryChanged = function (n, t) {
					if (t === "general")
						this._refreshGeneralSample();
					else if (t === "numbers") {
						var i = this._element.find(".negative-number-select").get(0).selectedIndex;
						this._refreshNumberSample(i),
						this._refreshNumberList()
					} else
						t === "accounting" ? this._refreshAccountingSample() : t === "currency" ? (this._refreshCurrencySample(), this._refreshCurrencyNumberList()) : t === "date" ? this._refreshDateSample() : t === "time" ? this._refreshTimeSample() : t === "percentage" ? this._refreshPercentageSample() : t === "fraction" ? this._refreshFractionSample() : t === "scientific" ? this._refreshScientificSample() : t === "text" ? this._refreshTextSample() : t === "special" ? this._refreshSpecialSample() : t === "custom" && (this._refreshCustomInput(), this._refreshCustomSample());
					this._updateCustomFormatter(),
					this._updateCustomDeleteButton()
				},
				r.prototype._createCurrencySetting = function () {
					var n = this,
					u = this._getDecimalInput("currency-decimal-places-input", "currency-decimal-places", "spread-format-currency"),
					f = this._getSymbolSelect(t.res.accountingSymbol, "currency-symbol-dropdown", "spread-format-currency"),
					i = this._getParagraph(t.res.formatNumberComments.currencyComments, "currency"),
					r = this._getTypeSelect(t.res.currencyNegativeNumbers, t.res.formatNumberPickerSetting.negativeNumber, "currency-type", "spread-format-currency");
					this._element.find(".tab-number-setting").append(u).append(f),
					this._element.find(".tab-number-comments").append(i),
					this._element.find(".tab-number-setting").append(r),
					this._element.find(".currency-symbol-dropdown").get(0).selectedIndex = 1,
					this._element.find(".currency-type-select").change(function () {
						n._refreshCurrencySample()
					}),
					this._element.find(".currency-symbol-dropdown").change(function () {
						n._refreshCurrencySample(),
						n._refreshCurrencyNumberList()
					}),
					this._element.find(".currency-decimal-places-input").spinner({
						min : 0,
						max : 16,
						change : function () {
							var t = n._element.find(".currency-decimal-places-input").val();
							n._element.find(".format-decimal-input").val(t),
							n._refreshCurrencySample(),
							n._refreshCurrencyNumberList()
						},
						spin : function () {
							var t = arguments[1].value;
							n._element.find(".format-decimal-input").val(t),
							n._refreshCurrencySample(),
							n._refreshCurrencyNumberList()
						}
					})
				},
				r.prototype._createDateSetting = function () {
					for (var n = this, r = [], u = t.res.dateFormats, i = 0; i < u.length; i++)
						r.push(this._getTextBySpread(this._defaultTime, u[i]));
					var o = this._getTypeSelect(r, t.res.formatNumberPickerSetting.type, "date-type", "spread-format-date"),
					s = this._getParagraph(t.res.formatNumberComments.dateComments, "date"),
					f = this._getCultureSelect(t.res.localeType, t.res.formatNumberPickerSetting.locale, "date-type-locale", "spread-format-date", "type-locale-select"),
					e = this._getCultureSelect(t.res.calendarType, t.res.formatNumberPickerSetting.calendar, "date-type-calendar", "spread-format-date-calendar");
					this._element.find(".tab-number-setting").append(o).append(f).append(e),
					this._element.find(".tab-number-comments").append(s),
					this._element.find(".date-type-select").change(function () {
						n._refreshDateSample()
					}),
					this._element.find(".date-type-locale-select").change(function () {
						var t = n._element.find(".date-type-locale-select").find("option:selected").val();
						n._element.find(".type-locale-select").val(t),
						n._updateDateType(),
						n._refreshDateSample(),
						n._element.find(".date-type-select").change(function () {
							n._refreshDateSample()
						})
					}),
					this._element.find(".date-type-calendar-select").change(function () {
						n._updateDateType(),
						n._refreshDateSample(),
						n._element.find(".date-type-select").change(function () {
							n._refreshDateSample()
						})
					})
				},
				r.prototype._updateDateType = function () {
					var i = [],
					s = this._element.find(".date-type-locale-select").find("option:selected").val(),
					e,
					o,
					u,
					r,
					n,
					f;
					switch (s) {
					case "ja_jp":
						this._element.find(".spread-format-date-calendar").removeClass("hidden"),
						e = this._element.find(".date-type-calendar-select").find("option:selected").val();
						if (e === "western")
							for (o = t.res.japanWesternDateFormat, n = 0; n < o.length; n++)
								i.push(this._getTextBySpread(this._defaultTime, o[n]));
						else if (e === "JER")
							for (u = t.res.japanEmperorReignDateFormat, n = 0; n < u.length; n++)
								i.push(this._getTextBySpread(this._defaultTime, u[n]));
						break;
					case "en_us":
						for (this._element.find(".spread-format-date-calendar").addClass("hidden"), r = t.res.dateFormats, n = 0; n < r.length; n++)
							i.push(this._getTextBySpread(this._defaultTime, r[n]));
						break
					}
					if (i.length === 0)
						return;
					this._element.find(".date-type-container").remove(),
					f = this._getTypeSelect(i, t.res.formatNumberPickerSetting.type, "date-type", "spread-format-date"),
					f.insertBefore(this._element.find(".date-type-locale-container")),
					f.removeClass("hidden")
				},
				r.prototype._createCustomSetting = function () {
					var n = this,
					f = this._getTypeSelect(t.res.customFormats, t.res.formatNumberPickerSetting.type, "custom-type", "spread-format-custom"),
					u = this._getParagraph(t.res.formatNumberComments.customComments, "custom"),
					i = $("<div></div>").addClass("custom-type-div custom-class gcui-numberpicker hidden spread-format-custom"),
					r = $("<button></button>").addClass("custom-type-button custom-class");
					$("<span></span>").text(t.res.formatNumberPickerSetting.deleted).appendTo(r),
					i.append(r),
					this._element.find(".tab-number-setting").append(f).append(i),
					this._element.find(".tab-number-comments").append(u),
					this._element.find(".custom-type-select").change(function () {
						var t = n._element.find(".custom-type-select").find("option:selected").text();
						n._element.find(".custom-type-input").val(t),
						n._refreshCustomSample(),
						n._updateCustomDeleteButton()
					}),
					this._element.find(".custom-type-input").bind("input propertychange", function () {
						n._refreshCustomSample(),
						n._updateCustomDeleteButton()
					}),
					this._element.find(".custom-type-button").click(function () {
						n._updateCustomFormatter(!1),
						n._currentFormat = undefined,
						n._element.find(".custom-type-input").val(""),
						n._element.find(".sample-display").text(n._getTextBySpread(n._originalText, ""))
					})
				},
				r.prototype._updateCustomDeleteButton = function () {
					var i = t.res.customFormats,
					n = this._element.find(".custom-type-input").val();
					if ($.inArray(n, this._addFormats) >= 0 || $.inArray(n, i) < 0) {
						this._element.find(".custom-type-button").attr("disabled", !1);
						return
					}
					this._element.find(".custom-type-button").attr("disabled", !0)
				},
				r.prototype._updateCustomFormatter = function (n) {
					var r = this._element.find(".custom-type-input").val(),
					i,
					f,
					o,
					e,
					u;
					n === undefined && (n = !0);
					if (r) {
						i = t.res.customFormats;
						if (n) {
							if ($.inArray(r, i) >= 0)
								return;
							$.inArray(r, this._addFormats) < 0 && (this._addFormats.push(r), $.merge(t.res.customFormats, this._addFormats))
						} else {
							if ($.inArray(r, i) < 0)
								return;
							f = $.inArray(r, i),
							o = $.inArray(r, this._addFormats),
							f < 0 || o < 0 || (this._addFormats.splice(o, 1), i.splice(f, 1))
						}
						for (e = this._element.find(".custom-type-select"), e.empty(), u = 0; u < i.length; u++)
							e.append($("<option></option>").val(i[u]).text(i[u]))
					}
				},
				r.prototype._createTimeSetting = function () {
					for (var n = this, r = [], u = t.res.timeFormats, i = 0; i < u.length; i++)
						r.push(this._getTextBySpread(this._defaultTime, u[i]));
					var o = this._getTypeSelect(r, t.res.formatNumberPickerSetting.type, "time-type", "spread-format-time"),
					e = this._getParagraph(t.res.formatNumberComments.timeComments, "time"),
					f = this._getCultureSelect(t.res.localeType, t.res.formatNumberPickerSetting.locale, "time-type-locale", "spread-format-time", "type-locale-select");
					this._element.find(".tab-number-setting").append(o).append(f),
					this._element.find(".tab-number-comments").append(e),
					this._element.find(".time-type-select").change(function () {
						n._refreshTimeSample()
					}),
					this._element.find(".time-type-locale-select").change(function () {
						var t = n._element.find(".time-type-locale-select").find("option:selected").val();
						n._element.find(".type-locale-select").val(t),
						n._updateTimeType(),
						n._refreshTimeSample(),
						n._element.find(".time-type-select").change(function () {
							n._refreshTimeSample()
						})
					})
				},
				r.prototype._updateTimeType = function () {
					var i = [],
					e = this._element.find(".time-type-locale-select").find("option:selected").val(),
					f,
					u,
					n,
					r;
					switch (e) {
					case "ja_jp":
						for (f = t.res.japanTimeFormats, n = 0; n < f.length; n++)
							i.push(this._getTextBySpread(this._defaultTime, f[n]));
						break;
					case "en_us":
						for (u = t.res.timeFormats, n = 0; n < u.length; n++)
							i.push(this._getTextBySpread(this._defaultTime, u[n]));
						break
					}
					if (i.length === 0)
						return;
					this._element.find(".time-type-container").remove(),
					r = this._getTypeSelect(i, t.res.formatNumberPickerSetting.type, "time-type", "spread-format-time"),
					r.insertBefore(this._element.find(".time-type-locale-container")),
					r.removeClass("hidden")
				},
				r.prototype._createPercentageSetting = function () {
					var n = this,
					r = this._getDecimalInput("percentage-decimal-places-input", "percentage-decimal-places", "spread-format-percentage"),
					i = this._getParagraph(t.res.formatNumberComments.percentageComments, "percentage");
					this._element.find(".tab-number-comments").append(i),
					this._element.find(".tab-number-setting").append(r),
					this._element.find(".percentage-decimal-places-input").spinner({
						min : 0,
						max : 16,
						change : function () {
							var t = n._element.find(".percentage-decimal-places-input").val();
							n._element.find(".format-decimal-input").val(t),
							n._refreshPercentageSample()
						},
						spin : function () {
							var t = arguments[1].value;
							n._element.find(".format-decimal-input").val(t),
							n._refreshPercentageSample()
						}
					})
				},
				r.prototype._createScientificSetting = function () {
					var n = this,
					t = this._getDecimalInput("scientific-decimal-places-input", "scientific-decimal-places", "spread-format-scientific");
					this._element.find(".tab-number-setting").append(t),
					this._element.find(".scientific-decimal-places-input").spinner({
						min : 0,
						max : 16,
						change : function () {
							var t = n._element.find(".scientific-decimal-places-input").val();
							n._element.find(".format-decimal-input").val(t),
							n._refreshScientificSample()
						},
						spin : function () {
							var t = arguments[1].value;
							n._element.find(".format-decimal-input").val(t),
							n._refreshScientificSample()
						}
					})
				},
				r.prototype._createFractionSetting = function () {
					var i = this,
					n = this._getTypeSelect(t.res.fractionType, t.res.formatNumberPickerSetting.type, "fraction-type", "spread-format-fraction");
					this._element.find(".tab-number-setting").append(n),
					this._element.find(".fraction-type-select").change(function () {
						i._refreshFractionSample()
					})
				},
				r.prototype._createSpecialSetting = function () {
					var n = this,
					u = this._getTypeSelect(t.res.specialType, t.res.formatNumberPickerSetting.type, "special-type", "spread-format-special"),
					r = this._getParagraph(t.res.formatNumberComments.specialComments, "special"),
					i = this._getCultureSelect(t.res.localeType, t.res.formatNumberPickerSetting.locale, "special-type-locale", "spread-format-special", "special-locale-select");
					this._element.find(".tab-number-setting").append(u).append(i),
					this._element.find(".tab-number-comments").append(r),
					this._element.find(".special-type-select").change(function () {
						n._refreshSpecialSample()
					}),
					this._element.find(".special-type-locale-select").change(function () {
						var t = n._element.find(".special-type-locale-select").find("option:selected").val();
						n._element.find(".type-locale-select").val(t),
						n._updateSpecialType(),
						n._refreshSpecialSample(),
						n._element.find(".special-type-select").change(function () {
							n._refreshSpecialSample()
						})
					})
				},
				r.prototype._updateSpecialType = function () {
					var n = t.res.specialType,
					r = this._element.find(".special-type-locale-select").find("option:selected").val(),
					i;
					switch (r) {
					case "ja_jp":
						n = t.res.specialJapanType;
						break;
					case "en_us":
						n = t.res.specialType;
						break
					}
					if (n.length === 0)
						return;
					this._element.find(".special-type-container").remove(),
					i = this._getTypeSelect(n, t.res.formatNumberPickerSetting.type, "special-type", "spread-format-special"),
					i.insertBefore(this._element.find(".special-type-locale-container")),
					i.removeClass("hidden")
				},
				r.prototype._createAccountingSetting = function () {
					var n = this,
					u = this._getDecimalInput("accounting-decimal-places-input", "accounting-decimal-places", "spread-format-accounting"),
					r = this._getSymbolSelect(t.res.accountingSymbol, "accounting-symbol-dropdown", "spread-format-accounting"),
					i = this._getParagraph(t.res.formatNumberComments.accountingComments, "accounting");
					this._element.find(".tab-number-setting").append(u).append(r),
					this._element.find(".tab-number-comments").append(i),
					this._element.find(".accounting-symbol-dropdown").get(0).selectedIndex = 1,
					this._element.find(".accounting-symbol-dropdown").change(function () {
						n._refreshAccountingSample()
					}),
					this._element.find(".accounting-decimal-places-input").spinner({
						min : 0,
						max : 16,
						change : function () {
							var t = n._element.find(".accounting-decimal-places-input").val();
							n._element.find(".format-decimal-input").val(t),
							n._refreshAccountingSample()
						},
						spin : function () {
							var t = arguments[1].value;
							n._element.find(".format-decimal-input").val(t),
							n._refreshAccountingSample()
						}
					})
				},
				r.prototype._defaultFormatSetting = function () {
					this._element.find(".category-select").val("general").trigger("change"),
					this._element.find(".category-select").get(0).selectedIndex = -1,
					this._element.find(".format-decimal-input").val(2),
					this._currentFormat = undefined,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._createGeneralSetting = function () {
					var n = this._getParagraph(t.res.formatNumberComments.generalComments, "general");
					this._element.find(".tab-number-setting").append(n)
				},
				r.prototype._createTextSetting = function () {
					var n = this._getParagraph(t.res.formatNumberComments.textComments, "text");
					this._element.find(".tab-number-setting").append(n)
				},
				r.prototype._createNumberSetting = function () {
					var n = this,
					u = this._getDecimalInput("decimal-places-input", "decimal-places", "spread-format-numbers"),
					f = this._getSeparatorCheckbox("separator-input", "thousand-separator", "spread-format-numbers"),
					i = this._getTypeSelect(t.res.negativeNumbers, t.res.formatNumberPickerSetting.negativeNumber, "negative-number", "spread-format-numbers"),
					r = this._getParagraph(t.res.formatNumberComments.numberComments, "numbers");
					this._element.find(".tab-number-setting").append(u).append(f),
					this._element.find(".tab-number-setting").append(i),
					this._element.find(".tab-number-comments").append(r),
					this._element.find(".negative-number-select").change(function () {
						var t = this.selectedIndex;
						n._refreshNumberSample(t)
					}),
					this._element.find(".separator-input").change(function () {
						n._refreshNumberList();
						var t = n._element.find(".negative-number-select").get(0).selectedIndex;
						n._refreshNumberSample(t)
					}),
					this._element.find(".decimal-places-input").spinner({
						min : 0,
						max : 16,
						change : function () {
							var i = n._element.find(".decimal-places-input").val(),
							t;
							n._element.find(".format-decimal-input").val(i),
							n._refreshNumberList(),
							t = n._element.find(".negative-number-select").get(0).selectedIndex,
							n._refreshNumberSample(t)
						},
						spin : function () {
							var i = arguments[1].value,
							t;
							n._element.find(".format-decimal-input").val(i),
							n._refreshNumberList(),
							t = n._element.find(".negative-number-select").get(0).selectedIndex,
							n._refreshNumberSample(t)
						}
					})
				},
				r.prototype._refreshGeneralSample = function () {
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, t.res.generalFormat)),
					this._currentFormat = "General",
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshTextSample = function () {
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, t.res.textFormats[0])),
					this._currentFormat = "@",
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshAccountingSample = function () {
					var t = this._element.find(".accounting-symbol-dropdown").get(0).selectedIndex,
					i = this._element.find(".accounting-decimal-places-input").val(),
					n = this._getAccountingFormat(i, t);
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshNumberList = function () {
					var c = this._element.find(".separator-input").prop("checked"),
					s = t.res.negativeNumbers,
					n = "1234.10",
					h = parseInt(this._element.find(".decimal-places-input").val()),
					u,
					r,
					e,
					f,
					i,
					o;
					if (h > 0) {
						for (u = "", r = 0; r < h; r++)
							u = (r % 10).toString() + u.substring(0);
						n = n.substring(0, n.indexOf(".") + 1) + u
					} else
						n = n.substring(0, n.indexOf("."));
					c && (e = n.indexOf("1"), n = n.substring(0, e + 1) + "," + n.substring(e + 1));
					for (f in s)
						i = n, o = s[f], o.indexOf("-") !== -1 && (i = "-" + i), o.indexOf(")") !== -1 && (i = "(" + i + ")"), this._element.find(".negative-number-select").find("option[value='" + f + "']").text(i)
				},
				r.prototype._refreshCurrencyNumberList = function () {
					var c = parseInt(this._element.find(".currency-decimal-places-input").val()),
					h = t.res.currencyNegativeNumbers,
					i = "1,234.10",
					l = this._element.find(".currency-symbol-dropdown").get(0).selectedIndex,
					u,
					f,
					r,
					o,
					e,
					n,
					s;
					if (c > 0) {
						for (u = "", f = 0; f < c; f++)
							u = (f % 10).toString() + u.substring(0);
						i = i.substring(0, i.indexOf(".") + 1) + u
					} else
						i = i.substring(0, i.indexOf("."));
					r = this._element.find(".currency-symbol-dropdown").find("option:selected").text(),
					r === t.res.accountingSymbol[0][0] && (r = ""),
					o = !0;
					for (e in h)
						n = i, s = h[e], s.indexOf("-") !== -1 && o ? (n = "-" + r + n, o = !1) : n = s.indexOf("-") !== -1 ? r + "-" + n : r + n, this._element.find(".currency-type-select").find("option[value='" + e + "']").text(n)
				},
				r.prototype._refreshNumberSample = function (n) {
					var i = this._element.find(".separator-input").prop("checked"),
					r = parseInt(this._element.find(".decimal-places-input").val()),
					t = this._getNumberFormatter(n, r, i);
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, t)),
					this._currentFormat = t,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshCustomSample = function () {
					var n = this._element.find(".custom-type-input").val();
					this._isMatch(n) && (this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)), this._currentFormat = n, this._cacheStyle.formatter(this._currentFormat))
				},
				r.prototype._isMatch = function (n) {
					for (var i = [], t = 0; t < n.length; t++) {
						n[t] === "[" && i.push(t);
						if (n[t] === "]") {
							if (i.length === 0)
								return !1;
							i.pop()
						}
					}
					return i.length === 0 ? !0 : !1
				},
				r.prototype._refreshCustomInput = function () {
					if (this._currentFormat)
						this._element.find(".custom-type-input").val(this._currentFormat);
					else {
						var n = this._element.find(".custom-type-select").find("option:selected").text();
						this._element.find(".custom-type-input").val(n)
					}
				},
				r.prototype._refreshFractionSample = function () {
					var i = t.res.fractionFormats,
					r = this._element.find(".fraction-type-select").get(0).selectedIndex,
					n = i[r];
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshSpecialSample = function () {
					var i = t.res.specialFormats,
					r = this._element.find(".special-type-select").get(0).selectedIndex,
					u = this._element.find(".special-type-locale-select").find("option:selected").val(),
					n;
					switch (u) {
					case "ja_jp":
						i = t.res.specialJapanFormats;
						break;
					case "en_us":
						i = t.res.specialFormats;
						break
					}
					n = i[r],
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshScientificSample = function () {
					var n,
					i = this._element.find(".scientific-decimal-places-input").val(),
					r = "",
					t;
					if (i > 0) {
						for (t = 0; t < i; t++)
							r += "0";
						n = "0." + r + "E+00"
					} else
						n = "0E+00";
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshPercentageSample = function () {
					var i = this._element.find(".percentage-decimal-places-input").val(),
					r = "",
					n,
					t;
					if (i > 0) {
						for (t = 0; t < i; t++)
							r += "0";
						n = "0." + r + "%"
					} else
						n = "0%";
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshTimeSample = function () {
					var r = this._element.find(".time-type-select").get(0).selectedIndex,
					i = t.res.timeFormats,
					u = this._element.find(".time-type-locale-select").find("option:selected").val(),
					n;
					switch (u) {
					case "ja_jp":
						i = t.res.japanTimeFormats;
						break;
					case "en_us":
						i = t.res.timeFormats;
						break
					}
					n = i[r],
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshDateSample = function () {
					var u = this._element.find(".date-type-select").get(0).selectedIndex,
					n = t.res.dateFormats,
					f = this._element.find(".date-type-locale-select").find("option:selected").val(),
					i,
					r;
					switch (f) {
					case "ja_jp":
						this._element.find(".spread-format-date-calendar").removeClass("hidden"),
						i = this._element.find(".date-type-calendar-select").find("option:selected").val(),
						i === "western" ? n = t.res.japanWesternDateFormat : i === "JER" && (n = t.res.japanEmperorReignDateFormat);
						break;
					case "en_us":
						this._element.find(".spread-format-date-calendar").addClass("hidden"),
						n = t.res.dateFormats;
						break
					}
					r = n[u],
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, r)),
					this._currentFormat = r,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._refreshCurrencySample = function () {
					var t = this._element.find(".currency-decimal-places-input").val(),
					i = this._element.find(".currency-type-select").get(0).selectedIndex,
					n = this._getCurrencyFormat(i, t);
					this._element.find(".sample-display").text(this._getTextBySpread(this._originalText, n)),
					this._currentFormat = n,
					this._cacheStyle.formatter(this._currentFormat)
				},
				r.prototype._getTextBySpread = function (n, t) {
					var i = this._formatNumberSpread.getActiveSheet();
					return i.setFormatter(0, 0, t),
					i.setValue(0, 0, n),
					i.getText(0, 0)
				},
				r.prototype._getCurrencyFormat = function (n, i) {
					var o,
					r,
					l,
					a,
					u,
					s;
					n == -1 && (n = 0),
					r = t.res.currencyFormats[n];
					if (i > 0) {
						for (l = "", u = 0; u < i; u++)
							l += "0";
						r = r.replace(/#0/g, "#0." + l)
					}
					var c = r.split(";"),
					v = t.res.accountingSymbol,
					y = this._element.find(".currency-symbol-dropdown").get(0).selectedIndex;
					o = v[y][1];
					if (o === null)
						return r;
					else if (o === "")
						for (r = "", a = " $", u = 0; u < c.length; u++) {
							var f = c[u],
							e = f.indexOf("[Red]"),
							h = 5;
							e !== -1 ? (s = f.substring(0, e + h) + a + f.substring(e + h), r = r + s + ";") : r = r + a + f + ";"
						}
					else
						for (r = "", u = 0; u < c.length; u++) {
							var f = c[u],
							e = f.indexOf("[Red]"),
							h = 5;
							e !== -1 ? (s = f.substring(0, e + h) + "[$" + o + "]" + f.substring(e + h), r = r + s + ";") : r = r + "[$" + o + "]" + f + ";"
						}
					return r !== "" && r.charAt(r.length - 1) === ";" && (r = r.substring(0, r.length - 1)),
					r
				},
				r.prototype._getAccountingFormat = function (n, i) {
					var v = t.res.accountingSymbol,
					f = t.res.accountingFormats[0],
					h = v[i][1],
					a,
					l,
					u,
					c,
					o,
					r,
					e,
					s;
					if (n > 0) {
						for (a = "", l = 0; l < n; l++)
							a += "0";
						f = f.replace(/#0/g, "#0." + a)
					}
					u = f.split(";");
					if (h === null)
						return f;
					else
						h === "" ? (c = " $", f = f.replace(/_\(\*/g, "_(" + c + "*"), o = u[0].replace(/_\(\*/g, c + "*"), o = o.replace(/_\)/g, "_"), r = u[1].replace(/_\(\*/g, c + "*"), r = r.replace(/\(/g, ""), r = r.replace(/\)/g, "_"), e = u[2].replace(/_\(\*/, c + "*"), e = e.replace(/_\)/g, "_"), s = u[3].replace(/_\(/g, "_"), s = s.replace(/_\)/g, "_"), f = o + ";" + r + ";" + e + ";" + s) : (o = u[0].replace(/_\(\*/g, "_-[$" + h + "]*"), o = o.replace(/_\)/, "_-"), r = u[1].replace(/_\(\*/g, "-[$" + h + "]*"), r = r.replace(/\(/g, ""), r = r.replace(/\)/g, "_-"), e = u[2].replace(/_\(\*/g, "_-[$" + h + "]*"), e = e.replace(/_\)/g, "_-"), s = u[3].replace(/_\(/g, "_-"), s = s.replace(/_\)/g, "_-"), f = o + ";" + r + ";" + e + ";" + s);
					return f
				},
				r.prototype._getNumberFormatter = function (n, i, r) {
					var o = t.res.numberFormats,
					s = o.length / 2,
					u = o[n],
					e,
					f;
					r && (u = o[n + s]);
					if (i > 0) {
						for (e = "", f = 0; f < i; f++)
							e += "0";
						u = u.replace(/0/g, "0." + e)
					}
					return u
				},
				r.prototype._updateNumberPanelSpreadObject = function (n, t) {
					var f = t.getActiveSheet(),
					i = f.getSelections(),
					h = i.length,
					r,
					s;
					if (h === 0)
						return;
					var o = i[0].row === -1 ? 0 : i[0].row,
					e = i[0].col === -1 ? 0 : i[0].col,
					u = f.getValue(o, e);
					for ((u === null || u === undefined) && (u = ""), r = 0; r < h; r++) {
						o = i[r].row === -1 ? 0 : i[r].row,
						e = i[r].col === -1 ? 0 : i[r].col;
						if (n === undefined) {
							if (u === "")
								break
						} else
							n !== f.getFormatter(o, e) && (n = undefined);
						u === f.getValue(o, e)
					}
					s = this._getSelectionDateFormat(),
					s && !this._isDateFormat(n) && (n = s),
					this._originalText = u,
					this._currentFormat = n,
					n !== undefined ? (this._element.find(".sample-display").text(this._getTextBySpread(u, n)), this._parseFormat(n)) : this._defaultFormatSetting()
				},
				r.prototype._updateNumberPanel = function (n) {
					this._currentFormat = n,
					n !== undefined ? this._parseFormat(n) : this._defaultFormatSetting()
				},
				r.prototype._parseFormat = function (n) {
					var h = 0,
					a = !1,
					b = t.res.dateFormats,
					w = t.res.japanWesternDateFormat,
					it = t.res.japanEmperorReignDateFormat,
					rt = t.res.timeFormats,
					d = t.res.japanTimeFormats,
					nt = t.res.specialFormats,
					g = t.res.specialJapanFormats,
					v = t.res.numberFormats,
					p = t.res.currencyFormats,
					k = t.res.percentageFormats,
					tt = t.res.scientificFormats,
					l = t.res.fractionFormats,
					ut = t.res.customFormats,
					o,
					r,
					f,
					e,
					c,
					y,
					u,
					i,
					s;
					this._element.find(".custom-type-input").val(n),
					o = this._isDateFormat(n);
					if (o) {
						this._element.find(".category-select").val("date").trigger("change"),
						r = $.inArray(o, b);
						if (r < 0)
							if ((r = $.inArray(o, w)) < 0) {
								if ((r = $.inArray(o, it)) >= 0) {
									this._element.find(".date-type-locale-select").val("ja_jp").trigger("change"),
									this._element.find(".date-type-calendar-select").val("JER").trigger("change"),
									this._element.find(".date-type-select").get(0).selectedIndex = r,
									this._element.find(".date-type-select").trigger("change");
									return
								}
							} else {
								this._element.find(".date-type-locale-select").val("ja_jp").trigger("change"),
								this._element.find(".date-type-calendar-select").val("western").trigger("change"),
								this._element.find(".date-type-select").get(0).selectedIndex = r,
								this._element.find(".date-type-select").trigger("change");
								return
							}
						else {
							this._element.find(".date-type-locale-select").val("en_us").trigger("change"),
							this._element.find(".date-type-select").get(0).selectedIndex = r,
							this._element.find(".date-type-select").trigger("change");
							return
						}
					}
					f = $.inArray(n, rt);
					if (f < 0) {
						f = $.inArray(n, d);
						if (f >= 0) {
							this._element.find(".category-select").val("time").trigger("change"),
							this._element.find(".time-type-locale-select").val("ja_jp").trigger("change"),
							this._element.find(".time-type-select").get(0).selectedIndex = f,
							this._element.find(".time-type-select").trigger("change");
							return
						}
					} else {
						this._element.find(".category-select").val("time").trigger("change"),
						this._element.find(".time-type-locale-select").val("en_us").trigger("change"),
						this._element.find(".time-type-select").get(0).selectedIndex = f,
						this._element.find(".time-type-select").trigger("change");
						return
					}
					e = $.inArray(n, nt);
					if (e < 0) {
						e = $.inArray(n, g);
						if (e >= 0) {
							this._element.find(".category-select").val("special").trigger("change"),
							this._element.find(".special-type-locale-select").val("ja_jp").trigger("change"),
							this._element.find(".special-type-select").get(0).selectedIndex = e,
							this._element.find(".special-type-select").trigger("change");
							return
						}
					} else {
						this._element.find(".category-select").val("special").trigger("change"),
						this._element.find(".special-type-locale-select").val("en_us").trigger("change"),
						this._element.find(".special-type-select").get(0).selectedIndex = e,
						this._element.find(".special-type-select").trigger("change");
						return
					}
					for (i = 0; i < l.length; i++)
						if (n === l[i]) {
							this._element.find(".category-select").val("fraction").trigger("change"),
							this._element.find(".fraction-type-select").get(0).selectedIndex = i,
							this._element.find(".fraction-type-select").trigger("change");
							return
						}
					if (n === "General") {
						this._element.find(".category-select").val("general").trigger("change");
						return
					}
					if (n === "@") {
						this._element.find(".category-select").val("text").trigger("change");
						return
					}
					if (n.indexOf(".") !== -1) {
						for (c = n.indexOf("."), i = 0, i = c + 1; i < n.length; i++)
							if (n.substring(i, i + 1) === "0")
								h++;
							else
								break;
						this._element.find(".format-decimal-input").val(h)
					}
					for (y = n.substring(n.indexOf("."), n.indexOf(".") + h + 1), u = n.replace(new RegExp(y, "g"), ""), n.indexOf("$") !== -1 && (u = u.replace(/$/g, "")), i = 0; i < v.length; i++)
						if (u === v[i]) {
							this._element.find(".category-select").val("numbers").trigger("change"),
							this._element.find(".negative-number-select").get(0).selectedIndex = i % 4,
							this._element.find(".negative-number-select").trigger("change"),
							n.indexOf("#,") !== -1 && (a = !0, this._element.find(".separator-input").prop("checked", a));
							return
						}
					for (i = 0; i < p.length; i++)
						if (u === p[i]) {
							this._element.find(".category-select").val("currency").trigger("change"),
							this._element.find(".currency-type-select").get(0).selectedIndex = i % 4,
							this._element.find(".currency-type-select").trigger("change"),
							n.indexOf("$") !== -1 && (this._element.find(".currency-symbol-dropdown").get(0).selectedIndex = 1, this._element.find(".accounting-symbol-dropdown").get(0).selectedIndex = 1);
							return
						}
					if (u === tt[0]) {
						this._element.find(".category-select").val("scientific").trigger("change");
						return
					}
					if (u === k[0]) {
						this._element.find(".category-select").val("percentage").trigger("change");
						return
					}
					s = $.inArray(n, ut);
					if (s < 0)
						this._element.find(".category-select").val("custom").trigger("change");
					else {
						this._element.find(".category-select").val("custom").trigger("change"),
						this._element.find(".custom-type-select").get(0).selectedIndex = s,
						this._element.find(".custom-type-select").trigger("change");
						return
					}
				},
				r.prototype.selectTab = function (n) {
					n.numbers ? this._element.find(".tab-number-li").css("display", "block") : this._element.find(".tab-number-li").css("display", "none"),
					n.alignment ? this._element.find(".tab-alignment-li").css("display", "block") : this._element.find(".tab-alignment-li").css("display", "none"),
					n.font ? this._element.find(".tab-font-li").css("display", "block") : this._element.find(".tab-font-li").css("display", "none"),
					n.border ? this._element.find(".tab-border-li").css("display", "block") : this._element.find(".tab-border-li").css("display", "none"),
					n.fill ? this._element.find(".tab-fill-li").css("display", "block") : this._element.find(".tab-fill-li").css("display", "none"),
					n.protection ? this._element.find(".tab-protection-li").css("display", "block") : this._element.find(".tab-protection-li").css("display", "none")
				},
				r.prototype._updateRibbonFormat = function () {
					t.ribbon.updateCellStyle(),
					t.ribbon.updateMerge(),
					t.ribbon.updateFormat()
				},
				r.prototype._getSelectionDateFormat = function () {
					var o = t.wrapper.spread.getActiveSheet(),
					h,
					n = o.getSelections(),
					f,
					r,
					s,
					i,
					e,
					c;
					if (!n || n.length === 0)
						return null;
					f = n[0].row === -1 ? 0 : n[0].row,
					r = n[0].col === -1 ? 0 : n[0].col;
					if (o.getValue(f, r)instanceof Date)
						h = this._getDateFormat(o.getValue(f, r), f, r);
					else
						return null;
					for (s = 0; s < n.length; s++) {
						var u = n[s],
						f = u.row === -1 ? 0 : u.row,
						r = u.col === -1 ? 0 : u.col,
						l = u.rowCount,
						a = u.colCount;
						for (i = f; i < f + l; i++)
							for (e = r; e < r + a; e++) {
								c = o.getValue(i, e);
								if (!(c instanceof Date) || this._getDateFormat(o.getValue(i, e), i, e) !== h)
									return null
							}
					}
					return h
				},
				r.prototype._getDateFormat = function (n, i, r) {
					for (var o = t.res.dateFormats, f = t.res.japanWesternDateFormat, s = t.res.japanEmperorReignDateFormat, h = t.wrapper.spread.getActiveSheet(), e = h.getText(i, r), u = 0; u < o.length; u++)
						if (this._getTextBySpread(n, o[u]) === e)
							return o[u];
					for (u = 0; u < f.length; u++)
						if (this._getTextBySpread(n, f[u]) === e)
							return f[u];
					for (u = 0; u < s.length; u++)
						if (this._getTextBySpread(n, s[u]) === e)
							return s[u]
				},
				r.prototype._isDateFormat = function (n) {
					var i,
					u,
					f;
					if (n === null || n === undefined)
						return !1;
					var e = t.res.dateFormats,
					h = t.res.customFormats,
					s = t.res.japanWesternDateFormat,
					o = t.res.japanEmperorReignDateFormat,
					r = "1992";
					if (n.indexOf("G") !== -1 || n.indexOf("g") !== -1 || n.indexOf("e") !== -1)
						return n;
					for (i = 0; i < e.length; i++) {
						u = this._getTextBySpread(r, e[i]),
						f = this._getTextBySpread(r, n);
						if (u === f && e[i].indexOf(n) !== -1)
							return e[i]
					}
					for (i = 0; i < s.length; i++) {
						u = this._getTextBySpread(r, s[i]),
						f = this._getTextBySpread(r, n);
						if (u === f && s[i].indexOf(n) !== -1)
							return s[i]
					}
					for (i = 0; i < o.length; i++) {
						u = this._getTextBySpread(r, o[i]),
						f = this._getTextBySpread(r, n);
						if (u === f && o[i].indexOf(n) !== -1)
							return o[i]
					}
					return !1
				},
				r.myRes = t.res.formatDialog,
				r._currentID = 0,
				r
			}
			(t.BaseDialog);
			t.FormatDialog = i
		})(n.designer || (n.designer = {}));
		var t = n.designer
	})(n.Sheets || (n.Sheets = {}));
	var t = n.Sheets
})(GcSpread || (GcSpread = {}))
