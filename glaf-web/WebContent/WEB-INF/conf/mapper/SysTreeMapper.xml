<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.base.modules.sys.mapper.SysTreeMapper">

	<resultMap id="sysTreeResultMap" type="com.glaf.base.modules.sys.model.SysTree">
		<id property="id" column="ID" jdbcType="BIGINT" />
		<result property="parentId" column="PARENT" jdbcType="BIGINT" />
		<result property="code" column="CODE" jdbcType="VARCHAR" />
		<result property="desc" column="NODEDESC" jdbcType="VARCHAR" />
		<result property="discriminator" column="DISCRIMINATOR"
			jdbcType="VARCHAR" />
		<result property="icon" column="ICON" jdbcType="VARCHAR" />
		<result property="iconCls" column="ICONCLS" jdbcType="VARCHAR" />
		<result property="locked" column="LOCKED" jdbcType="INTEGER" />
		<result property="moveable" column="MOVEABLE" jdbcType="VARCHAR" />
		<result property="name" column="NAME" jdbcType="VARCHAR" />
		<result property="sort" column="SORT" jdbcType="INTEGER" />
		<result property="treeId" column="TREEID" jdbcType="VARCHAR" />
		<result property="allowedFizeSize" column="ALLOWEDFIZESIZE"
			jdbcType="INTEGER" />
		<result property="allowedFileExts" column="ALLOWEDFILEEXTS"
			jdbcType="VARCHAR" />
		<result property="providerClass" column="PROVIDERCLASS"
			jdbcType="VARCHAR" />
		<result property="url" column="URL" jdbcType="VARCHAR" />
		<result property="createBy" column="CREATEBY" jdbcType="VARCHAR" />
		<result property="createDate" column="CREATEDATE" jdbcType="TIMESTAMP" />
		<result property="updateBy" column="UPDATEBY" jdbcType="VARCHAR" />
		<result property="updateDate" column="UPDATEDATE" jdbcType="TIMESTAMP" />
		<result property="deleteFlag" column="DELETEFLAG" jdbcType="INTEGER" />
		<result property="deleteTime" column="DELETETIME" jdbcType="TIMESTAMP" />
	</resultMap>


	<insert id="insertSysTree" parameterType="com.glaf.base.modules.sys.model.SysTree">
		insert into sys_tree
		<trim prefix="(" suffix=")" suffixOverrides=",">
			ID
			<if test="parentId != null">
				,PARENT
			</if>
			<if test="name != null">
				,NAME
			</if>
			<if test="desc != null">
				,NODEDESC
			</if>
			<if test="discriminator != null">
				,DISCRIMINATOR
			</if>
			<if test="cacheFlag != null">
				,CACHEFLAG
			</if>
			<if test="moveable != null">
				,MOVEABLE
			</if>
			<if test="treeId != null">
				,TREEID
			</if>
			<if test="sort != null">
				,SORT
			</if>
			<if test="code != null">
				,CODE
			</if>
			<if test="icon != null">
				,icon
			</if>
			<if test="iconCls != null">
				,iconCls
			</if>
			<if test="url != null">
				,url
			</if>
			<if test="allowedFizeSize != null">
				,ALLOWEDFIZESIZE
			</if>
			<if test="allowedFileExts != null">
				,ALLOWEDFILEEXTS
			</if>
			<if test="providerClass != null">
				,PROVIDERCLASS
			</if>
			<if test="locked != null">
				,locked
			</if>
			<if test="createDate != null">
				,CREATEDATE
			</if>
			<if test="createBy != null">
				,CREATEBY
			</if>
			<if test="updateBy != null">
				,UPDATEBY
			</if>
			<if test="updateDate != null">
				,UPDATEDATE
			</if>
			<if test="deleteFlag != null">
				,DELETEFLAG
			</if>
			<if test="deleteTime != null">
				,DELETETIME
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			#{id, jdbcType=BIGINT}

			<if test="parentId != null">
				,#{parentId, jdbcType=BIGINT}
			</if>
			<if test="name != null">
				,#{name, jdbcType=VARCHAR}
			</if>
			<if test="desc != null">
				,#{desc, jdbcType=VARCHAR}
			</if>
			<if test="discriminator != null">
				,#{discriminator, jdbcType=VARCHAR}
			</if>
			<if test="cacheFlag != null">
				,#{cacheFlag, jdbcType=VARCHAR}
			</if>
			<if test="moveable != null">
				,#{moveable, jdbcType=VARCHAR}
			</if>
			<if test="treeId != null">
				,#{treeId, jdbcType=VARCHAR}
			</if>
			<if test="sort != null">
				,#{sort, jdbcType=INTEGER}
			</if>
			<if test="code != null">
				,#{code, jdbcType=VARCHAR}
			</if>
			<if test="icon != null">
				,#{icon, jdbcType=VARCHAR}
			</if>
			<if test="iconCls != null">
				,#{iconCls, jdbcType=VARCHAR}
			</if>
			<if test="url != null">
				,#{url, jdbcType=VARCHAR}
			</if>
			<if test="allowedFizeSize != null">
				,#{allowedFizeSize, jdbcType=INTEGER}
			</if>
			<if test="allowedFileExts != null">
				,#{allowedFileExts, jdbcType=VARCHAR}
			</if>
			<if test="providerClass != null">
				,#{providerClass, jdbcType=VARCHAR}
			</if>
			<if test="locked != null">
				,#{locked, jdbcType=INTEGER}
			</if>
			<if test="createDate != null">
				,#{createDate, jdbcType=TIMESTAMP}
			</if>
			<if test="createBy != null">
				,#{createBy, jdbcType=VARCHAR}
			</if>
			<if test="updateBy != null">
				,#{updateBy, jdbcType=VARCHAR}
			</if>
			<if test="updateDate != null">
				,#{updateDate, jdbcType=TIMESTAMP}
			</if>
			<if test="deleteFlag != null">
				,#{deleteFlag, jdbcType=INTEGER}
			</if>
			<if test="deleteTime != null">
				,#{deleteTime, jdbcType=TIMESTAMP}
			</if>
		</trim>
	</insert>


	<insert id="bulkInsertSysTree" parameterType="java.util.List">
		insert into SYS_TREE (
		ID
		,CODE
		,CREATEBY
		,CREATEDATE
		,NODEDESC
		,DISCRIMINATOR
		,ICON
		,ICONCLS
		,LOCKED
		,MOVEABLE
		,NAME
		,PARENT
		,SORT
		,TREEID
		,ALLOWEDFIZESIZE
		,ALLOWEDFILEEXTS
		,PROVIDERCLASS
		,UPDATEBY
		,UPDATEDATE
		,URL
		) values
		<foreach collection="list" item="sysTree" index="index"
			separator=",">
			(
			#{sysTree.id, jdbcType=BIGINT}
			,#{sysTree.code,
			jdbcType=VARCHAR}
			,#{sysTree.createBy, jdbcType=VARCHAR}
			,#{sysTree.createDate, jdbcType=TIMESTAMP}
			,#{sysTree.desc,
			jdbcType=VARCHAR}
			,#{sysTree.discriminator, jdbcType=VARCHAR}
			,#{sysTree.icon, jdbcType=VARCHAR}
			,#{sysTree.iconCls,
			jdbcType=VARCHAR}
			,#{sysTree.locked, jdbcType=INTEGER}
			,#{sysTree.moveable, jdbcType=VARCHAR}
			,#{sysTree.name,
			jdbcType=VARCHAR}
			,#{sysTree.parentId, jdbcType=BIGINT}
			,#{sysTree.sort, jdbcType=INTEGER}
			,#{sysTree.treeId,
			jdbcType=VARCHAR}
			,#{sysTree.allowedFizeSize, jdbcType=INTEGER}
			,#{sysTree.allowedFileExts, jdbcType=VARCHAR}
			,#{sysTree.providerClass, jdbcType=VARCHAR}
			,#{sysTree.updateBy,
			jdbcType=VARCHAR}
			,#{sysTree.updateDate, jdbcType=TIMESTAMP}
			,#{sysTree.url, jdbcType=VARCHAR}
			)
		</foreach>
	</insert>


	<insert id="bulkInsertSysTree_oracle" parameterType="java.util.List">
		INSERT ALL
		<foreach collection="list" item="sysTree" index="index">
			insert into
			SYS_TREE (
			ID
			,CODE
			,CREATEBY
			,CREATEDATE
			,NODEDESC
			,DISCRIMINATOR
			,ICON
			,ICONCLS
			,LOCKED
			,MOVEABLE
			,NAME
			,PARENT
			,SORT
			,TREEID
			,ALLOWEDFIZESIZE
			,ALLOWEDFILEEXTS
			,PROVIDERCLASS
			,UPDATEBY
			,UPDATEDATE
			,URL
			) values (
			#{sysTree.id, jdbcType=BIGINT}
			,#{sysTree.code, jdbcType=VARCHAR}
			,#{sysTree.createBy, jdbcType=VARCHAR}
			,#{sysTree.createDate,
			jdbcType=TIMESTAMP}
			,#{sysTree.desc, jdbcType=VARCHAR}
			,#{sysTree.discriminator, jdbcType=VARCHAR}
			,#{sysTree.icon,
			jdbcType=VARCHAR}
			,#{sysTree.iconCls, jdbcType=VARCHAR}
			,#{sysTree.locked, jdbcType=INTEGER}
			,#{sysTree.moveable,
			jdbcType=VARCHAR}
			,#{sysTree.name, jdbcType=VARCHAR}
			,#{sysTree.parentId, jdbcType=BIGINT}
			,#{sysTree.sort,
			jdbcType=INTEGER}
			,#{sysTree.treeId, jdbcType=VARCHAR}
			,#{sysTree.allowedFizeSize, jdbcType=INTEGER}
			,#{sysTree.allowedFileExts, jdbcType=VARCHAR}
			,#{sysTree.providerClass, jdbcType=VARCHAR}
			,#{sysTree.updateBy,
			jdbcType=VARCHAR}
			,#{sysTree.updateDate, jdbcType=TIMESTAMP}
			,#{sysTree.url, jdbcType=VARCHAR}
			)
		</foreach>
		SELECT * FROM dual
	</insert>


	<update id="updateSysTree" parameterType="com.glaf.base.modules.sys.model.SysTree">
		update sys_tree
		set
		<trim prefix="" suffix="" suffixOverrides=",">
			<if test="parentId != null">
				PARENT = #{parentId, jdbcType=BIGINT},
			</if>
			<if test="name != null">
				NAME = #{name, jdbcType=VARCHAR},
			</if>
			<if test="desc != null">
				NODEDESC = #{desc, jdbcType=VARCHAR},
			</if>
			<if test="cacheFlag != null">
				CACHEFLAG = #{cacheFlag, jdbcType=VARCHAR},
			</if>
			<if test="discriminator != null">
				DISCRIMINATOR = #{discriminator, jdbcType=VARCHAR},
			</if>
			<if test="treeId != null">
				TREEID = #{treeId, jdbcType=VARCHAR},
			</if>
			<if test="sort != null">
				SORT = #{sort, jdbcType=INTEGER},
			</if>
			<if test="code != null">
				CODE = #{code, jdbcType=VARCHAR},
			</if>
			<if test="icon != null">
				icon = #{icon, jdbcType=VARCHAR},
			</if>
			<if test="iconCls != null">
				iconCls = #{iconCls, jdbcType=VARCHAR},
			</if>
			<if test="url != null">
				url = #{url, jdbcType=VARCHAR},
			</if>
			<if test="allowedFizeSize != null">
				ALLOWEDFIZESIZE = #{allowedFizeSize, jdbcType=INTEGER},
			</if>
			<if test="allowedFileExts != null">
				ALLOWEDFILEEXTS = #{allowedFileExts, jdbcType=VARCHAR},
			</if>
			<if test="providerClass != null">
				PROVIDERCLASS = #{providerClass, jdbcType=VARCHAR},
			</if>
			<if test="locked != null">
				locked = #{locked, jdbcType=INTEGER},
			</if>
			<if test="updateBy != null">
				UPDATEBY = #{updateBy, jdbcType=VARCHAR},
			</if>
			<if test="updateDate != null">
				UPDATEDATE = #{updateDate, jdbcType=TIMESTAMP},
			</if>
			<if test="deleteFlag != null">
				DELETEFLAG = #{deleteFlag, jdbcType=INTEGER},
			</if>
			<if test="deleteTime != null">
				DELETETIME = #{deleteTime, jdbcType=TIMESTAMP},
			</if>
		</trim>
		where
		ID = #{id, jdbcType=BIGINT}

	</update>


	<delete id="deleteSysTreeById" parameterType="long">
		delete from
		sys_tree where ID = #{id}
	</delete>


	<delete id="deleteSysTrees" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery">
		delete from sys_tree
		where (
		ID IN
		<foreach item="x_rowId" index="index" collection="rowIds"
			open="(" separator="," close=")">
			#{x_rowId}
		</foreach>
		)
	</delete>


	<select id="getSysTreeById" parameterType="long" resultMap="sysTreeResultMap">
		select * from sys_tree where ID = #{id}
	</select>


	<select id="getDictorySysTrees" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join sys_dictory D
		on E.ID =
		D.TYPEID
		where 1=1

		<include refid="getSysTreesSql" />

	</select>

	<select id="getDepartmentSysTrees" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join sys_department D
		on E.ID
		= D.NODEID
		where 1=1

		<include refid="getSysTreesSql" />

		order by E.PARENT asc, E.LOCKED asc, E.SORT asc

	</select>


	<select id="getApplicationSysTrees" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join sys_application D
		on E.ID
		= D.NODEID
		where 1=1

		<include refid="getSysTreesSql" />

		order by E.PARENT asc, E.LOCKED asc, E.SORT asc

	</select>


	<select id="getRelationSysTrees" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join ${relationTable} R
		on
		E.ID = R.${relationColumn}
		where 1=1

		<include refid="getSysTreesSql" />

		order by E.PARENT asc, E.LOCKED asc, E.SORT asc

	</select>


	<select id="getRoleUserTrees" parameterType="com.glaf.base.modules.sys.query.SysUserQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join sys_department
		D
		on E.ID = D.NODEID
		inner join UserInfo U
		on D.ID = U.DEPID
		inner join
		userrole UR
		on U.USERID = UR.USERID
		inner join net_role R
		on UR.ROLEID =
		R.ID
		where UR.USERID = #{account}
		and R.CODE = #{roleCode}
		order by
		E.PARENT asc, E.LOCKED asc, E.SORT asc

	</select>


	<select id="getRoleUserTrees_oracle" parameterType="com.glaf.base.modules.sys.query.SysUserQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join sys_department
		D
		on E.ID = D.NODEID
		inner join UserInfo U
		on D.ID = U.DEPID
		inner join
		userrole UR
		on U.USERID = UR.USERID
		inner join net_role R
		on UR.ROLEID =
		to_char(R.ID)
		where UR.USERID = #{account}
		and R.CODE =
		#{roleCode}
		order by
		E.PARENT asc, E.LOCKED asc, E.SORT asc

	</select>
	
	
	<select id="getRoleUserTrees_postgresql" parameterType="com.glaf.base.modules.sys.query.SysUserQuery"
		resultMap="sysTreeResultMap">

		select distinct E.* from sys_tree E
		inner join sys_department
		D
		on E.ID = D.NODEID
		inner join UserInfo U
		on D.ID = U.DEPID
		inner join
		userrole UR
		on U.USERID = UR.USERID
		inner join net_role R
		on UR.ROLEID =
		CAST(R.ID AS VARCHAR)
		where UR.USERID = #{account}
		and R.CODE =
		#{roleCode}
		order by
		E.PARENT asc, E.LOCKED asc, E.SORT asc

	</select>


	<select id="getRoleTrees" parameterType="com.glaf.base.modules.sys.query.SysUserRoleQuery"
		resultMap="sysTreeResultMap">

		select distinct t.* from sys_tree t
		inner join sys_application a
		on t.id
		= a.nodeid

		<if test="roleIds != null and roleIds.size != 0">
			inner join sys_access s
			on a.id = s.appid
			where 1=1
			and s.roleid in
			<foreach item="x_roleId" index="index" collection="roleIds"
				open="(" separator="," close=")">
				#{x_roleId}
			</foreach>
		</if>
		order by t.PARENT asc, t.LOCKED asc, t.SORT asc

	</select>


	<select id="getTreeList" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultType="com.glaf.base.modules.sys.model.SysTree">

		select distinct t.id as id, t.parent as parentId, a.name as
		name, a.url as url,
		t.sort as sortNo, t.treeid as treeId, t.code as
		code, t.locked as locked,a.IMAGEPATH as icon,t.iconCls as iconCls
		from
		sys_tree t
		inner join
		sys_application a
		on t.id = a.nodeid
		where
		t.treeid
		like #{treeIdLike}
		and t.treeid != #{treeId}
		order by
		t.parent, t.locked,
		t.sort, t.treeid

	</select>


	<select id="getTreeListByUsers" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultType="com.glaf.base.modules.sys.model.SysTree">

		select distinct t.id as id, t.parent as parentId, a.name as
		name,a.IMAGEPATH as icon,
		a.url as url, t.iconCls as iconCls,
		t.sort as
		sortNo, t.treeid as treeId, t.code as code, t.locked as locked
		from
		sys_tree t
		inner join sys_application a
		on t.id = a.nodeid
		inner
		join
		sys_access c
		on a.id = c.appId
		where t.treeid like
		#{treeIdLike}
		and
		c.roleId in (
		select ur.roleid from userrole ur
		inner
		join UserInfo u
		on
		u.UserID = ur.userid
		where 1=1
		<choose>
			<when test="actorId != null">
				and u.UserID = #{actorId}
			</when>
			<when test="actorIds != null and actorIds.size !=0">
				and u.UserID IN
				<foreach item="x_actorId" index="index" collection="actorIds"
					open="(" separator="," close=")">
					#{x_actorId}
				</foreach>
			</when>
			<otherwise>
				and 1=0
			</otherwise>
		</choose>

		)
		order by t.parent, t.locked, t.sort, t.treeid

	</select>


	<select id="getSysTrees" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultMap="sysTreeResultMap">
		select E.*
		<include refid="selectSysTreesSql" />
		<choose>
			<when test="orderBy != null">
				order by ${orderBy}
			</when>
			<otherwise>
				order by E.parent, E.LOCKED asc, E.SORT asc, E.treeid asc
			</otherwise>
		</choose>
	</select>


	<select id="getSysTreeCount" parameterType="com.glaf.base.modules.sys.query.SysTreeQuery"
		resultType="int">
		select count(*)
		<include refid="selectSysTreesSql" />
	</select>


	<sql id="selectSysTreesSql">

		from sys_tree E

		<if test=" departmentStatus != null  ">
			inner join sys_department D
			on D.NODEID = E.ID
		</if>

		<where>
			1 = 1

			<if test=" departmentStatus != null  ">
				and D.STATUS = #{departmentStatus}
			</if>

			<if test="nodeIds != null and nodeIds.size != 0">
				and E.ID IN
				<foreach item="x_nodeId" index="index" collection="nodeIds"
					open="(" separator="," close=")">
					#{x_nodeId}
				</foreach>
			</if>

			<if test="parentId != null">
				and E.PARENT = #{parentId}
			</if>

			<if test="parentIds != null and parentIds.size != 0">
				and E.PARENT IN
				<foreach item="x_parentId" index="index" collection="parentIds"
					open="(" separator="," close=")">
					#{x_parentId}
				</foreach>
			</if>

			<if test="discriminator != null and discriminator != '' ">
				and E.DISCRIMINATOR = #{discriminator}
			</if>

			<if test="name != null and name != '' ">
				and E.NAME = #{name}
			</if>

			<if test="nameLike != null and nameLike != '' ">
				and E.NAME like #{nameLike}
			</if>

			<if test="names != null and names.size != 0">
				and E.NAME IN
				<foreach item="x_name" index="index" collection="names"
					open="(" separator="," close=")">
					#{x_name}
				</foreach>
			</if>

			<if test="descLike != null and descLike != '' ">
				and E.NODEDESC like #{descLike}
			</if>

			<if test="sortGreaterThanOrEqual != null">
				and E.SORT &gt;= #{sortGreaterThanOrEqual}
			</if>

			<if test="sortGreaterThan != null">
				and E.SORT &gt; #{sortGreaterThan}
			</if>

			<if test="sortLessThanOrEqual != null">
				and E.SORT &lt;= #{sortLessThanOrEqual}
			</if>

			<if test="sortLessThan != null">
				and E.SORT &lt; #{sortLessThan}
			</if>

			<if test="code != null and code != '' ">
				and E.CODE = #{code}
			</if>

			<if test="codeLike != null and codeLike != '' ">
				and E.CODE like #{codeLike}
			</if>

			<if test="codes != null and codes.size != 0">
				and E.CODE IN
				<foreach item="x_code" index="index" collection="codes"
					open="(" separator="," close=")">
					#{x_code}
				</foreach>
			</if>

			<if test="treeIdLike != null and treeIdLike != '' ">
				and E.TREEID like #{treeIdLike}
			</if>

			<if test="urlLike != null and urlLike != '' ">
				and E.url like #{urlLike}
			</if>

			<if test="locked != null">
				and E.locked = #{locked}
			</if>

			<if test="createBy != null">
				and E.CREATEBY = #{createBy}
			</if>

			<if test="deleteFlag != null">
				and E.DELETEFLAG = #{deleteFlag}
			</if>

		</where>
	</sql>


	<sql id="getSysTreesSql">

		<if test="parentId != null">
			and E.PARENT = #{parentId}
		</if>

		<if test="parentIds != null and parentIds.size != 0">
			and E.PARENT IN
			<foreach item="x_parentId" index="index" collection="parentIds"
				open="(" separator="," close=")">
				#{x_parentId}
			</foreach>
		</if>

		<if test="nodeIds != null and nodeIds.size != 0">
			and E.ID IN
			<foreach item="x_nodeId" index="index" collection="nodeIds"
				open="(" separator="," close=")">
				#{x_nodeId}
			</foreach>
		</if>

		<if test="discriminator != null and discriminator != '' ">
			and E.DISCRIMINATOR = #{discriminator}
		</if>

		<if test="name != null and name != '' ">
			and E.NAME = #{name}
		</if>

		<if test="nameLike != null and nameLike != '' ">
			and E.NAME like #{nameLike}
		</if>

		<if test="names != null and names.size != 0">
			and E.NAME IN
			<foreach item="x_name" index="index" collection="names" open="("
				separator="," close=")">
				#{x_name}
			</foreach>
		</if>

		<if test="descLike != null and descLike != '' ">
			and E.NODEDESC like #{descLike}
		</if>

		<if test="sortGreaterThanOrEqual != null">
			and E.SORT &gt;= #{sortGreaterThanOrEqual}
		</if>

		<if test="sortGreaterThan != null">
			and E.SORT &gt; #{sortGreaterThan}
		</if>

		<if test="sortLessThanOrEqual != null">
			and E.SORT &lt;= #{sortLessThanOrEqual}
		</if>

		<if test="sortLessThan != null">
			and E.SORT &lt; #{sortLessThan}
		</if>

		<if test="code != null and code != '' ">
			and E.CODE = #{code}
		</if>

		<if test="codeLike != null and codeLike != '' ">
			and E.CODE like #{codeLike}
		</if>

		<if test="codes != null and codes.size != 0">
			and E.CODE IN
			<foreach item="x_code" index="index" collection="codes" open="("
				separator="," close=")">
				#{x_code}
			</foreach>
		</if>

		<if test="treeIdLeftLike != null and treeIdLeftLike != '' ">
			and E.TREEID like #{treeIdLeftLike}
		</if>

		<if test="treeIdLike != null and treeIdLike != '' ">
			and E.TREEID like #{treeIdLike}
		</if>

		<if test="treeIdRightLike != null and treeIdRightLike != '' ">
			and E.TREEID like #{treeIdRightLike}
		</if>

		<if test="urlLike != null and urlLike != '' ">
			and E.url like #{urlLike}
		</if>

		<if test="locked != null">
			and E.locked = #{locked}
		</if>

		<if test="createBy != null">
			and E.CREATEBY = #{createBy}
		</if>

		<if test="deleteFlag != null">
			and E.DELETEFLAG = #{deleteFlag}
		</if>

		<if test="dataRequest != null and dataRequest.filter != null ">
			<include refid="com.glaf.global.GlobalMapper.dataRequestFilterCondition" />
		</if>

	</sql>

</mapper>