<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.isdp.mapper.TreeDotMapper">

 	<resultMap id="treeDotResultMap"	type="com.glaf.isdp.domain.TreeDot">
        <id property="indexId" column="INDEX_ID" jdbcType="INTEGER" />
        <result property="id" column="ID" jdbcType="VARCHAR"/>
        <result property="parentId" column="PARENT_ID" jdbcType="INTEGER"/>
        <result property="indexName" column="INDEX_NAME" jdbcType="VARCHAR"/>
        <result property="nlevel" column="NLEVEL" jdbcType="INTEGER"/>
        <result property="num" column="NUM" jdbcType="VARCHAR"/>
        <result property="content" column="CONTENT" jdbcType="VARCHAR"/>
        <result property="sindexName" column="SINDEX_NAME" jdbcType="VARCHAR"/>
        <result property="nodeIco" column="NODEICO" jdbcType="INTEGER"/>
        <result property="listNo" column="LISTNO" jdbcType="INTEGER"/>
        <result property="menuId" column="MENUID" jdbcType="INTEGER"/>
        <result property="isEnd" column="ISEND" jdbcType="INTEGER"/>
        <result property="sysMenuId" column="SYSMENUID" jdbcType="VARCHAR"/>
        <result property="type" column="TYPE" jdbcType="INTEGER"/>
        <result property="fileNumId" column="FILENUMID" jdbcType="VARCHAR"/>
        <result property="fileNumId2" column="FILENUMID2" jdbcType="VARCHAR"/>
        <result property="projIndex" column="PROJ_INDEX" jdbcType="INTEGER"/>
        <result property="domainIndex" column="DOMAIN_INDEX" jdbcType="INTEGER"/>
        
        <result property="childrenCount" column="childrenCount" jdbcType="INTEGER"/>
	</resultMap>

 
	<insert id="insertTreeDot" parameterType="com.glaf.isdp.domain.TreeDot">
		insert into TREEDOT 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		    INDEX_ID
			<if test="id != null">
				,ID 
			</if>
			<if test="parentId != null">
				,PARENT_ID 
			</if>
			<if test="indexName != null">
				,INDEX_NAME 
			</if>
			<if test="nlevel != null">
				,NLEVEL 
			</if>
			<if test="num != null">
				,NUM 
			</if>
			<if test="content != null">
				,CONTENT 
			</if>
			<if test="sindexName != null">
				,SINDEX_NAME 
			</if>
			<if test="nodeIco != null">
				,NODEICO 
			</if>
			<if test="listNo != null">
				,LISTNO 
			</if>
			<if test="menuId != null">
				,MENUID 
			</if>
			<if test="isEnd != null">
				,ISEND 
			</if>
			<if test="sysMenuId != null">
				,SYSMENUID 
			</if>
			<if test="type != null">
				,TYPE 
			</if>
			<if test="fileNumId != null">
				,FILENUMID 
			</if>
			<if test="fileNumId2 != null">
				,FILENUMID2 
			</if>
			<if test="projIndex != null">
				,PROJ_INDEX 
			</if>
			<if test="domainIndex != null">
				,DOMAIN_INDEX 
			</if>
        </trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			  #{indexId, jdbcType=INTEGER}
	     
			<if test="id != null">
				,#{id, jdbcType=VARCHAR}
			</if>
			<if test="parentId != null">
				,#{parentId, jdbcType=INTEGER}
			</if>
			<if test="indexName != null">
				,#{indexName, jdbcType=VARCHAR}
			</if>
			<if test="nlevel != null">
				,#{nlevel, jdbcType=INTEGER}
			</if>
			<if test="num != null">
				,#{num, jdbcType=VARCHAR}
			</if>
			<if test="content != null">
				,#{content, jdbcType=VARCHAR}
			</if>
			<if test="sindexName != null">
				,#{sindexName, jdbcType=VARCHAR}
			</if>
			<if test="nodeIco != null">
				,#{nodeIco, jdbcType=INTEGER}
			</if>
			<if test="listNo != null">
				,#{listNo, jdbcType=INTEGER}
			</if>
			<if test="menuId != null">
				,#{menuId, jdbcType=INTEGER}
			</if>
			<if test="isEnd != null">
				,#{isEnd, jdbcType=INTEGER}
			</if>
			<if test="sysMenuId != null">
				,#{sysMenuId, jdbcType=VARCHAR}
			</if>
			<if test="type != null">
				,#{type, jdbcType=INTEGER}
			</if>
			<if test="fileNumId != null">
				,#{fileNumId, jdbcType=VARCHAR}
			</if>
			<if test="fileNumId2 != null">
				,#{fileNumId2, jdbcType=VARCHAR}
			</if>
			<if test="projIndex != null">
				,#{projIndex, jdbcType=INTEGER}
			</if>
			<if test="domainIndex != null">
				,#{domainIndex, jdbcType=INTEGER}
			</if>
	    </trim>
    </insert>

	 
	<update id="updateTreeDot" parameterType="com.glaf.isdp.domain.TreeDot">
		update TREEDOT
		set
        <trim prefix="" suffix="" suffixOverrides=",">		
			<if test="id != null">
				ID = #{id, jdbcType=VARCHAR},
			</if>
			<if test="parentId != null">
				PARENT_ID = #{parentId, jdbcType=INTEGER},
			</if>
			<if test="indexName != null">
				INDEX_NAME = #{indexName, jdbcType=VARCHAR},
			</if>
			<if test="nlevel != null">
				NLEVEL = #{nlevel, jdbcType=INTEGER},
			</if>
			<if test="num != null">
				NUM = #{num, jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				CONTENT = #{content, jdbcType=VARCHAR},
			</if>
			<if test="sindexName != null">
				SINDEX_NAME = #{sindexName, jdbcType=VARCHAR},
			</if>
			<if test="nodeIco != null">
				NODEICO = #{nodeIco, jdbcType=INTEGER},
			</if>
			<if test="listNo != null">
				LISTNO = #{listNo, jdbcType=INTEGER},
			</if>
			<if test="menuId != null">
				MENUID = #{menuId, jdbcType=INTEGER},
			</if>
			<if test="isEnd != null">
				ISEND = #{isEnd, jdbcType=INTEGER},
			</if>
			<if test="sysMenuId != null">
				SYSMENUID = #{sysMenuId, jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				TYPE = #{type, jdbcType=INTEGER},
			</if>
			<if test="fileNumId != null">
				FILENUMID = #{fileNumId, jdbcType=VARCHAR},
			</if>
			<if test="fileNumId2 != null">
				FILENUMID2 = #{fileNumId2, jdbcType=VARCHAR},
			</if>
			<if test="projIndex != null">
				PROJ_INDEX = #{projIndex, jdbcType=INTEGER},
			</if>
			<if test="domainIndex != null">
				DOMAIN_INDEX = #{domainIndex, jdbcType=INTEGER},
			</if>
        </trim>
		where
          INDEX_ID = #{indexId, jdbcType=INTEGER}
		
    </update>

 
	<delete id="deleteTreeDotById" parameterType="integer"> 
        delete from TREEDOT
        where INDEX_ID =	#{id}
	</delete>

	
	<delete id="deleteTreeDots" parameterType="com.glaf.isdp.query.TreeDotQuery">
		delete from TREEDOT
		where ( 
 			  INDEX_ID IN
              <foreach item="x_indexId" index="index" collection="indexIds" 
                     open="(" separator="," close=")">
                  #{x_indexId}
              </foreach>
		)
	</delete>


	<select id="getTreeDotById" parameterType="integer" resultMap="treeDotResultMap">
		select * from TREEDOT where INDEX_ID = #{id}
	</select>


	<select id="getTreeDots" 
	    parameterType="com.glaf.isdp.query.TreeDotQuery"
		resultMap="treeDotResultMap">
		select distinct E.*
		<include refid="selectTreeDotsSql" />
		<choose>
		  <when test="orderBy != null">
		     order by ${orderBy}
          </when>
		  <otherwise>
		      order by E.INDEX_ID desc
		  </otherwise>
        </choose>
	</select>


	<select id="getTreeDotCount" 
	    parameterType="com.glaf.isdp.query.TreeDotQuery"
		resultType="int">
		select count(*)
		<include refid="selectTreeDotsSql" />
	</select>


	<sql id="selectTreeDotsSql">

		from TREEDOT E
		
		<where>
		       1 = 1  
			 
	        
			<if test="id != null and id != '' ">
				and E.ID = #{id}
            </if>

			<if test="idLike != null and idLike != '' ">
				and E.ID like #{idLike}
            </if>

			<if test="ids != null and ids.size() &gt; 0">
			    and E.ID IN
                <foreach item="x_id" index="index" collection="ids" 
                     open="(" separator="," close=")">
                  #{x_id}
                </foreach>
			</if>

			<if test="parentId != null">
				and E.PARENT_ID = #{parentId}
            </if>

			<!-- <if test="parentIdGreaterThanOrEqual != null">
				and E.PARENT_ID &gt;= #{parentIdGreaterThanOrEqual}
            </if>

			<if test="parentIdLessThanOrEqual != null">
				and E.PARENT_ID &lt;= #{parentIdLessThanOrEqual}
            </if> -->

			<if test="parentIds != null and parentIds.size() &gt; 0">
			    and E.PARENT_ID IN
                <foreach item="x_parentId" index="index" collection="parentIds" 
                     open="(" separator="," close=")">
                  #{x_parentId}
                </foreach>
			</if>
      
	        
			<if test="indexName != null and indexName != '' ">
				and E.INDEX_NAME = #{indexName}
            </if>

			<if test="indexNameLike != null and indexNameLike != '' ">
				and E.INDEX_NAME like #{indexNameLike}
            </if>

			<if test="indexNames != null and indexNames.size() &gt; 0">
			    and E.INDEX_NAME IN
                <foreach item="x_indexName" index="index" collection="indexNames" 
                     open="(" separator="," close=")">
                  #{x_indexName}
                </foreach>
			</if>

			<if test="nlevel != null">
				and E.NLEVEL = #{nlevel}
            </if>

			<if test="nlevelGreaterThanOrEqual != null">
				and E.NLEVEL &gt;= #{nlevelGreaterThanOrEqual}
            </if>

			<if test="nlevelLessThanOrEqual != null">
				and E.NLEVEL &lt;= #{nlevelLessThanOrEqual}
            </if>

			<if test="nlevels != null and nlevels.size() &gt; 0">
			    and E.NLEVEL IN
                <foreach item="x_nlevel" index="index" collection="nlevels" 
                     open="(" separator="," close=")">
                  #{x_nlevel}
                </foreach>
			</if>
      
	        
			<if test="num != null and num != '' ">
				and E.NUM = #{num}
            </if>

			<if test="numLike != null and numLike != '' ">
				and E.NUM like #{numLike}
            </if>

			<if test="nums != null and nums.size() &gt; 0">
			    and E.NUM IN
                <foreach item="x_num" index="index" collection="nums" 
                     open="(" separator="," close=")">
                  #{x_num}
                </foreach>
			</if>
	        
			<if test="content != null and content != '' ">
				and E.CONTENT = #{content}
            </if>

			<if test="contentLike != null and contentLike != '' ">
				and E.CONTENT like #{contentLike}
            </if>

			<if test="contents != null and contents.size() &gt; 0">
			    and E.CONTENT IN
                <foreach item="x_content" index="index" collection="contents" 
                     open="(" separator="," close=")">
                  #{x_content}
                </foreach>
			</if>
	        
			<if test="sindexName != null and sindexName != '' ">
				and E.SINDEX_NAME = #{sindexName}
            </if>

			<if test="sindexNameLike != null and sindexNameLike != '' ">
				and E.SINDEX_NAME like #{sindexNameLike}
            </if>

			<if test="sindexNames != null and sindexNames.size() &gt; 0">
			    and E.SINDEX_NAME IN
                <foreach item="x_sindexName" index="index" collection="sindexNames" 
                     open="(" separator="," close=")">
                  #{x_sindexName}
                </foreach>
			</if>

			<if test="nodeIco != null">
				and E.NODEICO = #{nodeIco}
            </if>

			<if test="nodeIcoGreaterThanOrEqual != null">
				and E.NODEICO &gt;= #{nodeIcoGreaterThanOrEqual}
            </if>

			<if test="nodeIcoLessThanOrEqual != null">
				and E.NODEICO &lt;= #{nodeIcoLessThanOrEqual}
            </if>

			<if test="nodeIcos != null and nodeIcos.size() &gt; 0">
			    and E.NODEICO IN
                <foreach item="x_nodeIco" index="index" collection="nodeIcos" 
                     open="(" separator="," close=")">
                  #{x_nodeIco}
                </foreach>
			</if>
      

			<if test="listNo != null">
				and E.LISTNO = #{listNo}
            </if>

			<if test="listNoGreaterThanOrEqual != null">
				and E.LISTNO &gt;= #{listNoGreaterThanOrEqual}
            </if>

			<if test="listNoLessThanOrEqual != null">
				and E.LISTNO &lt;= #{listNoLessThanOrEqual}
            </if>

			<if test="listNos != null and listNos.size() &gt; 0">
			    and E.LISTNO IN
                <foreach item="x_listNo" index="index" collection="listNos" 
                     open="(" separator="," close=")">
                  #{x_listNo}
                </foreach>
			</if>
      

			<if test="menuId != null">
				and E.MENUID = #{menuId}
            </if>

			<if test="menuIdGreaterThanOrEqual != null">
				and E.MENUID &gt;= #{menuIdGreaterThanOrEqual}
            </if>

			<if test="menuIdLessThanOrEqual != null">
				and E.MENUID &lt;= #{menuIdLessThanOrEqual}
            </if>

			<if test="menuIds != null and menuIds.size() &gt; 0">
			    and E.MENUID IN
                <foreach item="x_menuId" index="index" collection="menuIds" 
                     open="(" separator="," close=")">
                  #{x_menuId}
                </foreach>
			</if>
      

			<if test="isEnd != null">
				and E.ISEND = #{isEnd}
            </if>

			<if test="isEndGreaterThanOrEqual != null">
				and E.ISEND &gt;= #{isEndGreaterThanOrEqual}
            </if>

			<if test="isEndLessThanOrEqual != null">
				and E.ISEND &lt;= #{isEndLessThanOrEqual}
            </if>

			<if test="isEnds != null and isEnds.size() &gt; 0">
			    and E.ISEND IN
                <foreach item="x_isEnd" index="index" collection="isEnds" 
                     open="(" separator="," close=")">
                  #{x_isEnd}
                </foreach>
			</if>
      
	        
			<if test="sysMenuId != null and sysMenuId != '' ">
				and E.SYSMENUID = #{sysMenuId}
            </if>

			<if test="sysMenuIdLike != null and sysMenuIdLike != '' ">
				and E.SYSMENUID like #{sysMenuIdLike}
            </if>

			<if test="sysMenuIds != null and sysMenuIds.size() &gt; 0">
			    and E.SYSMENUID IN
                <foreach item="x_sysMenuId" index="index" collection="sysMenuIds" 
                     open="(" separator="," close=")">
                  #{x_sysMenuId}
                </foreach>
			</if>

			<if test="type != null">
				and E.TYPE = #{type}
            </if>

			<if test="typeGreaterThanOrEqual != null">
				and E.TYPE &gt;= #{typeGreaterThanOrEqual}
            </if>

			<if test="typeLessThanOrEqual != null">
				and E.TYPE &lt;= #{typeLessThanOrEqual}
            </if>

			<if test="types != null and types.size() &gt; 0">
			    and E.TYPE IN
                <foreach item="x_type" index="index" collection="types" 
                     open="(" separator="," close=")">
                  #{x_type}
                </foreach>
			</if>
      
	        
			<if test="fileNumId != null and fileNumId != '' ">
				and E.FILENUMID = #{fileNumId}
            </if>

			<if test="fileNumIdLike != null and fileNumIdLike != '' ">
				and E.FILENUMID like #{fileNumIdLike}
            </if>

			<if test="fileNumIds != null and fileNumIds.size() &gt; 0">
			    and E.FILENUMID IN
                <foreach item="x_fileNumId" index="index" collection="fileNumIds" 
                     open="(" separator="," close=")">
                  #{x_fileNumId}
                </foreach>
			</if>
	        
			<if test="fileNumId2 != null and fileNumId2 != '' ">
				and E.FILENUMID2 = #{fileNumId2}
            </if>

			<if test="fileNumId2Like != null and fileNumId2Like != '' ">
				and E.FILENUMID2 like #{fileNumId2Like}
            </if>

			<if test="fileNumId2s != null and fileNumId2s.size() &gt; 0">
			    and E.FILENUMID2 IN
                <foreach item="x_fileNumId2" index="index" collection="fileNumId2s" 
                     open="(" separator="," close=")">
                  #{x_fileNumId2}
                </foreach>
			</if>

			<if test="projIndex != null">
				and E.PROJ_INDEX = #{projIndex}
            </if>

			<if test="projIndexGreaterThanOrEqual != null">
				and E.PROJ_INDEX &gt;= #{projIndexGreaterThanOrEqual}
            </if>

			<if test="projIndexLessThanOrEqual != null">
				and E.PROJ_INDEX &lt;= #{projIndexLessThanOrEqual}
            </if>

			<if test="projIndexs != null and projIndexs.size() &gt; 0">
			    and E.PROJ_INDEX IN
                <foreach item="x_projIndex" index="index" collection="projIndexs" 
                     open="(" separator="," close=")">
                  #{x_projIndex}
                </foreach>
			</if>
      

			<if test="domainIndex != null">
				and E.DOMAIN_INDEX = #{domainIndex}
            </if>

			<if test="domainIndexGreaterThanOrEqual != null">
				and E.DOMAIN_INDEX &gt;= #{domainIndexGreaterThanOrEqual}
            </if>

			<if test="domainIndexLessThanOrEqual != null">
				and E.DOMAIN_INDEX &lt;= #{domainIndexLessThanOrEqual}
            </if>

			<if test="domainIndexs != null and domainIndexs.size() &gt; 0">
			    and E.DOMAIN_INDEX IN
                <foreach item="x_domainIndex" index="index" collection="domainIndexs" 
                     open="(" separator="," close=")">
                  #{x_domainIndex}
                </foreach>
			</if>
      
            <if test="dataRequest != null and dataRequest.filter != null ">
			    <include refid="com.glaf.global.GlobalMapper.dataRequestFilterCondition" />
			</if>
			 
		</where>
	</sql>

	<select id="getTreeDotsAndChildCountByParentId" 
	    parameterType="map"
		resultMap="treeDotResultMap">
		select a.*,b.cnt as childrenCount from TREEDOT a left join (select parent_id,COUNT(*) as cnt from treedot group by parent_id) b 
		on a.index_id=b.parent_id where 1=1 
		<if test="parentId != null">
		and a.parent_id=#{parentId}
		</if>
		order by a.parent_id 
	</select>
	
	<select id="getTreeDotsAndChildCountByIdLike" parameterType="map"
		resultMap="treeDotResultMap">
		select a.*,b.cnt as childrenCount from TREEDOT a left join (select parent_id,COUNT(*) as cnt from treedot group by parent_id) b 
		on a.index_id=b.parent_id where 1=1 
		<if test="idLike != null and idLike != '' ">
		and a.id like #{idLike}
		</if>
		order by a.parent_id 
	</select>
</mapper>